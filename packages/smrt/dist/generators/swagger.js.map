{"version":3,"file":"swagger.js","sources":["../../src/generators/swagger.ts"],"sourcesContent":["/**\n * OpenAPI documentation generation for smrt APIs\n *\n * Lightweight implementation with optional Swagger UI\n */\n\nimport { ObjectRegistry } from '../registry';\n\nexport interface OpenAPIConfig {\n  title?: string;\n  version?: string;\n  description?: string;\n  basePath?: string;\n  serverUrl?: string;\n}\n\n/**\n * Generate OpenAPI specification (tree-shakeable)\n */\nexport function generateOpenAPISpec(config: OpenAPIConfig = {}): any {\n  const {\n    title = 'smrt API',\n    version = '1.0.0',\n    description = 'Auto-generated API from smrt objects',\n    basePath = '/api/v1',\n    serverUrl = 'http://localhost:3000',\n  } = config;\n\n  const spec = {\n    openapi: '3.0.3',\n    info: { title, version, description },\n    servers: [{ url: serverUrl }],\n    security: [{ bearerAuth: [] }],\n    components: {\n      securitySchemes: {\n        bearerAuth: {\n          type: 'http',\n          scheme: 'bearer',\n          bearerFormat: 'JWT',\n        },\n      },\n      schemas: generateSchemas(),\n      responses: {\n        ValidationError: {\n          description: 'Validation error',\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  error: { type: 'string' },\n                  details: { type: 'string' },\n                },\n              },\n            },\n          },\n        },\n        NotFound: {\n          description: 'Resource not found',\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: { error: { type: 'string' } },\n              },\n            },\n          },\n        },\n      },\n    },\n    paths: generatePaths(basePath),\n  };\n\n  return spec;\n}\n\n/**\n * Generate schemas for all registered objects\n */\nfunction generateSchemas(): Record<string, any> {\n  const schemas: Record<string, any> = {};\n  const registeredClasses = ObjectRegistry.getAllClasses();\n\n  for (const [name] of registeredClasses) {\n    schemas[name] = generateObjectSchema(name);\n    schemas[`${name}List`] = {\n      type: 'object',\n      properties: {\n        data: {\n          type: 'array',\n          items: { $ref: `#/components/schemas/${name}` },\n        },\n        meta: {\n          type: 'object',\n          properties: {\n            total: { type: 'integer' },\n            limit: { type: 'integer' },\n            offset: { type: 'integer' },\n            count: { type: 'integer' },\n          },\n        },\n      },\n    };\n  }\n\n  return schemas;\n}\n\n/**\n * Generate schema for a specific object\n */\nfunction generateObjectSchema(objectName: string): any {\n  const fields = ObjectRegistry.getFields(objectName);\n  const properties: Record<string, any> = {\n    id: { type: 'string', format: 'uuid' },\n    slug: { type: 'string' },\n    created_at: { type: 'string', format: 'date-time' },\n    updated_at: { type: 'string', format: 'date-time' },\n  };\n\n  const required = ['id'];\n\n  for (const [fieldName, field] of fields) {\n    properties[fieldName] = fieldToOpenAPISchema(field);\n    if (field.options?.required) {\n      required.push(fieldName);\n    }\n  }\n\n  return { type: 'object', properties, required };\n}\n\n/**\n * Convert field to OpenAPI schema\n */\nfunction fieldToOpenAPISchema(field: any): any {\n  const schema: any = {\n    description: field.options?.description || '',\n  };\n\n  switch (field.type) {\n    case 'text':\n      schema.type = 'string';\n      if (field.options?.maxLength) schema.maxLength = field.options.maxLength;\n      if (field.options?.minLength) schema.minLength = field.options.minLength;\n      break;\n    case 'integer':\n      schema.type = 'integer';\n      if (field.options?.min !== undefined) schema.minimum = field.options.min;\n      if (field.options?.max !== undefined) schema.maximum = field.options.max;\n      break;\n    case 'decimal':\n      schema.type = 'number';\n      schema.format = 'float';\n      if (field.options?.min !== undefined) schema.minimum = field.options.min;\n      if (field.options?.max !== undefined) schema.maximum = field.options.max;\n      break;\n    case 'boolean':\n      schema.type = 'boolean';\n      break;\n    case 'datetime':\n      schema.type = 'string';\n      schema.format = 'date-time';\n      break;\n    case 'json':\n      schema.type = 'object';\n      schema.additionalProperties = true;\n      break;\n    case 'foreignKey':\n      schema.type = 'string';\n      schema.format = 'uuid';\n      break;\n    default:\n      schema.type = 'string';\n  }\n\n  if (field.options?.default !== undefined) {\n    schema.default = field.options.default;\n  }\n\n  return schema;\n}\n\n/**\n * Generate API paths\n */\nfunction generatePaths(basePath: string): Record<string, any> {\n  const paths: Record<string, any> = {};\n  const registeredClasses = ObjectRegistry.getAllClasses();\n\n  for (const [name] of registeredClasses) {\n    const pluralName = pluralize(name.toLowerCase());\n    const objectPath = `${basePath}/${pluralName}`;\n\n    const config = ObjectRegistry.getConfig(name);\n    const apiConfig = config.api || {};\n    const excluded = apiConfig.exclude || [];\n    const included = apiConfig.include;\n\n    const shouldInclude = (\n      endpoint: 'list' | 'get' | 'create' | 'update' | 'delete',\n    ) => {\n      if (included && !included.includes(endpoint)) return false;\n      if (excluded.includes(endpoint)) return false;\n      return true;\n    };\n\n    // Collection endpoints\n    paths[objectPath] = {};\n\n    if (shouldInclude('list')) {\n      paths[objectPath].get = {\n        summary: `List ${name} objects`,\n        tags: [name],\n        parameters: [\n          {\n            name: 'limit',\n            in: 'query',\n            schema: { type: 'integer', default: 50 },\n          },\n          {\n            name: 'offset',\n            in: 'query',\n            schema: { type: 'integer', default: 0 },\n          },\n        ],\n        responses: {\n          '200': {\n            description: 'Success',\n            content: {\n              'application/json': {\n                schema: { $ref: `#/components/schemas/${name}List` },\n              },\n            },\n          },\n        },\n      };\n    }\n\n    if (shouldInclude('create')) {\n      paths[objectPath].post = {\n        summary: `Create ${name}`,\n        tags: [name],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: { $ref: `#/components/schemas/${name}` },\n            },\n          },\n        },\n        responses: {\n          '201': { description: 'Created' },\n          '400': { $ref: '#/components/responses/ValidationError' },\n        },\n      };\n    }\n\n    // Item endpoints\n    paths[`${objectPath}/{id}`] = {};\n\n    if (shouldInclude('get')) {\n      paths[`${objectPath}/{id}`].get = {\n        summary: `Get ${name} by ID`,\n        tags: [name],\n        parameters: [\n          {\n            name: 'id',\n            in: 'path',\n            required: true,\n            schema: { type: 'string' },\n          },\n        ],\n        responses: {\n          '200': { description: 'Success' },\n          '404': { $ref: '#/components/responses/NotFound' },\n        },\n      };\n    }\n\n    if (shouldInclude('update')) {\n      paths[`${objectPath}/{id}`].put = {\n        summary: `Update ${name}`,\n        tags: [name],\n        parameters: [\n          {\n            name: 'id',\n            in: 'path',\n            required: true,\n            schema: { type: 'string' },\n          },\n        ],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: { $ref: `#/components/schemas/${name}` },\n            },\n          },\n        },\n        responses: {\n          '200': { description: 'Updated' },\n          '404': { $ref: '#/components/responses/NotFound' },\n        },\n      };\n    }\n\n    if (shouldInclude('delete')) {\n      paths[`${objectPath}/{id}`].delete = {\n        summary: `Delete ${name}`,\n        tags: [name],\n        parameters: [\n          {\n            name: 'id',\n            in: 'path',\n            required: true,\n            schema: { type: 'string' },\n          },\n        ],\n        responses: {\n          '204': { description: 'Deleted' },\n          '404': { $ref: '#/components/responses/NotFound' },\n        },\n      };\n    }\n  }\n\n  return paths;\n}\n\n/**\n * Setup Swagger UI (optional peer dependency)\n */\nexport function setupSwaggerUI(app: any, spec: any, path = '/docs') {\n  try {\n    const swaggerUi = require('swagger-ui-express');\n\n    app.use(path, swaggerUi.serve);\n    app.get(\n      path,\n      swaggerUi.setup(spec, {\n        customCss: '.swagger-ui .topbar { display: none }',\n      }),\n    );\n\n    app.get(`${path}/openapi.json`, (_req: any, res: any) => {\n      res.json(spec);\n    });\n\n    console.log(`ðŸ“š Swagger UI available at ${path}`);\n  } catch (_error) {\n    console.warn('Swagger UI not available (install swagger-ui-express)');\n  }\n}\n\nfunction pluralize(word: string): string {\n  if (word.endsWith('y')) return `${word.slice(0, -1)}ies`;\n  if (\n    word.endsWith('s') ||\n    word.endsWith('x') ||\n    word.endsWith('z') ||\n    word.endsWith('ch') ||\n    word.endsWith('sh')\n  )\n    return `${word}es`;\n  return `${word}s`;\n}\n"],"names":[],"mappings":"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"}