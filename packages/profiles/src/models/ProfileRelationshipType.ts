/**
 * ProfileRelationshipType model - Lookup table for relationship types
 *
 * Defines the kinds of relationships that can exist between profiles.
 * Uses UUID primary key with unique slug for human-readable lookups.
 */

import {
  boolean,
  SmrtObject,
  type SmrtObjectOptions,
  smrt,
  text,
} from '@smrt/core';
import type { ReciprocalHandler } from '../types';

export interface ProfileRelationshipTypeOptions extends SmrtObjectOptions {
  slug?: string;
  name?: string;
  reciprocal?: boolean;
}

/**
 * Registry of reciprocal relationship handlers
 */
const reciprocalHandlers = new Map<string, ReciprocalHandler>();

/**
 * Default handlers for common reciprocal relationship patterns
 */
const DEFAULT_HANDLERS: Record<string, ReciprocalHandler> = {
  // Symmetric relationships (same type in both directions)
  friend: async (from, to, context) => {
    await to.addRelationship(from, 'friend', context);
  },

  spouse: async (from, to) => {
    await to.addRelationship(from, 'spouse');
  },

  partner: async (from, to, context) => {
    await to.addRelationship(from, 'partner', context);
  },

  colleague: async (from, to, context) => {
    await to.addRelationship(from, 'colleague', context);
  },

  sibling: async (from, to) => {
    await to.addRelationship(from, 'sibling');
  },
};

// Register default handlers
for (const [slug, handler] of Object.entries(DEFAULT_HANDLERS)) {
  reciprocalHandlers.set(slug, handler);
}

@smrt({
  api: { include: ['list', 'get', 'create', 'update'] },
  mcp: { include: ['list', 'get'] },
  cli: true,
})
export class ProfileRelationshipType extends SmrtObject {
  // id: UUID (auto-generated by SmrtObject)
  // slug is inherited from SmrtObject (auto-generated from name)
  name = text({ required: true });
  reciprocal = boolean({ default: true }); // True for two-way relationships

  constructor(options: ProfileRelationshipTypeOptions = {}) {
    super(options);
    // Field values are automatically set by initializePropertiesFromOptions()
    // No need to manually assign Field properties here
  }

  /**
   * Convenience method for slug-based lookup
   *
   * @param slug - The slug to search for
   * @returns ProfileRelationshipType instance or null if not found
   */
  static async getBySlug(
    _slug: string,
  ): Promise<ProfileRelationshipType | null> {
    // Will be auto-implemented by SMRT
    return null;
  }

  /**
   * Register a custom reciprocal handler for a relationship type
   *
   * @param slug - The relationship type slug
   * @param handler - The handler function to execute when creating reciprocal relationship
   */
  static registerReciprocalHandler(
    slug: string,
    handler: ReciprocalHandler,
  ): void {
    reciprocalHandlers.set(slug, handler);
  }

  /**
   * Get the reciprocal handler for a relationship type
   *
   * @param slug - The relationship type slug
   * @returns The handler function or undefined
   */
  static getReciprocalHandler(slug: string): ReciprocalHandler | undefined {
    return reciprocalHandlers.get(slug);
  }

  /**
   * Check if a relationship type is reciprocal
   *
   * @param slug - The relationship type slug
   * @returns True if reciprocal, false otherwise
   */
  static async isReciprocal(slug: string): Promise<boolean> {
    const type = await ProfileRelationshipType.getBySlug(slug);
    return type?.reciprocal ? Boolean(type.reciprocal) : false;
  }
}
