/**
 * ProfileType model - Lookup table defining profile types
 *
 * Represents the nature of a profile (e.g., 'human', 'org', 'robot').
 * Uses UUID primary key with unique slug for human-readable lookups.
 */

import { SmrtObject, type SmrtObjectOptions, smrt } from '@have/smrt';
import { text } from '@have/smrt';

export interface ProfileTypeOptions extends SmrtObjectOptions {
  slug?: string;
  name?: string;
  description?: string;
}

@smrt({
  api: { include: ['list', 'get', 'create', 'update'] },
  mcp: { include: ['list', 'get'] },
  cli: true,
})
export class ProfileType extends SmrtObject {
  // id: UUID (auto-generated by SmrtObject)
  // slug is inherited from SmrtObject (auto-generated from name)
  name = text({ required: true });
  description = text();

  constructor(options: ProfileTypeOptions = {}) {
    super(options);
    // Field values are automatically set by initializePropertiesFromOptions()
    // No need to manually assign Field properties here
  }

  /**
   * Convenience method for slug-based lookup
   *
   * @param slug - The slug to search for
   * @returns ProfileType instance or null if not found
   */
  static async getBySlug(slug: string): Promise<ProfileType | null> {
    // Will be auto-implemented by SMRT
    return null;
  }
}
