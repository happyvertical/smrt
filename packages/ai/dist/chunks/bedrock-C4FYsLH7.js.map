{"version":3,"file":"bedrock-C4FYsLH7.js","sources":["../../src/shared/providers/bedrock.ts"],"sourcesContent":["/**\n * AWS Bedrock provider implementation\n */\n\nimport type {\n  AICapabilities,\n  AIInterface,\n  AIMessage,\n  AIModel,\n  AIResponse,\n  BedrockOptions,\n  ChatOptions,\n  CompletionOptions,\n  EmbeddingOptions,\n  EmbeddingResponse,\n} from '../types';\nimport {\n  AIError,\n  AuthenticationError,\n  ContextLengthError,\n  ModelNotFoundError,\n  RateLimitError,\n} from '../types';\n\n// Note: This implementation will require @aws-sdk/client-bedrock-runtime package\n// For now, this is a placeholder that defines the interface\n\nexport class BedrockProvider implements AIInterface {\n  private options: BedrockOptions;\n  private client: any; // Will be BedrockRuntimeClient instance from @aws-sdk/client-bedrock-runtime\n\n  constructor(options: BedrockOptions) {\n    this.options = {\n      defaultModel: 'anthropic.claude-3-5-sonnet-20241022-v2:0',\n      ...options,\n    };\n\n    // Initialize AWS Bedrock client\n    this.initializeClientSync();\n  }\n\n  private initializeClientSync() {\n    try {\n      // Dynamic import in constructor - this will work if the package is installed\n      import('@aws-sdk/client-bedrock-runtime')\n        .then(({ BedrockRuntimeClient }) => {\n          this.client = new BedrockRuntimeClient({\n            region: this.options.region,\n            credentials: this.options.credentials,\n            endpoint: this.options.endpoint,\n          });\n        })\n        .catch(() => {\n          // Client will be null and we'll handle it in methods\n        });\n    } catch (_error) {\n      // Client will be null and we'll handle it in methods\n    }\n  }\n\n  private async ensureClient() {\n    if (!this.client) {\n      try {\n        const { BedrockRuntimeClient } = await import(\n          '@aws-sdk/client-bedrock-runtime'\n        );\n        this.client = new BedrockRuntimeClient({\n          region: this.options.region,\n          credentials: this.options.credentials,\n          endpoint: this.options.endpoint,\n        });\n      } catch (_error) {\n        throw new AIError(\n          'Failed to initialize Bedrock client. Make sure @aws-sdk/client-bedrock-runtime is installed.',\n          'INITIALIZATION_ERROR',\n          'bedrock',\n        );\n      }\n    }\n  }\n\n  async chat(\n    messages: AIMessage[],\n    options: ChatOptions = {},\n  ): Promise<AIResponse> {\n    try {\n      await this.ensureClient();\n\n      const modelId = options.model || this.options.defaultModel;\n\n      if (modelId?.includes('anthropic.claude')) {\n        return this.chatWithClaude(messages, options);\n      }\n      if (modelId?.includes('amazon.titan')) {\n        return this.chatWithTitan(messages, options);\n      }\n      if (modelId?.includes('cohere.command')) {\n        return this.chatWithCohere(messages, options);\n      }\n      if (modelId?.includes('meta.llama')) {\n        return this.chatWithLlama(messages, options);\n      }\n\n      // Default to Claude format for unknown models\n      return this.chatWithClaude(messages, options);\n    } catch (error) {\n      throw this.mapError(error);\n    }\n  }\n\n  async complete(\n    prompt: string,\n    options: CompletionOptions = {},\n  ): Promise<AIResponse> {\n    return this.chat([{ role: 'user', content: prompt }], {\n      model: options.model,\n      maxTokens: options.maxTokens,\n      temperature: options.temperature,\n      topP: options.topP,\n      n: options.n,\n      stop: options.stop,\n      stream: options.stream,\n      onProgress: options.onProgress,\n    });\n  }\n\n  async embed(\n    _text: string | string[],\n    _options: EmbeddingOptions = {},\n  ): Promise<EmbeddingResponse> {\n    try {\n      // TODO: Implement Bedrock embeddings with Titan Embeddings\n      // const modelId = options.model || 'amazon.titan-embed-text-v1';\n\n      throw new AIError(\n        'Bedrock embeddings not implemented',\n        'NOT_IMPLEMENTED',\n        'bedrock',\n      );\n    } catch (error) {\n      throw this.mapError(error);\n    }\n  }\n\n  async *stream(\n    _messages: AIMessage[],\n    _options: ChatOptions = {},\n  ): AsyncIterable<string> {\n    // TODO: Implement Bedrock streaming\n    // For now, yield an empty stream and then throw\n    yield* [];\n    throw new AIError(\n      'Bedrock streaming not implemented',\n      'NOT_IMPLEMENTED',\n      'bedrock',\n    );\n  }\n\n  async countTokens(text: string): Promise<number> {\n    // AWS Bedrock doesn't provide a direct token counting API\n    // Approximation varies by model provider\n    return Math.ceil(text.length / 4);\n  }\n\n  async getModels(): Promise<AIModel[]> {\n    // Return static list of popular Bedrock models\n    return [\n      // Anthropic Claude models\n      {\n        id: 'anthropic.claude-3-5-sonnet-20241022-v2:0',\n        name: 'Claude 3.5 Sonnet v2',\n        description: 'Latest Claude 3.5 Sonnet model on Bedrock',\n        contextLength: 200000,\n        capabilities: ['text', 'chat', 'vision', 'functions'],\n        supportsFunctions: true,\n        supportsVision: true,\n      },\n      {\n        id: 'anthropic.claude-3-opus-20240229-v1:0',\n        name: 'Claude 3 Opus',\n        description: 'Most powerful Claude model on Bedrock',\n        contextLength: 200000,\n        capabilities: ['text', 'chat', 'vision'],\n        supportsFunctions: false,\n        supportsVision: true,\n      },\n      // Amazon Titan models\n      {\n        id: 'amazon.titan-text-premier-v1:0',\n        name: 'Titan Text Premier',\n        description: 'Premier Amazon Titan text model',\n        contextLength: 32000,\n        capabilities: ['text', 'chat'],\n        supportsFunctions: false,\n        supportsVision: false,\n      },\n      {\n        id: 'amazon.titan-embed-text-v1',\n        name: 'Titan Embeddings Text',\n        description: 'Amazon Titan text embeddings model',\n        contextLength: 8192,\n        capabilities: ['embeddings'],\n        supportsFunctions: false,\n        supportsVision: false,\n      },\n      // Cohere models\n      {\n        id: 'cohere.command-r-plus-v1:0',\n        name: 'Command R+',\n        description: 'Cohere Command R+ model with advanced capabilities',\n        contextLength: 128000,\n        capabilities: ['text', 'chat', 'functions'],\n        supportsFunctions: true,\n        supportsVision: false,\n      },\n      // Meta Llama models\n      {\n        id: 'meta.llama3-1-405b-instruct-v1:0',\n        name: 'Llama 3.1 405B Instruct',\n        description: 'Meta Llama 3.1 405B instruction-tuned model',\n        contextLength: 128000,\n        capabilities: ['text', 'chat'],\n        supportsFunctions: false,\n        supportsVision: false,\n      },\n    ];\n  }\n\n  async getCapabilities(): Promise<AICapabilities> {\n    return {\n      chat: true,\n      completion: true,\n      embeddings: true, // Via Titan Embeddings\n      streaming: true,\n      functions: true, // Some models support function calling\n      vision: true, // Some models support vision\n      fineTuning: true, // Via Bedrock fine-tuning\n      maxContextLength: 200000,\n      supportedOperations: [\n        'chat',\n        'completion',\n        'embedding',\n        'streaming',\n        'functions',\n        'vision',\n      ],\n    };\n  }\n\n  private async chatWithClaude(\n    messages: AIMessage[],\n    options: ChatOptions,\n  ): Promise<AIResponse> {\n    const { InvokeModelCommand } = await import(\n      '@aws-sdk/client-bedrock-runtime'\n    );\n\n    // Convert messages to Claude format for Bedrock\n    const { system, anthropicMessages } = this.mapMessagesToClaude(messages);\n\n    const payload = {\n      anthropic_version: 'bedrock-2023-05-31',\n      max_tokens: options.maxTokens || 4096,\n      messages: anthropicMessages,\n      temperature: options.temperature,\n      top_p: options.topP,\n      stop_sequences: Array.isArray(options.stop)\n        ? options.stop\n        : options.stop\n          ? [options.stop]\n          : undefined,\n      system: system || undefined,\n    };\n\n    const command = new InvokeModelCommand({\n      modelId: options.model || this.options.defaultModel,\n      contentType: 'application/json',\n      accept: 'application/json',\n      body: JSON.stringify(payload),\n    });\n\n    const response = await this.client.send(command);\n    const responseBody = JSON.parse(new TextDecoder().decode(response.body));\n\n    return {\n      content: responseBody.content?.[0]?.text || '',\n      model: options.model || this.options.defaultModel,\n      finishReason: this.mapClaudeFinishReason(responseBody.stop_reason),\n      usage: {\n        promptTokens: responseBody.usage?.input_tokens || 0,\n        completionTokens: responseBody.usage?.output_tokens || 0,\n        totalTokens:\n          (responseBody.usage?.input_tokens || 0) +\n          (responseBody.usage?.output_tokens || 0),\n      },\n    };\n  }\n\n  private async chatWithTitan(\n    _messages: AIMessage[],\n    _options: ChatOptions,\n  ): Promise<AIResponse> {\n    // TODO: Implement Titan-specific format for Bedrock\n    throw new AIError(\n      'Titan on Bedrock not implemented',\n      'NOT_IMPLEMENTED',\n      'bedrock',\n    );\n  }\n\n  private async chatWithCohere(\n    _messages: AIMessage[],\n    _options: ChatOptions,\n  ): Promise<AIResponse> {\n    // TODO: Implement Cohere-specific format for Bedrock\n    throw new AIError(\n      'Cohere on Bedrock not implemented',\n      'NOT_IMPLEMENTED',\n      'bedrock',\n    );\n  }\n\n  private async chatWithLlama(\n    _messages: AIMessage[],\n    _options: ChatOptions,\n  ): Promise<AIResponse> {\n    // TODO: Implement Llama-specific format for Bedrock\n    throw new AIError(\n      'Llama on Bedrock not implemented',\n      'NOT_IMPLEMENTED',\n      'bedrock',\n    );\n  }\n\n  private mapMessagesToClaude(messages: AIMessage[]): {\n    system?: string;\n    anthropicMessages: Array<{ role: 'user' | 'assistant'; content: string }>;\n  } {\n    // Same as Anthropic provider - separate system messages\n    let system: string | undefined;\n    const anthropicMessages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n    }> = [];\n\n    for (const message of messages) {\n      if (message.role === 'system') {\n        system = system ? `${system}\\n\\n${message.content}` : message.content;\n      } else {\n        anthropicMessages.push({\n          role: message.role === 'assistant' ? 'assistant' : 'user',\n          content: message.content,\n        });\n      }\n    }\n\n    return { system, anthropicMessages };\n  }\n\n  private mapClaudeFinishReason(\n    reason: string | null,\n  ): AIResponse['finishReason'] {\n    switch (reason) {\n      case 'end_turn':\n        return 'stop';\n      case 'max_tokens':\n        return 'length';\n      case 'stop_sequence':\n        return 'stop';\n      case 'tool_use':\n        return 'tool_calls';\n      default:\n        return 'stop';\n    }\n  }\n\n  private mapError(error: unknown): AIError {\n    if (error instanceof AIError) {\n      return error;\n    }\n\n    // Map common AWS error codes\n    if (typeof error === 'object' && error !== null) {\n      const awsError = error as { name?: string; message?: string };\n\n      if (awsError.name === 'AccessDeniedException') {\n        return new AuthenticationError('bedrock');\n      }\n\n      if (awsError.name === 'ThrottlingException') {\n        return new RateLimitError('bedrock');\n      }\n\n      if (awsError.name === 'ResourceNotFoundException') {\n        return new ModelNotFoundError(\n          awsError.message || 'Model not found',\n          'bedrock',\n        );\n      }\n\n      if (\n        awsError.name === 'ValidationException' &&\n        awsError.message?.includes('input is too long')\n      ) {\n        return new ContextLengthError('bedrock');\n      }\n    }\n\n    const errorMessage =\n      error instanceof Error ? error.message : 'Unknown Bedrock error occurred';\n    return new AIError(errorMessage, 'UNKNOWN_ERROR', 'bedrock');\n  }\n}\n"],"names":[],"mappings":"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"}