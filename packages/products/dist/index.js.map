{"version":3,"file":"index.js","sources":["../src/lib/models/Category.ts","../src/lib/models/Product.ts"],"sourcesContent":["/**\n * Product knowledge base category model\n *\n * SMRT auto-generates REST APIs, MCP tools, and TypeScript clients from this class.\n */\n\nimport { SmrtObject, type SmrtObjectOptions, smrt } from '@have/smrt';\n\n/**\n * Options for Category initialization\n */\nexport interface CategoryOptions extends SmrtObjectOptions {\n  name?: string;\n  description?: string;\n  parentId?: string;\n  level?: number;\n  productCount?: number;\n  active?: boolean;\n}\n\n/**\n * Product knowledge base category for organizing product information\n */\n@smrt({\n  api: {\n    include: ['list', 'get', 'create', 'update'], // Standard CRUD except delete\n  },\n  mcp: {\n    include: ['list', 'get'], // AI tools for category discovery\n  },\n  cli: true, // Enable CLI commands for admin\n})\nexport class Category extends SmrtObject {\n  name = '';\n  description = '';\n  parentId?: string; // For hierarchical categories\n  level = 0; // Category depth in hierarchy\n  productCount = 0; // Number of products in this category\n  active = true;\n\n  constructor(options: CategoryOptions = {}) {\n    super(options);\n    this.name = options.name || '';\n    this.description = options.description || '';\n    this.parentId = options.parentId;\n    this.level = options.level || 0;\n    this.productCount = options.productCount || 0;\n    this.active = options.active !== undefined ? options.active : true;\n  }\n\n  async getProducts() {\n    // Returns products in this category - implementation auto-generated\n    return [];\n  }\n\n  async getSubcategories() {\n    // Returns child categories - implementation auto-generated\n    return [];\n  }\n\n  async updateProductCount(): Promise<void> {\n    // Updates the cached product count\n    // Implementation will be auto-generated to count related products\n  }\n\n  static async getRootCategories(): Promise<Category[]> {\n    // Returns top-level categories (parentId is null/empty)\n    return [];\n  }\n}\n","/**\n * Product knowledge base model\n *\n * SMRT auto-generates REST APIs, MCP tools, and TypeScript clients from this class.\n */\n\nimport { SmrtObject, type SmrtObjectOptions, smrt } from '@have/smrt';\n\n/**\n * Options for Product initialization\n */\nexport interface ProductOptions extends SmrtObjectOptions {\n  name?: string;\n  description?: string;\n  category?: string;\n  manufacturer?: string;\n  model?: string;\n  price?: number;\n  inStock?: boolean;\n  specifications?: Record<string, any>;\n  tags?: string[];\n}\n\n/**\n * Product information for knowledge base queries\n */\n@smrt({\n  api: {\n    include: ['list', 'get', 'create', 'update'], // Standard CRUD except delete\n  },\n  mcp: {\n    include: ['list', 'get'], // AI tools for product discovery\n  },\n  cli: true, // Enable CLI commands for admin\n})\nexport class Product extends SmrtObject {\n  name = '';\n  description = '';\n  category = ''; // Reference to category\n  manufacturer = '';\n  model = '';\n  price = 0;\n  inStock = true;\n  specifications: Record<string, any> = {};\n  tags: string[] = [];\n\n  constructor(options: ProductOptions = {}) {\n    super(options);\n    this.name = options.name || '';\n    this.description = options.description || '';\n    this.category = options.category || '';\n    this.manufacturer = options.manufacturer || '';\n    this.model = options.model || '';\n    this.price = options.price || 0;\n    this.inStock = options.inStock !== undefined ? options.inStock : true;\n    this.specifications = options.specifications || {};\n    this.tags = options.tags || [];\n  }\n\n  async getSpecification(key: string): Promise<any> {\n    return this.specifications[key];\n  }\n\n  async updateSpecification(key: string, value: any): Promise<void> {\n    this.specifications[key] = value;\n  }\n\n  static async searchByText(_query: string): Promise<Product[]> {\n    // Search implementation will be auto-generated\n    return [];\n  }\n\n  static async findByManufacturer(_manufacturer: string): Promise<Product[]> {\n    // Manufacturer search will be auto-generated\n    return [];\n  }\n}\n"],"names":["_init"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,wBAAC,KAAK;AAAA,EACJ,KAAK;AAAA,IACH,SAAS,CAAC,QAAQ,OAAO,UAAU,QAAQ;AAAA;AAAA,EAAA;AAAA,EAE7C,KAAK;AAAA,IACH,SAAS,CAAC,QAAQ,KAAK;AAAA;AAAA,EAAA;AAAA,EAEzB,KAAK;AAAA;AACP,CAAC;AACM,MAAM,kBAAiB,iBAAW;AAAA,EACvC,OAAO;AAAA,EACP,cAAc;AAAA,EACd;AAAA;AAAA,EACA,QAAQ;AAAA;AAAA,EACR,eAAe;AAAA;AAAA,EACf,SAAS;AAAA,EAET,YAAY,UAA2B,IAAI;AACzC,UAAM,OAAO;AACb,SAAK,OAAO,QAAQ,QAAQ;AAC5B,SAAK,cAAc,QAAQ,eAAe;AAC1C,SAAK,WAAW,QAAQ;AACxB,SAAK,QAAQ,QAAQ,SAAS;AAC9B,SAAK,eAAe,QAAQ,gBAAgB;AAC5C,SAAK,SAAS,QAAQ,WAAW,SAAY,QAAQ,SAAS;AAAA,EAChE;AAAA,EAEA,MAAM,cAAc;AAElB,WAAO,CAAA;AAAA,EACT;AAAA,EAEA,MAAM,mBAAmB;AAEvB,WAAO,CAAA;AAAA,EACT;AAAA,EAEA,MAAM,qBAAoC;AAAA,EAG1C;AAAA,EAEA,aAAa,oBAAyC;AAEpD,WAAO,CAAA;AAAA,EACT;AACF;AArCO;AAAM,WAAN,wCATP,sBASa;AAAN,4BAAM;ACNb,uBAAC,KAAK;AAAA,EACJ,KAAK;AAAA,IACH,SAAS,CAAC,QAAQ,OAAO,UAAU,QAAQ;AAAA;AAAA,EAAA;AAAA,EAE7C,KAAK;AAAA,IACH,SAAS,CAAC,QAAQ,KAAK;AAAA;AAAA,EAAA;AAAA,EAEzB,KAAK;AAAA;AACP,CAAC;AACM,MAAM,iBAAgB,iBAAW;AAAA,EACtC,OAAO;AAAA,EACP,cAAc;AAAA,EACd,WAAW;AAAA;AAAA,EACX,eAAe;AAAA,EACf,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,iBAAsC,CAAA;AAAA,EACtC,OAAiB,CAAA;AAAA,EAEjB,YAAY,UAA0B,IAAI;AACxC,UAAM,OAAO;AACb,SAAK,OAAO,QAAQ,QAAQ;AAC5B,SAAK,cAAc,QAAQ,eAAe;AAC1C,SAAK,WAAW,QAAQ,YAAY;AACpC,SAAK,eAAe,QAAQ,gBAAgB;AAC5C,SAAK,QAAQ,QAAQ,SAAS;AAC9B,SAAK,QAAQ,QAAQ,SAAS;AAC9B,SAAK,UAAU,QAAQ,YAAY,SAAY,QAAQ,UAAU;AACjE,SAAK,iBAAiB,QAAQ,kBAAkB,CAAA;AAChD,SAAK,OAAO,QAAQ,QAAQ,CAAA;AAAA,EAC9B;AAAA,EAEA,MAAM,iBAAiB,KAA2B;AAChD,WAAO,KAAK,eAAe,GAAG;AAAA,EAChC;AAAA,EAEA,MAAM,oBAAoB,KAAa,OAA2B;AAChE,SAAK,eAAe,GAAG,IAAI;AAAA,EAC7B;AAAA,EAEA,aAAa,aAAa,QAAoC;AAE5D,WAAO,CAAA;AAAA,EACT;AAAA,EAEA,aAAa,mBAAmB,eAA2C;AAEzE,WAAO,CAAA;AAAA,EACT;AACF;AAzCOA,SAAA;AAAM,UAAN,kBAAAA,QAAA,cATP,qBASa;AAAN,kBAAAA,QAAA,GAAM;"}