{"version":3,"file":"index-BA91k3oM.js","sources":["../../src/vite-plugin/sveltekit-generator.ts","../../src/vite-plugin/index.ts"],"sourcesContent":["/**\n * SvelteKit route auto-generation from SMRT objects\n * Generates real TypeScript files in src/routes/api/ based on discovered SMRT objects\n */\n\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';\nimport { join, relative } from 'node:path';\nimport type {\n  SmartObjectDefinition,\n  SmartObjectManifest,\n} from '../scanner/types';\n\nexport interface SvelteKitOptions {\n  enabled: boolean;\n  routesDir: string;\n  objectsDir: string;\n  configPath?: string; // default: 'src/lib/server'\n  configFileName?: string; // default: 'smrt.ts'\n}\n\n/**\n * Generates SvelteKit API routes from manifest\n */\nexport async function generateSvelteKitRoutes(\n  projectRoot: string,\n  manifest: SmartObjectManifest,\n  options: SvelteKitOptions,\n): Promise<void> {\n  if (!options.enabled) return;\n\n  console.log('[smrt] Generating SvelteKit routes...');\n\n  // Generate centralized configuration file first (if it doesn't exist)\n  await generateSmrtConfigFile(projectRoot, manifest, options);\n\n  for (const [className, objectDef] of Object.entries(manifest.objects)) {\n    await generateRoutesForObject(projectRoot, className, objectDef, options);\n  }\n\n  // Update .gitignore to exclude generated routes\n  updateGitignore(projectRoot, options);\n\n  console.log(\n    `[smrt] Generated routes for ${Object.keys(manifest.objects).length} SMRT objects`,\n  );\n}\n\n/**\n * Generates SMRT object registration file\n * This file imports all SMRT objects to trigger their @smrt() decorators\n */\nasync function generateRegistrationFile(\n  projectRoot: string,\n  manifest: SmartObjectManifest,\n  options: SvelteKitOptions,\n): Promise<void> {\n  const configPath = options.configPath || 'src/lib/server';\n  const configDir = join(projectRoot, configPath);\n  const registrationFilePath = join(configDir, 'smrt-register.ts');\n\n  const imports = Object.entries(manifest.objects)\n    .map(([className, objectDef]) => {\n      const importPath = getSvelteKitImportPath(\n        projectRoot,\n        objectDef.filePath,\n        options.objectsDir,\n        className,\n      );\n      const actualClassName = importPath.split('/').pop() || className;\n      return `import { ${actualClassName} } from '${importPath}';`;\n    })\n    .join('\\n');\n\n  const registrationContent = `/**\n * Auto-generated SMRT object registration\n * DO NOT EDIT - changes will be overwritten\n *\n * This file imports all SMRT objects to trigger their @smrt() decorators\n * and register them in the ObjectRegistry.\n */\n\n${imports}\n\n// Objects are registered automatically when imported via @smrt() decorator\n`;\n\n  // Create directory if it doesn't exist\n  if (!existsSync(configDir)) {\n    mkdirSync(configDir, { recursive: true });\n  }\n\n  writeFileSync(registrationFilePath, registrationContent, 'utf-8');\n  console.log(`[smrt] Generated registration file: ${registrationFilePath}`);\n}\n\n/**\n * Generates centralized SMRT configuration file\n * Only creates if file doesn't exist (preserves user customizations)\n */\nasync function generateSmrtConfigFile(\n  projectRoot: string,\n  manifest: SmartObjectManifest,\n  options: SvelteKitOptions,\n): Promise<void> {\n  const configPath = options.configPath || 'src/lib/server';\n  const configFileName = options.configFileName || 'smrt.ts';\n  const configDir = join(projectRoot, configPath);\n  const configFilePath = join(configDir, configFileName);\n\n  // Always generate registration file (it gets overwritten)\n  await generateRegistrationFile(projectRoot, manifest, options);\n\n  // Don't overwrite existing config file\n  if (existsSync(configFilePath)) {\n    console.log('[smrt] Config file already exists, skipping generation');\n    return;\n  }\n\n  const configContent = `/**\n * Centralized SMRT configuration with per-object overrides\n * Generated by @smrt/core vite plugin\n *\n * Most objects will use the default configuration.\n * Add entries to \\`objectOverrides\\` for objects that need different backends.\n */\n\n// Import SMRT objects to register them via @smrt() decorators\nimport './smrt-register.js';\n\nimport { ObjectRegistry } from '@smrt/core';\nimport type { SmrtClassOptions } from '@smrt/core';\n\n/**\n * Per-object configuration overrides\n * Define specific backends for objects that differ from project defaults\n *\n * @example\n * const objectOverrides: Record<string, Partial<SmrtClassOptions>> = {\n *   // Analytics uses a separate PostgreSQL database\n *   Analytics: {\n *     db: {\n *       url: process.env.ANALYTICS_DATABASE_URL!,\n *       type: 'postgres'\n *     }\n *   },\n *\n *   // AuditLog uses dedicated database with no AI\n *   AuditLog: {\n *     db: {\n *       url: process.env.AUDIT_DATABASE_URL!,\n *       type: 'postgres'\n *     },\n *     ai: undefined\n *   },\n *\n *   // Cache uses REST adapter (e.g., Redis)\n *   Cache: {\n *     persistence: {\n *       type: 'rest',\n *       baseUrl: process.env.REDIS_URL!\n *     }\n *   }\n * };\n */\nconst objectOverrides: Record<string, Partial<SmrtClassOptions>> = {\n  // Add your per-object configuration overrides here\n};\n\n/**\n * Default configuration for most SMRT objects\n * Customize this to change project-wide defaults\n */\nfunction getDefaultConfig(): SmrtClassOptions {\n  return {\n    db: {\n      url: process.env.DATABASE_URL || ':memory:',\n      type: (process.env.DATABASE_TYPE as 'sqlite' | 'postgres') || 'sqlite'\n    },\n    ai: process.env.OPENAI_API_KEY ? {\n      type: 'openai',\n      apiKey: process.env.OPENAI_API_KEY\n    } : process.env.ANTHROPIC_API_KEY ? {\n      type: 'anthropic',\n      apiKey: process.env.ANTHROPIC_API_KEY\n    } : undefined\n  };\n}\n\n/**\n * Get configuration for a specific SMRT object\n * Merges project defaults with per-object overrides if defined\n */\nexport function getSmrtConfig(className: string): SmrtClassOptions {\n  const defaults = getDefaultConfig();\n  const override = objectOverrides[className];\n\n  if (override) {\n    // Deep merge: override specific properties while keeping defaults\n    return {\n      ...defaults,\n      ...override,\n      // Ensure nested objects are merged properly\n      db: override.db ? { ...defaults.db, ...override.db } : defaults.db,\n      ai: override.ai !== undefined ? override.ai : defaults.ai\n    };\n  }\n\n  return defaults;\n}\n\n/**\n * Helper to get a collection with centralized configuration\n * Automatically applies project defaults or object-specific overrides\n */\nexport async function getCollection<T>(className: string) {\n  return await ObjectRegistry.getCollection<T>(\n    className,\n    getSmrtConfig(className)\n  );\n}\n`;\n\n  // Create directory if it doesn't exist\n  if (!existsSync(configDir)) {\n    mkdirSync(configDir, { recursive: true });\n  }\n\n  writeFileSync(configFilePath, configContent, 'utf-8');\n  console.log(`[smrt] Generated configuration file: ${configFilePath}`);\n}\n\n/**\n * Generates route files for a single SMRT object\n */\nasync function generateRoutesForObject(\n  projectRoot: string,\n  className: string,\n  objectDef: SmartObjectDefinition,\n  options: SvelteKitOptions,\n): Promise<void> {\n  const collectionName = objectDef.collection;\n  const routeDir = join(projectRoot, options.routesDir, collectionName);\n\n  // Check if API is enabled for this object\n  const apiConfig = objectDef.decoratorConfig?.api;\n  if (apiConfig === false) {\n    console.log(`[smrt] Skipping ${className} - API disabled`);\n    return;\n  }\n\n  // Determine which actions to include\n  const standardActions = ['list', 'get', 'create', 'update', 'delete'];\n  let includedActions: string[] = [];\n\n  if (apiConfig === true || apiConfig === undefined) {\n    // Include all standard actions by default\n    includedActions = [...standardActions];\n  } else if (typeof apiConfig === 'object') {\n    if (apiConfig.include) {\n      includedActions = apiConfig.include.filter((action) =>\n        standardActions.includes(action),\n      );\n    } else {\n      includedActions = [...standardActions];\n    }\n\n    if (apiConfig.exclude && Array.isArray(apiConfig.exclude)) {\n      includedActions = includedActions.filter(\n        (action) => !apiConfig.exclude?.includes(action),\n      );\n    }\n  }\n\n  // Generate collection route (list, create)\n  if (includedActions.includes('list') || includedActions.includes('create')) {\n    const collectionRoute = generateCollectionRouteTemplate(\n      projectRoot,\n      className,\n      objectDef,\n      includedActions,\n      options,\n    );\n    writeRoute(routeDir, '+server.ts', collectionRoute);\n  }\n\n  // Generate item route (get, update, delete)\n  if (\n    includedActions.includes('get') ||\n    includedActions.includes('update') ||\n    includedActions.includes('delete')\n  ) {\n    const itemRoute = generateItemRouteTemplate(\n      projectRoot,\n      className,\n      objectDef,\n      includedActions,\n      options,\n    );\n    writeRoute(join(routeDir, '[id]'), '+server.ts', itemRoute);\n  }\n\n  // Generate custom action routes\n  const customActions = Object.entries(objectDef.methods).filter(\n    ([name, method]) =>\n      !standardActions.includes(name) &&\n      method.isPublic &&\n      shouldIncludeInApi(name, apiConfig),\n  );\n\n  for (const [actionName, actionDef] of customActions) {\n    const actionRoute = generateActionRouteTemplate(\n      projectRoot,\n      className,\n      actionName,\n      actionDef,\n      objectDef,\n      options,\n    );\n    writeRoute(join(routeDir, '[id]', actionName), '+server.ts', actionRoute);\n  }\n}\n\n/**\n * Check if a custom action should be included in API\n */\nfunction shouldIncludeInApi(actionName: string, apiConfig: any): boolean {\n  if (apiConfig === false) return false;\n  if (apiConfig === true || apiConfig === undefined) return true;\n\n  if (typeof apiConfig === 'object') {\n    if (apiConfig.include) {\n      return apiConfig.include.includes(actionName);\n    }\n    if (apiConfig.exclude) {\n      return !apiConfig.exclude.includes(actionName);\n    }\n  }\n\n  return true;\n}\n\n/**\n * Writes a route file, creating directories as needed\n */\nfunction writeRoute(dir: string, filename: string, content: string): void {\n  try {\n    // Create directory if needed\n    if (!existsSync(dir)) {\n      mkdirSync(dir, { recursive: true });\n    }\n\n    // Write the file (writeFileSync is synchronous and will throw on failure)\n    const filePath = join(dir, filename);\n    writeFileSync(filePath, content, 'utf-8');\n    console.log(`[smrt] Generated: ${filePath}`);\n  } catch (error) {\n    console.error(`[smrt] [ERROR] Failed to write route file:`);\n    console.error(`[smrt] [ERROR]   Directory: ${dir}`);\n    console.error(`[smrt] [ERROR]   Filename: ${filename}`);\n    console.error(`[smrt] [ERROR]   Error:`, error);\n    throw error;\n  }\n}\n\n/**\n * Converts absolute file path to SvelteKit $lib alias import\n * For SvelteKit projects, uses $lib alias for better module resolution\n */\nfunction getSvelteKitImportPath(\n  projectRoot: string,\n  objectFilePath: string | undefined,\n  objectsDir: string,\n  className?: string,\n): string {\n  // Handle undefined filePath by generating a default path\n  // This allows tests to work without providing explicit file paths\n  const filePath =\n    objectFilePath ||\n    join(projectRoot, objectsDir, `${className || 'Object'}.ts`);\n\n  // Convert objectsDir to absolute path if it's relative\n  const absoluteObjectsDir = objectsDir.startsWith('/')\n    ? objectsDir\n    : join(projectRoot, objectsDir);\n\n  // Get the relative path from objectsDir to the file\n  const relativePath = relative(absoluteObjectsDir, filePath);\n\n  // Convert to forward slashes and remove extension\n  const normalizedPath = relativePath.replace(/\\\\/g, '/');\n  const withoutExtension = normalizedPath.replace(/\\.(ts|js|tsx|jsx)$/, '');\n\n  // If objectsDir is under src/lib, use $lib alias\n  if (objectsDir.includes('src/lib')) {\n    const libSubpath = objectsDir.split('src/lib')[1] || '';\n    const fullPath = libSubpath\n      ? `${libSubpath}/${withoutExtension}`\n      : withoutExtension;\n    return `$lib${fullPath}`.replace(/\\/+/g, '/'); // Clean up double slashes\n  }\n\n  // Otherwise use relative path (fallback for non-standard layouts)\n  return withoutExtension.startsWith('.')\n    ? withoutExtension\n    : `./${withoutExtension}`;\n}\n\n/**\n * Generates collection route template (GET list, POST create)\n */\nfunction generateCollectionRouteTemplate(\n  _projectRoot: string,\n  className: string,\n  _objectDef: SmartObjectDefinition,\n  includedActions: string[],\n  _options: SvelteKitOptions,\n): string {\n  const hasGet = includedActions.includes('list');\n  const hasPost = includedActions.includes('create');\n\n  const imports = `// Auto-generated by @smrt/core vite plugin\n// DO NOT EDIT - changes will be overwritten\n\nimport { json } from '@sveltejs/kit';\nimport type { RequestHandler } from './$types';\nimport { getCollection } from '$lib/server/smrt';\n// Note: ${className} is auto-registered by the Vite plugin scanner\n`;\n\n  const getHandler = hasGet\n    ? `\n// List all ${className.toLowerCase()}s\nexport const GET: RequestHandler = async ({ url }) => {\n  const limit = Number(url.searchParams.get('limit')) || 50;\n  const offset = Number(url.searchParams.get('offset')) || 0;\n\n  const collection = await getCollection('${className}');\n  const items = await collection.list({ limit, offset });\n  const count = await collection.count();\n\n  return json({ items, count, limit, offset });\n};\n`\n    : '';\n\n  const postHandler = hasPost\n    ? `\n// Create new ${className.toLowerCase()}\nexport const POST: RequestHandler = async ({ request }) => {\n  const data = await request.json();\n\n  const collection = await getCollection('${className}');\n  const item = await collection.create(data);\n  await item.save();\n\n  return json(item, { status: 201 });\n};\n`\n    : '';\n\n  return imports + getHandler + postHandler;\n}\n\n/**\n * Generates item route template (GET, PUT, DELETE)\n */\nfunction generateItemRouteTemplate(\n  projectRoot: string,\n  className: string,\n  objectDef: SmartObjectDefinition,\n  includedActions: string[],\n  options: SvelteKitOptions,\n): string {\n  const hasGet = includedActions.includes('get');\n  const hasPut = includedActions.includes('update');\n  const hasDelete = includedActions.includes('delete');\n\n  // Calculate import path using $lib alias for SvelteKit\n  const _importPath = getSvelteKitImportPath(\n    projectRoot,\n    objectDef.filePath,\n    options.objectsDir,\n    className,\n  );\n\n  const imports = `// Auto-generated by @smrt/core vite plugin\n// DO NOT EDIT - changes will be overwritten\n\nimport { json, error } from '@sveltejs/kit';\nimport type { RequestHandler} from './$types';\nimport { getCollection } from '$lib/server/smrt';\n// Note: ${className} is auto-registered by the Vite plugin scanner\n`;\n\n  const getHandler = hasGet\n    ? `\n// Get single ${className.toLowerCase()}\nexport const GET: RequestHandler = async ({ params }) => {\n  const collection = await getCollection('${className}');\n  const item = await collection.get(params.id);\n  if (!item) throw error(404, '${className} not found');\n\n  return json(item);\n};\n`\n    : '';\n\n  const putHandler = hasPut\n    ? `\n// Update ${className.toLowerCase()}\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  const collection = await getCollection('${className}');\n  const item = await collection.get(params.id);\n  if (!item) throw error(404, '${className} not found');\n\n  const data = await request.json();\n  Object.assign(item, data);\n  await item.save();\n\n  return json(item);\n};\n`\n    : '';\n\n  const deleteHandler = hasDelete\n    ? `\n// Delete ${className.toLowerCase()}\nexport const DELETE: RequestHandler = async ({ params }) => {\n  const collection = await getCollection('${className}');\n  const item = await collection.get(params.id);\n  if (!item) throw error(404, '${className} not found');\n\n  await item.delete();\n  return json({ success: true });\n};\n`\n    : '';\n\n  return imports + getHandler + putHandler + deleteHandler;\n}\n\n/**\n * Generates custom action route template\n */\nfunction generateActionRouteTemplate(\n  projectRoot: string,\n  className: string,\n  actionName: string,\n  actionDef: any,\n  objectDef: SmartObjectDefinition,\n  options: SvelteKitOptions,\n): string {\n  const paramsList = actionDef.parameters.map((p: any) => p.name).join(', ');\n\n  // Calculate import path using $lib alias for SvelteKit\n  const _importPath = getSvelteKitImportPath(\n    projectRoot,\n    objectDef.filePath,\n    options.objectsDir,\n    className,\n  );\n\n  return `// Auto-generated by @smrt/core vite plugin\n// DO NOT EDIT - changes will be overwritten\n\nimport { json, error } from '@sveltejs/kit';\nimport type { RequestHandler } from './$types';\nimport { getCollection } from '$lib/server/smrt';\n// Note: ${className} is auto-registered by the Vite plugin scanner\n\n// Custom action: ${actionName}\nexport const POST: RequestHandler = async ({ params, request }) => {\n  const collection = await getCollection('${className}');\n  const item = await collection.get(params.id);\n  if (!item) throw error(404, '${className} not found');\n\n  const options = await request.json();\n  const result = await item.${actionName}(${paramsList ? 'options' : ''});\n\n  return json({ action: '${actionName}', result });\n};\n`;\n}\n\n/**\n * Updates .gitignore to exclude auto-generated routes\n */\nfunction updateGitignore(projectRoot: string, options: SvelteKitOptions): void {\n  const gitignorePath = join(projectRoot, '.gitignore');\n\n  // Patterns to add\n  const patternsToAdd = [\n    '# SMRT auto-generated routes (from Vite plugin)',\n    `${options.routesDir}/**/+server.ts`,\n  ];\n\n  // Read existing .gitignore or create empty string\n  let gitignoreContent = '';\n  if (existsSync(gitignorePath)) {\n    gitignoreContent = readFileSync(gitignorePath, 'utf-8');\n  }\n\n  // Check if patterns already exist\n  let needsUpdate = false;\n  const linesToAdd: string[] = [];\n\n  for (const pattern of patternsToAdd) {\n    // Skip if pattern already exists (check for exact match or similar)\n    if (!gitignoreContent.includes(pattern)) {\n      linesToAdd.push(pattern);\n      needsUpdate = true;\n    }\n  }\n\n  if (needsUpdate) {\n    // Ensure file ends with newline before adding\n    if (gitignoreContent.length > 0 && !gitignoreContent.endsWith('\\n')) {\n      gitignoreContent += '\\n';\n    }\n\n    // Add a blank line before our section if file has content\n    if (gitignoreContent.length > 0 && !gitignoreContent.endsWith('\\n\\n')) {\n      gitignoreContent += '\\n';\n    }\n\n    // Add our patterns\n    gitignoreContent += `${linesToAdd.join('\\n')}\\n`;\n\n    writeFileSync(gitignorePath, gitignoreContent, 'utf-8');\n    console.log('[smrt] Updated .gitignore with generated route patterns');\n  }\n}\n","/**\n * Vite plugin for automatic SMRT service generation\n * Provides virtual modules for REST, MCP, and other services\n */\n\nimport { readFileSync } from 'node:fs';\nimport { dirname, join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport type { Plugin, ViteDevServer } from 'vite';\nimport type { SmartObjectManifest } from '../scanner/types';\nimport { generateSvelteKitRoutes } from './sveltekit-generator.js';\n\nexport interface SmrtPluginOptions {\n  /** Glob patterns for SMRT source files */\n  include?: string[];\n  /** Patterns to exclude */\n  exclude?: string[];\n  /** Output directory for generated files */\n  outDir?: string;\n  /** Enable hot module replacement */\n  hmr?: boolean;\n  /** Watch for file changes */\n  watch?: boolean;\n  /** Generate types */\n  generateTypes?: boolean;\n  /** Custom base classes to scan for */\n  baseClasses?: string[];\n  /** Directory to write TypeScript declarations (relative to project root) */\n  typeDeclarationsPath?: string;\n  /** Plugin execution mode - controls Node.js vs browser compatibility */\n  mode?: 'server' | 'client' | 'auto';\n  /** Pre-generated manifest for client mode (avoids file scanning) */\n  staticManifest?: SmartObjectManifest;\n  /** Path to static manifest file for client mode */\n  manifestPath?: string;\n  /** SvelteKit route auto-generation options */\n  svelteKit?: {\n    /** Enable SvelteKit route generation (default: false) */\n    enabled: boolean;\n    /** Output directory for generated routes (default: 'src/routes/api') */\n    routesDir?: string;\n    /** Directory containing SMRT objects (default: 'src/lib/objects') */\n    objectsDir?: string;\n    /** Directory for configuration file (default: 'src/lib/server') */\n    configPath?: string;\n    /** Configuration file name (default: 'smrt.ts') */\n    configFileName?: string;\n  };\n}\n\nconst VIRTUAL_MODULES = {\n  '@smrt/routes': 'smrt:routes',\n  '@smrt/client': 'smrt:client',\n  '@smrt/mcp': 'smrt:mcp',\n  '@smrt/types': 'smrt:types',\n  '@smrt/manifest': 'smrt:manifest',\n  '@smrt/schema': 'smrt:schema',\n  '@smrt/ui': 'smrt:ui',\n  '@smrt/cli': 'smrt:cli',\n};\n\nexport function smrtPlugin(options: SmrtPluginOptions = {}): Plugin {\n  const {\n    include = ['src/**/*.ts', 'src/**/*.js'],\n    exclude = ['**/*.test.ts', '**/*.spec.ts', '**/node_modules/**'],\n    hmr = true,\n    watch = true,\n    generateTypes = true,\n    baseClasses = ['SmrtObject', 'SmartObject'],\n    typeDeclarationsPath = 'src/types',\n    mode = 'auto',\n    manifestPath,\n    svelteKit = {\n      enabled: false,\n      routesDir: 'src/routes/api',\n      objectsDir: 'src/lib/objects',\n      configPath: 'src/lib/server',\n      configFileName: 'smrt.ts',\n    },\n  } = options;\n\n  let server: ViteDevServer | undefined;\n  let manifest: SmartObjectManifest | null = null;\n  let manifestGenerator: any = null; // Will be lazily created in server mode\n  let pluginMode: 'server' | 'client' = 'server';\n\n  return {\n    name: 'smrt-auto-service',\n\n    async configResolved(config) {\n      // Detect plugin mode based on build configuration\n      if (mode === 'auto') {\n        const isSSRBuild = config.build?.ssr;\n        const isFederationBuild = config.plugins.some((p) =>\n          p.name?.includes('federation'),\n        );\n        const isClientBuild =\n          isFederationBuild ||\n          (!isSSRBuild && config.build?.target === 'esnext');\n\n        pluginMode = isClientBuild ? 'client' : 'server';\n      } else {\n        pluginMode = mode;\n      }\n\n      console.log(`[smrt] Running in ${pluginMode} mode`);\n\n      // Scan files and generate initial manifest in all modes\n      manifest = await scanAndGenerateManifest();\n\n      // Generate SvelteKit routes if enabled\n      if (svelteKit.enabled && manifest) {\n        await generateSvelteKitRoutes(config.root, manifest, {\n          enabled: svelteKit.enabled,\n          routesDir: svelteKit.routesDir || 'src/routes/api',\n          objectsDir: svelteKit.objectsDir || 'src/lib/objects',\n          configPath: svelteKit.configPath || 'src/lib/server',\n          configFileName: svelteKit.configFileName || 'smrt.ts',\n        });\n      }\n    },\n\n    async buildStart() {\n      // Rescan files on build start in all modes\n      manifest = await scanAndGenerateManifest();\n    },\n\n    configureServer(devServer) {\n      server = devServer;\n\n      // Serve default HTML when no index.html exists\n      devServer.middlewares.use(async (req, res, next) => {\n        if (req.url === '/' || req.url === '/index.html') {\n          try {\n            const { existsSync } = await import('node:fs');\n            const { join } = await import('node:path');\n\n            const projectRoot = devServer.config.root;\n            const indexPath = join(projectRoot, 'index.html');\n\n            // If index.html exists, let Vite handle it\n            if (existsSync(indexPath)) {\n              return next();\n            }\n\n            // Otherwise, serve default SMRT UI\n            console.log('[smrt] Serving default UI (no index.html found)');\n            let html = getDefaultHTML();\n\n            // Apply Vite's HTML transformation to process module imports\n            html = await devServer.transformIndexHtml('/', html);\n\n            res.setHeader('Content-Type', 'text/html');\n            res.end(html);\n            return;\n          } catch (error) {\n            console.error('[smrt] Error serving default HTML:', error);\n            return next();\n          }\n        }\n        next();\n      });\n\n      // Set up file watching in all modes when enabled\n      if (watch && hmr) {\n        // Watch for file changes\n        const watcher = devServer.watcher;\n\n        watcher.on('change', async (file) => {\n          if (await shouldRescan(file)) {\n            console.log(`[smrt] Rescanning due to change in ${file}`);\n            manifest = await scanAndGenerateManifest();\n\n            // Generate SvelteKit routes if enabled\n            if (svelteKit.enabled && manifest && server) {\n              await generateSvelteKitRoutes(server.config.root, manifest, {\n                enabled: svelteKit.enabled,\n                routesDir: svelteKit.routesDir || 'src/routes/api',\n                objectsDir: svelteKit.objectsDir || 'src/lib/objects',\n                configPath: svelteKit.configPath || 'src/lib/server',\n                configFileName: svelteKit.configFileName || 'smrt.ts',\n              });\n            }\n\n            // Invalidate virtual modules\n            Object.values(VIRTUAL_MODULES).forEach((id) => {\n              const module = server?.moduleGraph.getModuleById(id);\n              if (module) {\n                server?.reloadModule(module);\n              }\n            });\n          }\n        });\n\n        watcher.on('add', async (file) => {\n          if (await shouldRescan(file)) {\n            console.log(`[smrt] Rescanning due to new file ${file}`);\n            manifest = await scanAndGenerateManifest();\n          }\n        });\n      }\n    },\n\n    resolveId(id) {\n      // Resolve virtual module imports\n      if (id in VIRTUAL_MODULES) {\n        return `\\0${VIRTUAL_MODULES[id as keyof typeof VIRTUAL_MODULES]}`;\n      }\n\n      // Resolve virtual index.html for dev UI (only in dev mode)\n      if (id === '/index.html' && server) {\n        return `\\0smrt:index-html`;\n      }\n\n      return null;\n    },\n\n    async load(id) {\n      // Load virtual modules (strip the \\0 prefix)\n      const cleanId = id.startsWith('\\0') ? id.slice(1) : id;\n\n      if (!manifest) {\n        manifest = await scanAndGenerateManifest();\n      }\n\n      switch (cleanId) {\n        case 'smrt:routes':\n          // Routes module available in all modes\n          return await generateRoutesModule(manifest);\n\n        case 'smrt:client':\n          // Client module available in both modes\n          return generateClientModule(manifest);\n\n        case 'smrt:mcp':\n          // MCP module available in all modes\n          return await generateMCPModule(manifest);\n\n        case 'smrt:types':\n          // Types module available in both modes\n          return await generateTypesModule(manifest, pluginMode);\n\n        case 'smrt:manifest':\n          // Manifest module available in both modes\n          return generateManifestModule(manifest);\n\n        case 'smrt:schema':\n          // Schema module available in both modes\n          return await generateSchemaModule(manifest);\n\n        case 'smrt:ui':\n          // UI module for default development interface\n          return await loadDefaultUI();\n\n        case 'smrt:index-html':\n          // Virtual index.html for projects without one\n          return await loadDefaultHTML();\n\n        case 'smrt:cli':\n          // CLI module for command-line interface generation\n          return await generateCLIModule(manifest);\n\n        default:\n          return null;\n      }\n    },\n\n    transformIndexHtml: {\n      order: 'pre',\n      handler: async (html, _ctx) => {\n        // Only provide default HTML if no index.html exists in project\n        if (!server) return html;\n\n        try {\n          const { existsSync } = await import('node:fs');\n          const { join } = await import('node:path');\n\n          const projectRoot = server.config.root;\n          const indexPath = join(projectRoot, 'index.html');\n\n          // If index.html exists, use it as-is\n          if (existsSync(indexPath)) {\n            return html;\n          }\n\n          // Otherwise, provide default SMRT UI\n          return await loadDefaultHTML();\n        } catch (error) {\n          console.error('[smrt] Error checking for index.html:', error);\n          return html;\n        }\n      },\n    },\n  };\n\n  async function _loadStaticManifest(): Promise<SmartObjectManifest | null> {\n    if (!manifestPath) return null;\n\n    try {\n      // Conditionally import fs for Node.js environments\n      const { readFileSync } = await import('node:fs');\n      const manifestContent = readFileSync(manifestPath, 'utf-8');\n      return JSON.parse(manifestContent);\n    } catch (error) {\n      console.warn(\n        `[smrt] Could not load static manifest from ${manifestPath}:`,\n        error,\n      );\n      return null;\n    }\n  }\n\n  function createEmptyManifest(): SmartObjectManifest {\n    return {\n      version: '1.0.0',\n      timestamp: Date.now(),\n      objects: {},\n    };\n  }\n\n  async function scanAndGenerateManifest(): Promise<SmartObjectManifest> {\n    // In production build, try to use static manifest first\n    if (process.env.NODE_ENV === 'production') {\n      try {\n        const { staticManifest } = await import(\n          '../manifest/static-manifest.js'\n        );\n        if (staticManifest && Object.keys(staticManifest.objects).length > 0) {\n          console.log('[smrt] Using pre-generated static manifest');\n          return staticManifest;\n        }\n      } catch (_error) {\n        console.warn(\n          '[smrt] Static manifest not found, falling back to dynamic scanning',\n        );\n      }\n    }\n\n    // Development mode or fallback: use dynamic scanning\n    try {\n      // Conditionally import Node.js dependencies\n      const [{ default: fg }, { ASTScanner, ManifestGenerator }] =\n        await Promise.all([import('fast-glob'), import('../scanner/index.js')]);\n\n      // Create manifest generator if not already created\n      if (!manifestGenerator) {\n        manifestGenerator = new ManifestGenerator();\n      }\n\n      // Find all TypeScript files matching patterns\n      const sourceFiles = fg.sync(include, {\n        ignore: exclude,\n        absolute: true,\n      });\n\n      if (sourceFiles.length === 0) {\n        console.warn('[smrt] No source files found matching patterns');\n        return createEmptyManifest();\n      }\n\n      // Scan files with AST scanner\n      const scanner = new ASTScanner(sourceFiles, {\n        baseClasses,\n        includePrivateMethods: false,\n        includeStaticMethods: true,\n        followImports: false,\n      });\n\n      const scanResults = scanner.scanFiles();\n      const newManifest = manifestGenerator.generateManifest(scanResults);\n\n      // Log scan results\n      const objectCount = Object.keys(newManifest.objects).length;\n      if (objectCount > 0) {\n        const names = Object.keys(newManifest.objects).join(', ');\n        console.log(`[smrt] Found ${objectCount} SMRT objects: ${names}`);\n      } else {\n        console.log('[smrt] No SMRT objects found');\n      }\n\n      // Generate TypeScript declarations if enabled\n      if (generateTypes && server) {\n        await generateTypeDeclarationFile(\n          newManifest,\n          server.config.root,\n          typeDeclarationsPath,\n        );\n      }\n\n      return newManifest;\n    } catch (error) {\n      console.error('[smrt] Error scanning files:', error);\n      return createEmptyManifest();\n    }\n  }\n\n  async function shouldRescan(file: string): Promise<boolean> {\n    // Only rescan in server mode\n    if (pluginMode === 'client') {\n      return false;\n    }\n\n    try {\n      // Conditionally import minimatch\n      const { minimatch } = await import('minimatch');\n\n      const isIncluded = include.some((pattern) => minimatch(file, pattern));\n      const isExcluded = exclude.some((pattern) => minimatch(file, pattern));\n\n      return isIncluded && !isExcluded;\n    } catch (error) {\n      console.warn('[smrt] Error checking file patterns:', error);\n      return false;\n    }\n  }\n}\n\n/**\n * Generate virtual routes module\n */\nasync function generateRoutesModule(\n  manifest: SmartObjectManifest,\n): Promise<string> {\n  try {\n    const { ManifestGenerator } = await import('../scanner/index.js');\n    const generator = new ManifestGenerator();\n    const routes = generator.generateRestEndpoints(manifest);\n\n    return `\n// Auto-generated REST routes from SMRT objects\n// This file is generated automatically - do not edit\n\nexport function setupRoutes(app) {\n${routes}\n}\n\nexport { setupRoutes as default };\n`;\n  } catch (error) {\n    console.warn('[smrt] Error generating routes module:', error);\n    return 'export function setupRoutes() { console.warn(\"Routes generation failed\"); }';\n  }\n}\n\n/**\n * Generate virtual client module\n */\nfunction generateClientModule(manifest: SmartObjectManifest): string {\n  const objects = Object.entries(manifest.objects);\n\n  const clientMethods = objects\n    .map(([name, obj]) => {\n      const { collection } = obj;\n      return `\n  ${name}: {\n    list: (params) => fetch(basePath + '/${collection}', { \n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(r => r.json()),\n    \n    get: (id) => fetch(basePath + '/${collection}/' + id, {\n      method: 'GET', \n      headers: { 'Content-Type': 'application/json' }\n    }).then(r => r.json()),\n    \n    create: (data) => fetch(basePath + '/${collection}', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    }).then(r => r.json()),\n    \n    update: (id, data) => fetch(basePath + '/${collection}/' + id, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    }).then(r => r.json()),\n    \n    delete: (id) => fetch(basePath + '/${collection}/' + id, {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(r => r.ok)\n  }`;\n    })\n    .join(',');\n\n  return `\n// Auto-generated API client from SMRT objects\n// This file is generated automatically - do not edit\n\nexport function createClient(basePath = '/api/v1') {\n  return {${clientMethods}\n  };\n}\n\nexport { createClient as default };\n`;\n}\n\n/**\n * Generate virtual MCP module\n */\nasync function generateMCPModule(\n  manifest: SmartObjectManifest,\n): Promise<string> {\n  try {\n    const { ManifestGenerator } = await import('../scanner/index.js');\n    const generator = new ManifestGenerator();\n    const tools = generator.generateMCPTools(manifest);\n\n    return `\n// Auto-generated MCP tools from SMRT objects  \n// This file is generated automatically - do not edit\n\nexport const tools = ${tools};\n\nexport function createMCPServer() {\n  return {\n    name: 'smrt-auto-generated',\n    version: '1.0.0',\n    tools\n  };\n}\n\nexport { createMCPServer as default };\n`;\n  } catch (error) {\n    console.warn('[smrt] Error generating MCP module:', error);\n    return 'export const tools = []; export function createMCPServer() { console.warn(\"MCP generation failed\"); return { name: \"smrt-client\", version: \"1.0.0\", tools: [] }; }';\n  }\n}\n\n/**\n * Generate client-mode types without server dependencies\n */\nfunction generateClientModeTypes(manifest: SmartObjectManifest): string {\n  const typeDefinitions: string[] = [];\n\n  // Generate interfaces for each object in the manifest\n  for (const [objectName, objectMeta] of Object.entries(manifest.objects)) {\n    const fields = objectMeta.fields || {};\n    const propertyLines: string[] = [];\n\n    for (const [fieldName, fieldDef] of Object.entries(fields)) {\n      let type = 'any';\n\n      // Map SMRT field types to TypeScript types\n      switch (fieldDef.type) {\n        case 'text':\n          type = 'string';\n          break;\n        case 'decimal':\n        case 'integer':\n          type = 'number';\n          break;\n        case 'boolean':\n          type = 'boolean';\n          break;\n        case 'datetime':\n          type = 'string';\n          break;\n        case 'json':\n          type = 'any';\n          break;\n        case 'foreignKey':\n          type = 'string';\n          break;\n        default:\n          type = 'any';\n      }\n\n      const optional = !fieldDef.required ? '?' : '';\n      propertyLines.push(`  ${fieldName}${optional}: ${type};`);\n    }\n\n    // Add common SmrtObject properties\n    propertyLines.unshift(\n      '  id?: string;',\n      '  created_at?: string;',\n      '  updated_at?: string;',\n    );\n\n    const interfaceDef = `export interface ${objectName}Data {\\n${propertyLines.join('\\n')}\\n}`;\n    typeDefinitions.push(interfaceDef);\n  }\n\n  return typeDefinitions.join('\\n\\n');\n}\n\n/**\n * Generate virtual types module\n */\nasync function generateTypesModule(\n  manifest: SmartObjectManifest,\n  mode: 'server' | 'client' = 'server',\n): Promise<string> {\n  let interfaces = '';\n\n  try {\n    // Only use scanner in server mode to avoid Node.js dependencies in browser builds\n    if (mode !== 'client') {\n      const { ManifestGenerator } = await import('../scanner/index.js');\n      const generator = new ManifestGenerator();\n      interfaces = generator.generateTypeDefinitions(manifest);\n    } else {\n      // In client mode, generate basic interfaces directly from manifest\n      interfaces = generateClientModeTypes(manifest);\n    }\n\n    return `\n// Auto-generated TypeScript types from SMRT objects\n// This file is generated automatically - do not edit\n\n${interfaces}\n\nexport interface Request {\n  params: Record<string, string>;\n  query: Record<string, any>;\n  json(): Promise<any>;\n}\n\nexport interface Response {\n  json(data: any, init?: { status?: number }): Response;\n  status(code: number): Response;\n}\n`;\n  } catch (error) {\n    console.warn('[smrt] Error generating types module:', error);\n    return `\n// Auto-generated TypeScript types from SMRT objects (fallback)\n// This file is generated automatically - do not edit\n\nexport interface Request {\n  params: Record<string, string>;\n  query: Record<string, any>;\n  json(): Promise<any>;\n}\n\nexport interface Response {\n  json(data: any, init?: { status?: number }): Response;\n  status(code: number): Response;\n}\n`;\n  }\n}\n\n/**\n * Generate virtual manifest module\n */\nfunction generateManifestModule(manifest: SmartObjectManifest): string {\n  return `\n// Auto-generated manifest from SMRT objects\n// This file is generated automatically - do not edit\n\nexport const manifest = ${JSON.stringify(manifest, null, 2)};\n\nexport { manifest as default };\n`;\n}\n\n/**\n * Generate TypeScript declaration file for virtual modules\n * This eliminates the need for manual type maintenance\n */\nasync function generateTypeDeclarationFile(\n  manifest: SmartObjectManifest,\n  projectRoot: string,\n  typeDeclarationsPath: string,\n): Promise<void> {\n  try {\n    // Conditionally import path and fs modules\n    const [{ join }, { existsSync, mkdirSync, writeFileSync }] =\n      await Promise.all([import('node:path'), import('node:fs')]);\n\n    const declarationsDir = join(projectRoot, typeDeclarationsPath);\n    const declarationsFile = join(declarationsDir, 'virtual-modules.d.ts');\n\n    // Create directory if it doesn't exist\n    if (!existsSync(declarationsDir)) {\n      mkdirSync(declarationsDir, { recursive: true });\n    }\n\n    // Generate interface definitions for each discovered SMRT object\n    const objectInterfaces = Object.entries(manifest.objects)\n      .map(([_name, obj]) => {\n        const interfaceName = `${obj.className}Data`;\n        const fields = Object.entries(obj.fields)\n          .map(([fieldName, field]) => {\n            const optional = field.required === false ? '?' : '';\n            const type = mapTypeScriptType(field.type);\n            return `    ${fieldName}${optional}: ${type};`;\n          })\n          .join('\\n');\n\n        return `  export interface ${interfaceName} {\n    id?: string;\n${fields}\n    createdAt?: string;\n    updatedAt?: string;\n  }`;\n      })\n      .join('\\n\\n');\n\n    // Generate CRUD operations interface for each collection\n    const collectionNames = [\n      ...new Set(Object.values(manifest.objects).map((obj) => obj.collection)),\n    ];\n    const apiClientInterface = collectionNames\n      .map((collection) => {\n        const dataType = Object.entries(manifest.objects).find(\n          ([, obj]) => obj.collection === collection,\n        )?.[1].className;\n        const interfaceName = dataType ? `${dataType}Data` : 'any';\n        return `    ${collection}: CrudOperations<${interfaceName}>;`;\n      })\n      .join('\\n');\n\n    // Generate MCP tool interfaces based on discovered methods\n    const _mcpTools = Object.entries(manifest.objects).flatMap(([_name, obj]) =>\n      Object.entries(obj.methods).map(([methodName, method]) => ({\n        name: `${methodName}_${obj.collection}`,\n        description: `${method.name} operation on ${obj.collection}`,\n        inputSchema: {\n          type: 'object',\n          properties: Object.fromEntries(\n            method.parameters.map((param) => [\n              param.name,\n              { type: mapJsonSchemaType(param.type) },\n            ]),\n          ),\n          required: method.parameters\n            .filter((p) => p.optional !== true)\n            .map((p) => p.name),\n        },\n      })),\n    );\n\n    const typeDeclarations = `/**\n * Auto-generated TypeScript declarations for SMRT virtual modules\n * Generated from discovered @smrt() decorated classes\n * \n * DO NOT EDIT THIS FILE MANUALLY\n * This file is automatically regenerated when SMRT objects change\n */\n\n// Manifest module - Contains discovered SMRT objects metadata\ndeclare module '@smrt/manifest' {\n  export interface SmrtObjectField {\n    type: string;\n    required?: boolean;\n    default?: any;\n  }\n\n  export interface SmrtObjectMethod {\n    name: string;\n    parameters: Array<{\n      name: string;\n      type: string;\n      required?: boolean;\n    }>;\n    returnType: string;\n    isAsync: boolean;\n  }\n\n  export interface SmrtObjectDefinition {\n    className: string;\n    collection: string;\n    fields: Record<string, SmrtObjectField>;\n    methods: Record<string, SmrtObjectMethod>;\n    decoratorConfig: any;\n  }\n\n  export interface SmrtManifest {\n    version: string;\n    timestamp: number;\n    objects: Record<string, SmrtObjectDefinition>;\n  }\n\n  export const manifest: SmrtManifest;\n}\n\n// Routes module - Auto-generated REST route setup\ndeclare module '@smrt/routes' {\n  export interface RouteApp {\n    get(path: string, handler: (req: any, res: any) => void): void;\n    post(path: string, handler: (req: any, res: any) => void): void;\n    put(path: string, handler: (req: any, res: any) => void): void;\n    delete(path: string, handler: (req: any, res: any) => void): void;\n  }\n\n  export function setupRoutes(app: RouteApp): void;\n  export default setupRoutes;\n}\n\n// Client module - Auto-generated API client  \ndeclare module '@smrt/client' {\n  export interface ApiResponse<T = any> {\n    id?: string;\n    data?: T;\n    error?: string;\n    message?: string;\n  }\n\n  export interface CrudOperations<T = any> {\n    list(params?: Record<string, any>): Promise<ApiResponse<T[]>>;\n    get(id: string): Promise<ApiResponse<T>>;\n    create(data: Partial<T>): Promise<ApiResponse<T>>;\n    update(id: string, data: Partial<T>): Promise<ApiResponse<T>>;\n    delete(id: string): Promise<boolean>;\n  }\n\n  export interface ApiClient {\n${apiClientInterface}\n  }\n\n  export function createClient(basePath?: string): ApiClient;\n  export default createClient;\n}\n\n// MCP module - Auto-generated Model Context Protocol tools\ndeclare module '@smrt/mcp' {\n  export interface McpTool {\n    name: string;\n    description: string;\n    inputSchema: {\n      type: string;\n      properties: Record<string, any>;\n      required?: string[];\n    };\n  }\n\n  export const tools: McpTool[];\n  export function createMCPServer(): { name: string; version: string; tools: McpTool[] };\n  export default tools;\n}\n\n// Types module - Auto-generated TypeScript interfaces\ndeclare module '@smrt/types' {\n  export const types: string;\n\n  // Auto-generated interfaces for discovered SMRT objects\n${objectInterfaces}\n\n  export default types;\n}\n\n// CLI module - Auto-generated command-line interface\ndeclare module '@smrt/cli' {\n  export interface CLIConfig {\n    name?: string;\n    version?: string;\n    description?: string;\n    prompt?: boolean;\n    colors?: boolean;\n  }\n\n  export interface CLIContext {\n    db?: any;\n    ai?: any;\n    user?: {\n      id: string;\n      roles?: string[];\n    };\n  }\n\n  export interface CLICommandMap {\n    [objectName: string]: {\n      collection: string;\n      commands: string[];\n    };\n  }\n\n  export const cliCommands: CLICommandMap;\n\n  export function setupCLI(config?: CLIConfig, context?: CLIContext): {\n    run: (argv: string[]) => Promise<void>;\n    generator: any;\n  };\n\n  export function getCLIHandler(config?: CLIConfig, context?: CLIContext): (argv: string[]) => Promise<void>;\n\n  export default setupCLI;\n}`;\n\n    // Write the declarations file\n    writeFileSync(declarationsFile, typeDeclarations);\n    console.log(\n      `[smrt] Generated TypeScript declarations: ${declarationsFile}`,\n    );\n  } catch (error) {\n    console.error('[smrt] Error generating TypeScript declarations:', error);\n  }\n}\n\n/**\n * Map SMRT field types to TypeScript types\n */\nfunction mapTypeScriptType(smrtType: string): string {\n  const typeMap: Record<string, string> = {\n    string: 'string',\n    number: 'number',\n    boolean: 'boolean',\n    array: 'any[]',\n    object: 'Record<string, any>',\n    date: 'string',\n    Date: 'string',\n  };\n  return typeMap[smrtType] || 'any';\n}\n\n/**\n * Map TypeScript types to JSON Schema types for MCP tools\n */\nfunction mapJsonSchemaType(tsType: string): string {\n  const typeMap: Record<string, string> = {\n    string: 'string',\n    number: 'number',\n    boolean: 'boolean',\n    array: 'array',\n    object: 'object',\n    any: 'string',\n  };\n  return typeMap[tsType] || 'string';\n}\n\n/**\n * Get default HTML template with inlined JavaScript (inlined for distribution)\n */\nfunction getDefaultHTML(): string {\n  const uiScript = getDefaultUIModule();\n\n  // Build HTML without template literals to avoid escaping issues\n  return (\n    '<!DOCTYPE html>\\n' +\n    '<html lang=\"en\">\\n' +\n    '<head>\\n' +\n    '  <meta charset=\"UTF-8\">\\n' +\n    '  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n' +\n    '  <title>SMRT Development UI</title>\\n' +\n    '  <style>\\n' +\n    '    * { margin: 0; padding: 0; box-sizing: border-box; }\\n' +\n    '    body {\\n' +\n    '      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\\n' +\n    '      background: #f5f5f5;\\n' +\n    '      color: #333;\\n' +\n    '    }\\n' +\n    '    .container { max-width: 1200px; margin: 0 auto; padding: 20px; }\\n' +\n    '    header {\\n' +\n    '      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\\n' +\n    '      color: white;\\n' +\n    '      padding: 40px 0;\\n' +\n    '      margin-bottom: 40px;\\n' +\n    '      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\\n' +\n    '    }\\n' +\n    '    header h1 { font-size: 2.5em; font-weight: 700; margin-bottom: 10px; }\\n' +\n    '    .subtitle { font-size: 1.1em; opacity: 0.9; }\\n' +\n    '    .stats {\\n' +\n    '      display: grid;\\n' +\n    '      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\n' +\n    '      gap: 20px;\\n' +\n    '      margin-bottom: 40px;\\n' +\n    '    }\\n' +\n    '    .stat-card {\\n' +\n    '      background: white;\\n' +\n    '      padding: 20px;\\n' +\n    '      border-radius: 8px;\\n' +\n    '      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\\n' +\n    '      text-align: center;\\n' +\n    '    }\\n' +\n    '    .stat-value { font-size: 2.5em; font-weight: 700; color: #667eea; margin-bottom: 5px; }\\n' +\n    '    .stat-label { font-size: 0.9em; color: #666; text-transform: uppercase; letter-spacing: 1px; }\\n' +\n    '    .collections { display: grid; gap: 30px; }\\n' +\n    '    .collection-card {\\n' +\n    '      background: white;\\n' +\n    '      border-radius: 8px;\\n' +\n    '      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\\n' +\n    '      overflow: hidden;\\n' +\n    '    }\\n' +\n    '    .collection-header {\\n' +\n    '      background: #667eea;\\n' +\n    '      color: white;\\n' +\n    '      padding: 15px 20px;\\n' +\n    '      display: flex;\\n' +\n    '      justify-content: space-between;\\n' +\n    '      align-items: center;\\n' +\n    '    }\\n' +\n    '    .collection-title { font-size: 1.3em; font-weight: 600; }\\n' +\n    '    .collection-count {\\n' +\n    '      background: rgba(255,255,255,0.2);\\n' +\n    '      padding: 5px 15px;\\n' +\n    '      border-radius: 20px;\\n' +\n    '      font-size: 0.9em;\\n' +\n    '    }\\n' +\n    '    .collection-body { padding: 20px; }\\n' +\n    '    .field-list {\\n' +\n    '      display: grid;\\n' +\n    '      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\\n' +\n    '      gap: 15px;\\n' +\n    '      margin-bottom: 20px;\\n' +\n    '    }\\n' +\n    '    .field {\\n' +\n    '      padding: 10px;\\n' +\n    '      background: #f8f9fa;\\n' +\n    '      border-radius: 4px;\\n' +\n    '      border-left: 3px solid #667eea;\\n' +\n    '    }\\n' +\n    '    .field-name { font-weight: 600; color: #333; margin-bottom: 3px; }\\n' +\n    '    .field-type { font-size: 0.85em; color: #666; }\\n' +\n    '    .actions { display: flex; gap: 10px; flex-wrap: wrap; }\\n' +\n    '    .btn {\\n' +\n    '      padding: 10px 20px;\\n' +\n    '      border: none;\\n' +\n    '      border-radius: 4px;\\n' +\n    '      font-size: 0.9em;\\n' +\n    '      cursor: pointer;\\n' +\n    '      transition: all 0.2s;\\n' +\n    '      text-decoration: none;\\n' +\n    '      display: inline-block;\\n' +\n    '    }\\n' +\n    '    .btn-primary { background: #667eea; color: white; }\\n' +\n    '    .btn-primary:hover { background: #5568d3; transform: translateY(-1px); }\\n' +\n    '    .btn-secondary { background: #e0e0e0; color: #333; }\\n' +\n    '    .btn-secondary:hover { background: #d0d0d0; }\\n' +\n    '    .loading { text-align: center; padding: 40px; color: #666; }\\n' +\n    '    .error {\\n' +\n    '      background: #fee;\\n' +\n    '      border: 1px solid #fcc;\\n' +\n    '      color: #c33;\\n' +\n    '      padding: 15px;\\n' +\n    '      border-radius: 4px;\\n' +\n    '      margin-bottom: 20px;\\n' +\n    '    }\\n' +\n    '    .empty-state { text-align: center; padding: 60px 20px; color: #999; }\\n' +\n    '    .empty-state svg { width: 100px; height: 100px; margin-bottom: 20px; opacity: 0.3; }\\n' +\n    '  </style>\\n' +\n    '</head>\\n' +\n    '<body>\\n' +\n    '  <div id=\"app\">\\n' +\n    '    <div class=\"loading\">Loading SMRT UI...</div>\\n' +\n    '  </div>\\n' +\n    '  <script type=\"module\">\\n' +\n    uiScript +\n    '\\n  </script>\\n' +\n    '</body>\\n' +\n    '</html>'\n  );\n}\n\n/**\n * Get default UI module from template file\n * Loads the JavaScript template\n */\nfunction getDefaultUIModule(): string {\n  try {\n    // Get current file directory\n    const __dirname = dirname(fileURLToPath(import.meta.url));\n\n    // Load template file (works in both src and dist)\n    const templatePath = join(__dirname, 'templates/default-ui.js');\n\n    return readFileSync(templatePath, 'utf-8').trim();\n  } catch (error) {\n    console.error('[smrt] Error loading UI template:', error);\n    // Fallback to minimal UI\n    return `\nasync function createUI() {\n  const app = document.getElementById('app');\n  if (!app) return;\n  app.innerHTML = '<div class=\"container\" style=\"padding:40px;text-align:center;\"><h1>🎯 SMRT Development UI</h1><p>Template file not found. UI code could not be loaded.</p></div>';\n}\ncreateUI();\n`;\n  }\n}\n\n/**\n * Load default HTML template for projects without index.html\n */\nasync function loadDefaultHTML(): Promise<string> {\n  return getDefaultHTML();\n}\n\n/**\n * Load default UI module\n */\nasync function loadDefaultUI(): Promise<string> {\n  return getDefaultUIModule();\n}\n\n/**\n * Generate virtual CLI module\n */\nasync function generateCLIModule(\n  manifest: SmartObjectManifest,\n): Promise<string> {\n  try {\n    // Import CLI types\n    const commands: string[] = [];\n    const objectImports: string[] = [];\n\n    // Generate CLI setup code for each object\n    for (const [className, objectDef] of Object.entries(manifest.objects)) {\n      const config = objectDef.decoratorConfig;\n      const cliConfig = config?.cli;\n\n      // Skip if CLI is disabled\n      if (cliConfig === false) continue;\n\n      // Determine which operations to include\n      const excluded =\n        (typeof cliConfig === 'object' ? cliConfig.exclude : []) || [];\n      const included = typeof cliConfig === 'object' ? cliConfig.include : null;\n\n      const shouldInclude = (command: string) => {\n        if (included && !included.includes(command)) return false;\n        if (excluded.includes(command)) return false;\n        return true;\n      };\n\n      // Get collection name\n      const collectionName = objectDef.collection;\n\n      // Generate import statement for the object class\n      objectImports.push(\n        `// Import ${className} and ${className}Collection for CLI operations`,\n      );\n\n      // Generate command registration\n      const availableCommands: string[] = [];\n\n      // Standard CRUD commands\n      if (shouldInclude('list'))\n        availableCommands.push(`'${collectionName}:list'`);\n      if (shouldInclude('get'))\n        availableCommands.push(`'${collectionName}:get'`);\n      if (shouldInclude('create'))\n        availableCommands.push(`'${collectionName}:create'`);\n      if (shouldInclude('update'))\n        availableCommands.push(`'${collectionName}:update'`);\n      if (shouldInclude('delete'))\n        availableCommands.push(`'${collectionName}:delete'`);\n\n      // Custom action methods\n      for (const [methodName, _method] of Object.entries(objectDef.methods)) {\n        // Skip private methods and standard CRUD\n        if (\n          methodName.startsWith('_') ||\n          ['list', 'get', 'create', 'update', 'delete', 'save'].includes(\n            methodName,\n          )\n        )\n          continue;\n\n        if (shouldInclude(methodName)) {\n          availableCommands.push(`'${collectionName}:${methodName}'`);\n        }\n      }\n\n      if (availableCommands.length > 0) {\n        commands.push(`\n  // ${className} commands\n  ${className}: {\n    collection: '${collectionName}',\n    commands: [${availableCommands.join(', ')}]\n  }`);\n      }\n    }\n\n    return `\n// Auto-generated CLI module from SMRT objects\n// This file is generated automatically - do not edit\n\nimport { CLIGenerator } from '@smrt/core/generators/cli';\n\n/**\n * @typedef {import('@smrt/core/generators/cli').CLIConfig} CLIConfig\n * @typedef {import('@smrt/core/generators/cli').CLIContext} CLIContext\n */\n\n${objectImports.join('\\n')}\n\n/**\n * Available CLI commands by object\n */\nexport const cliCommands = {${commands.join(',\\n')}\n};\n\n/**\n * Setup CLI with auto-generated commands\n *\n * @param {CLIConfig} [config={}] - CLI configuration\n * @param {CLIContext} [context={}] - CLI context\n * @returns {{run: function(string[]): Promise<void>, generator: *}}\n *\n * @example\n * import { setupCLI } from '@smrt/cli';\n *\n * const cli = setupCLI({\n *   name: 'my-app',\n *   version: '1.0.0'\n * });\n *\n * cli.run(process.argv);\n */\nexport function setupCLI(config = {}, context = {}) {\n  const generator = new CLIGenerator(config, context);\n  return {\n    run: async (argv) => {\n      const handler = generator.generateHandler();\n      await handler(argv.slice(2)); // Remove 'node' and script name\n    },\n    generator\n  };\n}\n\n/**\n * Get CLI handler directly\n *\n * @param {CLIConfig} [config={}] - CLI configuration\n * @param {CLIContext} [context={}] - CLI context\n * @returns {function(string[]): Promise<void>}\n */\nexport function getCLIHandler(config = {}, context = {}) {\n  const generator = new CLIGenerator(config, context);\n  return generator.generateHandler();\n}\n\nexport default setupCLI;\n`;\n  } catch (error) {\n    console.warn('[smrt] Error generating CLI module:', error);\n    return `\n// Error generating CLI module\nexport const cliCommands = {};\nexport function setupCLI() {\n  console.warn(\"CLI generation failed\");\n  return { run: async () => {} };\n}\nexport function getCLIHandler() {\n  return async () => console.warn(\"CLI generation failed\");\n}\nexport default setupCLI;\n`;\n  }\n}\n\n/**\n * Generate virtual schema module with JSON manifests\n */\nasync function generateSchemaModule(\n  manifest: SmartObjectManifest,\n): Promise<string> {\n  try {\n    const { SchemaGenerator } = await import('../schema/index.js');\n\n    const schemaGenerator = new SchemaGenerator();\n    const schemas: Record<string, any> = {};\n\n    // Generate schemas for all SMRT objects\n    for (const [className, objectDef] of Object.entries(manifest.objects)) {\n      const schema = schemaGenerator.generateSchema(objectDef);\n      schemas[className] = schema;\n    }\n\n    // Create JSON manifest for schemas\n    const schemaManifest = {\n      version: '1.0.0',\n      timestamp: Date.now(),\n      packageName: manifest.packageName || 'unknown',\n      schemas: schemas,\n      dependencies: Array.from(\n        new Set(\n          Object.values(schemas).flatMap((s: any) => s.dependencies || []),\n        ),\n      ),\n    };\n\n    return `// Auto-generated schema manifest from SMRT objects\n// This file is generated automatically - do not edit\n\n// Schema manifest as JSON for SQL adapters\nexport const schemaManifest = ${JSON.stringify(schemaManifest, null, 2)};\n\n// Schema registry for runtime access\nexport const schemas = schemaManifest.schemas;\n\n// Schema lookup function\nexport function getSchema(className: string) {\n  return schemas[className];\n}\n\n// All schemas as array for dependency resolution\nexport const allSchemas = Object.values(schemas);\n\n// Package information\nexport const packageName = schemaManifest.packageName;\nexport const dependencies = schemaManifest.dependencies;\n\nexport default schemaManifest;`;\n  } catch (error) {\n    console.error('[smrt] Error generating schema module:', error);\n    return `// Error generating schema module\nexport const schemaManifest = { schemas: {}, dependencies: [] };\nexport const schemas = {};\nexport function getSchema() { return null; }\nexport const allSchemas = [];\nexport default {};`;\n  }\n}\n"],"names":["existsSync","join","mkdirSync","writeFileSync"],"mappings":"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"}