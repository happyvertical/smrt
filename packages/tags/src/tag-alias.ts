/**
 * TagAlias model - Alternative names and translations for tags
 *
 * Stores aliases, variations, and multi-language translations for tags.
 * Supports language-neutral aliases and context-scoped variations.
 */

import { SmrtObject, type SmrtObjectOptions, smrt } from '@have/smrt';
import type { TagAliasOptions } from './types';
import type { Tag } from './tag';

@smrt({
  api: { include: ['list', 'get', 'create', 'update', 'delete'] },
  mcp: { include: ['list', 'get', 'create'] },
  cli: true,
})
export class TagAlias extends SmrtObject {
  // id: UUID (auto-generated by SmrtObject)
  tagSlug = ''; // FK to Tag.slug
  alias = ''; // Alternative name or translation
  language = ''; // ISO 639-1 language code (nullable)
  protected _context = ''; // Optional context scoping (nullable)

  // Override SmrtObject accessor
  override get context(): string {
    return this._context;
  }
  override set context(value: string) {
    this._context = value;
  }

  // Timestamps
  createdAt = new Date();

  constructor(options: TagAliasOptions = {}) {
    super(options);
    if (options.tagSlug) this.tagSlug = options.tagSlug;
    if (options.alias) this.alias = options.alias;
    if (options.language !== undefined) this.language = options.language;
    if (options.context !== undefined) this._context = options.context;
  }

  /**
   * Get the tag this alias belongs to
   *
   * @returns Tag instance or null if not found
   */
  async getTag(): Promise<Tag | null> {
    const { TagCollection } = await import('./tags');
    const collection = await TagCollection.create(this.options);

    return await collection.get({ slug: this.tagSlug });
  }

  /**
   * Search tags by alias
   *
   * @param alias - The alias to search for
   * @param language - Optional language filter
   * @returns Array of matching tags
   */
  static async searchByAlias(alias: string, language?: string): Promise<Tag[]> {
    // Will be auto-implemented by SMRT
    return [];
  }

  /**
   * Get all aliases for a tag
   *
   * @param tagSlug - The tag slug to get aliases for
   * @returns Array of TagAlias instances
   */
  static async getAliasesForTag(tagSlug: string): Promise<TagAlias[]> {
    // Will be auto-implemented by SMRT
    return [];
  }
}
