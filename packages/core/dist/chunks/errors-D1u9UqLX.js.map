{"version":3,"file":"errors-D1u9UqLX.js","sources":["../../src/errors.ts"],"sourcesContent":["/**\n * Comprehensive error handling system for SMRT framework\n *\n * Provides specialized error types for different failure scenarios\n * with proper error codes, messages, and debugging information.\n */\n\n/**\n * Base error class for all SMRT framework errors\n */\nexport abstract class SmrtError extends Error {\n  public readonly code: string;\n  public readonly category:\n    | 'database'\n    | 'ai'\n    | 'filesystem'\n    | 'validation'\n    | 'network'\n    | 'configuration'\n    | 'runtime';\n  public readonly details?: Record<string, any>;\n  public readonly cause?: Error;\n\n  constructor(\n    message: string,\n    code: string,\n    category: SmrtError['category'],\n    details?: Record<string, any>,\n    cause?: Error,\n  ) {\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.category = category;\n    this.details = details;\n    this.cause = cause;\n\n    // Maintain proper stack trace for V8\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  /**\n   * Converts error to a serializable object for logging/debugging\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      category: this.category,\n      details: this.details,\n      stack: this.stack,\n      cause: this.cause\n        ? {\n            name: this.cause.name,\n            message: this.cause.message,\n            stack: this.cause.stack,\n          }\n        : undefined,\n    };\n  }\n}\n\n/**\n * Database-related errors\n */\nexport class DatabaseError extends SmrtError {\n  constructor(\n    message: string,\n    code: string,\n    details?: Record<string, any>,\n    cause?: Error,\n  ) {\n    super(message, code, 'database', details, cause);\n  }\n\n  static connectionFailed(dbUrl: string, cause?: Error): DatabaseError {\n    return new DatabaseError(\n      `Failed to connect to database: ${dbUrl}`,\n      'DB_CONNECTION_FAILED',\n      { dbUrl },\n      cause,\n    );\n  }\n\n  static queryFailed(query: string, cause?: Error): DatabaseError {\n    return new DatabaseError(\n      `Database query failed: ${query.substring(0, 100)}${query.length > 100 ? '...' : ''}`,\n      'DB_QUERY_FAILED',\n      { query },\n      cause,\n    );\n  }\n\n  static schemaError(\n    tableName: string,\n    operation: string,\n    cause?: Error,\n  ): DatabaseError {\n    return new DatabaseError(\n      `Schema operation failed for table '${tableName}': ${operation}`,\n      'DB_SCHEMA_ERROR',\n      { tableName, operation },\n      cause,\n    );\n  }\n\n  static constraintViolation(\n    constraint: string,\n    value: any,\n    cause?: Error,\n  ): DatabaseError {\n    return new DatabaseError(\n      `Database constraint violation: ${constraint}`,\n      'DB_CONSTRAINT_VIOLATION',\n      { constraint, value },\n      cause,\n    );\n  }\n}\n\n/**\n * AI integration errors\n */\nexport class AIError extends SmrtError {\n  constructor(\n    message: string,\n    code: string,\n    details?: Record<string, any>,\n    cause?: Error,\n  ) {\n    super(message, code, 'ai', details, cause);\n  }\n\n  static providerError(\n    provider: string,\n    operation: string,\n    cause?: Error,\n  ): AIError {\n    return new AIError(\n      `AI provider '${provider}' failed during ${operation}`,\n      'AI_PROVIDER_ERROR',\n      { provider, operation },\n      cause,\n    );\n  }\n\n  static rateLimitExceeded(provider: string, retryAfter?: number): AIError {\n    return new AIError(\n      `AI provider '${provider}' rate limit exceeded`,\n      'AI_RATE_LIMIT',\n      { provider, retryAfter },\n    );\n  }\n\n  static invalidResponse(provider: string, response: any): AIError {\n    return new AIError(\n      `AI provider '${provider}' returned invalid response`,\n      'AI_INVALID_RESPONSE',\n      { provider, response },\n    );\n  }\n\n  static authenticationFailed(provider: string): AIError {\n    return new AIError(\n      `AI provider '${provider}' authentication failed`,\n      'AI_AUTH_FAILED',\n      { provider },\n    );\n  }\n}\n\n/**\n * Filesystem operation errors\n */\nexport class FilesystemError extends SmrtError {\n  constructor(\n    message: string,\n    code: string,\n    details?: Record<string, any>,\n    cause?: Error,\n  ) {\n    super(message, code, 'filesystem', details, cause);\n  }\n\n  static fileNotFound(path: string): FilesystemError {\n    return new FilesystemError(`File not found: ${path}`, 'FS_FILE_NOT_FOUND', {\n      path,\n    });\n  }\n\n  static permissionDenied(path: string, operation: string): FilesystemError {\n    return new FilesystemError(\n      `Permission denied for ${operation} on: ${path}`,\n      'FS_PERMISSION_DENIED',\n      { path, operation },\n    );\n  }\n\n  static diskSpaceExceeded(\n    path: string,\n    requiredBytes: number,\n  ): FilesystemError {\n    return new FilesystemError(\n      `Insufficient disk space for operation on: ${path}`,\n      'FS_DISK_SPACE_EXCEEDED',\n      { path, requiredBytes },\n    );\n  }\n}\n\n/**\n * Data validation errors\n */\nexport class ValidationError extends SmrtError {\n  constructor(\n    message: string,\n    code: string,\n    details?: Record<string, any>,\n    cause?: Error,\n  ) {\n    super(message, code, 'validation', details, cause);\n  }\n\n  static requiredField(fieldName: string, objectType: string): ValidationError {\n    return new ValidationError(\n      `Required field '${fieldName}' is missing for ${objectType}`,\n      'VALIDATION_REQUIRED_FIELD',\n      { fieldName, objectType },\n    );\n  }\n\n  static invalidValue(\n    fieldName: string,\n    value: any,\n    expectedType: string,\n  ): ValidationError {\n    return new ValidationError(\n      `Invalid value for field '${fieldName}': expected ${expectedType}, got ${typeof value}`,\n      'VALIDATION_INVALID_VALUE',\n      { fieldName, value, expectedType },\n    );\n  }\n\n  static uniqueConstraint(fieldName: string, value: any): ValidationError {\n    return new ValidationError(\n      `Unique constraint violation for field '${fieldName}' with value: ${value}`,\n      'VALIDATION_UNIQUE_CONSTRAINT',\n      { fieldName, value },\n    );\n  }\n\n  static rangeError(\n    fieldName: string,\n    value: number,\n    min?: number,\n    max?: number,\n  ): ValidationError {\n    const range =\n      min !== undefined && max !== undefined\n        ? `between ${min} and ${max}`\n        : min !== undefined\n          ? `>= ${min}`\n          : `<= ${max}`;\n\n    return new ValidationError(\n      `Value for field '${fieldName}' must be ${range}, got: ${value}`,\n      'VALIDATION_RANGE_ERROR',\n      { fieldName, value, min, max },\n    );\n  }\n}\n\n/**\n * Network and external service errors\n */\nexport class NetworkError extends SmrtError {\n  constructor(\n    message: string,\n    code: string,\n    details?: Record<string, any>,\n    cause?: Error,\n  ) {\n    super(message, code, 'network', details, cause);\n  }\n\n  static requestFailed(\n    url: string,\n    status?: number,\n    responseBody?: string | Error,\n  ): NetworkError {\n    const cause = responseBody instanceof Error ? responseBody : undefined;\n    const body = typeof responseBody === 'string' ? responseBody : undefined;\n    return new NetworkError(\n      `Network request failed: ${url}${status ? ` (Status: ${status})` : ''}${body ? ` - ${body.substring(0, 200)}` : ''}`,\n      'NETWORK_REQUEST_FAILED',\n      { url, status, responseBody: body },\n      cause,\n    );\n  }\n\n  static timeout(url: string, timeoutMs: number): NetworkError {\n    return new NetworkError(\n      `Network request timed out after ${timeoutMs}ms: ${url}`,\n      'NETWORK_TIMEOUT',\n      { url, timeoutMs },\n    );\n  }\n\n  static serviceUnavailable(service: string, reason?: string): NetworkError {\n    return new NetworkError(\n      reason\n        ? `External service unavailable: ${service} - ${reason}`\n        : `External service unavailable: ${service}`,\n      'NETWORK_SERVICE_UNAVAILABLE',\n      { service, reason },\n    );\n  }\n}\n\n/**\n * Configuration and setup errors\n */\nexport class ConfigurationError extends SmrtError {\n  constructor(\n    message: string,\n    code: string,\n    details?: Record<string, any>,\n    cause?: Error,\n  ) {\n    super(message, code, 'configuration', details, cause);\n  }\n\n  static missingConfiguration(\n    configKey: string,\n    context?: string,\n  ): ConfigurationError {\n    return new ConfigurationError(\n      `Missing required configuration: ${configKey}${context ? ` in ${context}` : ''}`,\n      'CONFIG_MISSING',\n      { configKey, context },\n    );\n  }\n\n  static invalidConfiguration(\n    configKey: string,\n    value: any,\n    expected: string,\n  ): ConfigurationError {\n    return new ConfigurationError(\n      `Invalid configuration for ${configKey}: expected ${expected}, got ${typeof value}`,\n      'CONFIG_INVALID',\n      { configKey, value, expected },\n    );\n  }\n\n  static initializationFailed(\n    component: string,\n    cause?: Error,\n  ): ConfigurationError {\n    return new ConfigurationError(\n      `Failed to initialize component: ${component}`,\n      'CONFIG_INIT_FAILED',\n      { component },\n      cause,\n    );\n  }\n}\n\n/**\n * Runtime execution errors\n */\nexport class RuntimeError extends SmrtError {\n  constructor(\n    message: string,\n    code: string,\n    details?: Record<string, any>,\n    cause?: Error,\n  ) {\n    super(message, code, 'runtime', details, cause);\n  }\n\n  static operationFailed(\n    operation: string,\n    context?: string,\n    cause?: Error,\n  ): RuntimeError {\n    return new RuntimeError(\n      `Operation failed: ${operation}${context ? ` in ${context}` : ''}`,\n      'RUNTIME_OPERATION_FAILED',\n      { operation, context },\n      cause,\n    );\n  }\n\n  static invalidState(\n    message: string,\n    context?: Record<string, any>,\n  ): RuntimeError {\n    return new RuntimeError(message, 'RUNTIME_INVALID_STATE', context);\n  }\n\n  static resourceExhausted(resource: string, limit: number): RuntimeError {\n    return new RuntimeError(\n      `Resource exhausted: ${resource} exceeded limit of ${limit}`,\n      'RUNTIME_RESOURCE_EXHAUSTED',\n      { resource, limit },\n    );\n  }\n}\n\n/**\n * Utility functions for error handling\n */\nexport class ErrorUtils {\n  /**\n   * Wraps a function with error handling and automatic retry logic\n   */\n  static async withRetry<T>(\n    operation: () => Promise<T>,\n    maxRetries = 3,\n    delay = 1000,\n    backoffMultiplier = 2,\n  ): Promise<T> {\n    let lastError: Error = new Error('Operation failed without error details');\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n\n        if (attempt === maxRetries) {\n          throw lastError;\n        }\n\n        // Skip retry for certain error types\n        if (\n          error instanceof ValidationError ||\n          error instanceof ConfigurationError\n        ) {\n          throw error;\n        }\n\n        // Wait before retrying with exponential backoff\n        await new Promise((resolve) =>\n          setTimeout(resolve, delay * backoffMultiplier ** attempt),\n        );\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Checks if an error is retryable\n   */\n  static isRetryable(error: Error): boolean {\n    if (error instanceof SmrtError) {\n      return error.category === 'network' || error.category === 'ai';\n    }\n\n    // Check for common retryable error patterns\n    const retryablePatterns = [\n      /ECONNRESET/,\n      /ETIMEDOUT/,\n      /ENOTFOUND/,\n      /rate.?limit/i,\n      /timeout/i,\n      /503/,\n      /502/,\n      /500/,\n    ];\n\n    return retryablePatterns.some((pattern) => pattern.test(error.message));\n  }\n\n  /**\n   * Sanitizes an error for safe logging (removes sensitive information)\n   */\n  static sanitizeError(error: Error): Record<string, any> {\n    const sanitized: Record<string, any> = {\n      name: error.name,\n      message: error.message,\n      stack: error.stack,\n    };\n\n    if (error instanceof SmrtError) {\n      sanitized.code = error.code;\n      sanitized.category = error.category;\n\n      // Sanitize details to remove potential sensitive information\n      if (error.details) {\n        sanitized.details = { ...error.details };\n\n        // Remove common sensitive fields\n        const sensitiveFields = [\n          'password',\n          'token',\n          'key',\n          'secret',\n          'apiKey',\n        ];\n        for (const field of sensitiveFields) {\n          if (sanitized.details[field]) {\n            sanitized.details[field] = '[REDACTED]';\n          }\n        }\n      }\n    }\n\n    return sanitized;\n  }\n}\n\n/**\n * Validation report that collects multiple validation errors\n *\n * Useful for validating an entire object and reporting all errors\n * at once rather than stopping at the first error.\n *\n * @example\n * ```typescript\n * const report = new ValidationReport('Product');\n * report.addError(ValidationError.requiredField('name', 'Product'));\n * report.addError(ValidationError.rangeError('price', -10, 0));\n *\n * if (report.hasErrors()) {\n *   console.error(report.toString());\n *   // Output:\n *   // Validation failed for Product with 2 errors:\n *   // - name: Required field 'name' is missing for Product\n *   // - price: Value -10 for field 'price' is outside allowed range [0, undefined]\n * }\n * ```\n */\nexport class ValidationReport {\n  private errors: ValidationError[] = [];\n  private objectType: string;\n\n  constructor(objectType: string) {\n    this.objectType = objectType;\n  }\n\n  /**\n   * Add a validation error to the report\n   */\n  addError(error: ValidationError): void {\n    this.errors.push(error);\n  }\n\n  /**\n   * Check if there are any validation errors\n   */\n  hasErrors(): boolean {\n    return this.errors.length > 0;\n  }\n\n  /**\n   * Get all validation errors\n   */\n  getErrors(): ValidationError[] {\n    return [...this.errors];\n  }\n\n  /**\n   * Get the number of validation errors\n   */\n  getErrorCount(): number {\n    return this.errors.length;\n  }\n\n  /**\n   * Convert to a human-readable string\n   */\n  toString(): string {\n    if (this.errors.length === 0) {\n      return `Validation passed for ${this.objectType}`;\n    }\n\n    const errorList = this.errors\n      .map((err, idx) => `  ${idx + 1}. ${err.message}`)\n      .join('\\n');\n\n    return `Validation failed for ${this.objectType} with ${this.errors.length} error(s):\\n${errorList}`;\n  }\n\n  /**\n   * Convert to JSON format\n   */\n  toJSON(): object {\n    return {\n      objectType: this.objectType,\n      errorCount: this.errors.length,\n      errors: this.errors.map((err) => err.toJSON()),\n    };\n  }\n\n  /**\n   * Throw the first error if there are any errors\n   */\n  throwIfErrors(): void {\n    if (this.errors.length > 0) {\n      throw this.errors[0];\n    }\n  }\n\n  /**\n   * Clear all errors\n   */\n  clear(): void {\n    this.errors = [];\n  }\n}\n\n/**\n * Validation utility functions\n */\nexport class ValidationUtils {\n  /**\n   * Validate a single field value\n   *\n   * @param fieldName - Name of the field\n   * @param value - Value to validate\n   * @param options - Validation options (required, min, max, etc.)\n   * @returns ValidationError if validation fails, null otherwise\n   */\n  static async validateField(\n    fieldName: string,\n    value: any,\n    options: {\n      required?: boolean;\n      min?: number;\n      max?: number;\n      minLength?: number;\n      maxLength?: number;\n      pattern?: string | RegExp;\n      type?: string;\n      customValidator?: (value: any) => boolean | Promise<boolean>;\n      customMessage?: string;\n    },\n    objectType: string = 'Object',\n  ): Promise<ValidationError | null> {\n    // Required check\n    if (\n      options.required &&\n      (value === null || value === undefined || value === '')\n    ) {\n      return ValidationError.requiredField(fieldName, objectType);\n    }\n\n    // Skip further validation if value is null/undefined and not required\n    if (value === null || value === undefined) {\n      return null;\n    }\n\n    // Numeric range validation\n    if (typeof value === 'number') {\n      if (options.min !== undefined && value < options.min) {\n        return ValidationError.rangeError(\n          fieldName,\n          value,\n          options.min,\n          options.max,\n        );\n      }\n      if (options.max !== undefined && value > options.max) {\n        return ValidationError.rangeError(\n          fieldName,\n          value,\n          options.min,\n          options.max,\n        );\n      }\n    }\n\n    // String length validation\n    if (typeof value === 'string') {\n      if (options.minLength !== undefined && value.length < options.minLength) {\n        return ValidationError.invalidValue(\n          fieldName,\n          value,\n          `string with minimum length ${options.minLength}`,\n        );\n      }\n      if (options.maxLength !== undefined && value.length > options.maxLength) {\n        return ValidationError.invalidValue(\n          fieldName,\n          value,\n          `string with maximum length ${options.maxLength}`,\n        );\n      }\n\n      // Pattern validation\n      if (options.pattern) {\n        const regex =\n          typeof options.pattern === 'string'\n            ? new RegExp(options.pattern)\n            : options.pattern;\n        if (!regex.test(value)) {\n          return ValidationError.invalidValue(\n            fieldName,\n            value,\n            `string matching pattern ${options.pattern}`,\n          );\n        }\n      }\n    }\n\n    // Custom validator\n    if (options.customValidator) {\n      try {\n        const isValid = await options.customValidator(value);\n        if (!isValid) {\n          return ValidationError.invalidValue(\n            fieldName,\n            value,\n            options.customMessage || 'custom validation failed',\n          );\n        }\n      } catch (error) {\n        return ValidationError.invalidValue(\n          fieldName,\n          value,\n          `custom validation error: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Validate required field\n   */\n  static validateRequired(\n    fieldName: string,\n    value: any,\n    objectType: string = 'Object',\n  ): ValidationError | null {\n    if (value === null || value === undefined || value === '') {\n      return ValidationError.requiredField(fieldName, objectType);\n    }\n    return null;\n  }\n\n  /**\n   * Validate numeric range\n   */\n  static validateRange(\n    fieldName: string,\n    value: number,\n    min?: number,\n    max?: number,\n  ): ValidationError | null {\n    if (min !== undefined && value < min) {\n      return ValidationError.rangeError(fieldName, value, min, max);\n    }\n    if (max !== undefined && value > max) {\n      return ValidationError.rangeError(fieldName, value, min, max);\n    }\n    return null;\n  }\n\n  /**\n   * Validate string length\n   */\n  static validateLength(\n    fieldName: string,\n    value: string,\n    minLength?: number,\n    maxLength?: number,\n  ): ValidationError | null {\n    if (minLength !== undefined && value.length < minLength) {\n      return ValidationError.invalidValue(\n        fieldName,\n        value,\n        `string with minimum length ${minLength}`,\n      );\n    }\n    if (maxLength !== undefined && value.length > maxLength) {\n      return ValidationError.invalidValue(\n        fieldName,\n        value,\n        `string with maximum length ${maxLength}`,\n      );\n    }\n    return null;\n  }\n\n  /**\n   * Validate string pattern\n   */\n  static validatePattern(\n    fieldName: string,\n    value: string,\n    pattern: string | RegExp,\n  ): ValidationError | null {\n    const regex = typeof pattern === 'string' ? new RegExp(pattern) : pattern;\n    if (!regex.test(value)) {\n      return ValidationError.invalidValue(\n        fieldName,\n        value,\n        `string matching pattern ${pattern}`,\n      );\n    }\n    return null;\n  }\n}\n"],"names":[],"mappings":"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"}