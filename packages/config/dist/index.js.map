{"version":3,"file":"index.js","sources":["../src/loader.ts","../src/merge.ts","../src/index.ts"],"sourcesContent":["import { cosmiconfig } from 'cosmiconfig';\nimport type { LoadConfigOptions, SmrtConfig } from './types.js';\n\nconst MODULE_NAME = 'smrt';\n\n// Singleton cache\nlet cachedConfig: SmrtConfig | null = null;\n\n/**\n * Load and parse configuration from project root\n * Searches for smrt.config.{js,ts,json} files\n */\nexport async function loadConfig(\n  options: LoadConfigOptions = {},\n): Promise<SmrtConfig> {\n  const { configPath, searchParents = true, cache = true } = options;\n\n  // Return cached config if available\n  if (cache && cachedConfig) {\n    return cachedConfig;\n  }\n\n  // Initialize cosmiconfig\n  const explorer = cosmiconfig(MODULE_NAME, {\n    searchPlaces: [\n      `${MODULE_NAME}.config.js`,\n      `${MODULE_NAME}.config.mjs`,\n      `${MODULE_NAME}.config.cjs`,\n      `${MODULE_NAME}.config.json`,\n    ],\n    stopDir: searchParents ? undefined : process.cwd(),\n    cache: cache, // Respect cache option\n  });\n\n  let result: Awaited<ReturnType<typeof explorer.load>> = null;\n\n  // Load from specific path or search\n  try {\n    if (configPath) {\n      result = await explorer.load(configPath);\n    } else {\n      result = await explorer.search();\n    }\n  } catch (_error) {\n    // Return empty config on error\n    return {};\n  }\n\n  const config: SmrtConfig = result?.config || {};\n\n  // Cache the config\n  if (cache) {\n    cachedConfig = config;\n  }\n\n  return config;\n}\n\n/**\n * Clear the config cache\n * Useful for testing or hot-reloading\n */\nexport function clearConfigCache(): void {\n  cachedConfig = null;\n\n  // Clear Node's require cache for config files\n  // This is necessary for testing when config files are modified\n  const cacheKeys = Object.keys(require.cache);\n  for (const key of cacheKeys) {\n    if (key.includes('smrt.config')) {\n      delete require.cache[key];\n    }\n  }\n}\n\n/**\n * Check if config is loaded and cached\n */\nexport function isConfigLoaded(): boolean {\n  return cachedConfig !== null;\n}\n","import type { SmrtConfig } from './types.js';\n\n// Runtime config overrides\nlet runtimeConfig: Partial<SmrtConfig> = {};\n\n/**\n * Deep merge two objects\n * Later values override earlier values\n */\nfunction deepMerge<T extends Record<string, any>>(\n  target: T,\n  source: Partial<T>,\n): T {\n  const result = { ...target };\n\n  for (const key in source) {\n    const sourceValue = source[key];\n    const targetValue = result[key];\n\n    if (\n      sourceValue &&\n      typeof sourceValue === 'object' &&\n      !Array.isArray(sourceValue) &&\n      targetValue &&\n      typeof targetValue === 'object' &&\n      !Array.isArray(targetValue)\n    ) {\n      result[key] = deepMerge(\n        targetValue as Record<string, any>,\n        sourceValue as Record<string, any>,\n      ) as T[Extract<keyof T, string>];\n    } else if (sourceValue !== undefined) {\n      result[key] = sourceValue as T[Extract<keyof T, string>];\n    }\n  }\n\n  return result;\n}\n\n/**\n * Set runtime configuration\n * These override file-based configs\n */\nexport function setConfig(config: Partial<SmrtConfig>): void {\n  runtimeConfig = deepMerge(runtimeConfig, config);\n}\n\n/**\n * Get runtime configuration\n */\nexport function getRuntimeConfig(): Partial<SmrtConfig> {\n  return runtimeConfig;\n}\n\n/**\n * Clear runtime configuration\n * Useful for testing\n */\nexport function clearRuntimeConfig(): void {\n  runtimeConfig = {};\n}\n\n/**\n * Merge configurations with priority:\n * 1. Runtime config (highest)\n * 2. File config\n * 3. Defaults (lowest)\n */\nexport function mergeConfigs<T extends Record<string, unknown>>(\n  defaults: T,\n  fileConfig: Partial<T>,\n  runtime: Partial<T>,\n): T {\n  let result = { ...defaults };\n  result = deepMerge(result, fileConfig);\n  result = deepMerge(result, runtime);\n  return result;\n}\n","import { loadConfig as _loadConfig, clearConfigCache } from './loader.js';\nimport {\n  setConfig as _setConfig,\n  clearRuntimeConfig,\n  getRuntimeConfig,\n  mergeConfigs,\n} from './merge.js';\nimport type { LoadConfigOptions, SmrtConfig } from './types.js';\n\n// Re-export types\nexport type {\n  LoadConfigOptions,\n  SmrtConfig,\n  SmrtGlobalConfig,\n} from './types.js';\n\n// Cached loaded config\nlet loadedConfig: SmrtConfig | null = null;\n\n/**\n * Load and parse configuration from project root\n */\nexport async function loadConfig(\n  options?: LoadConfigOptions,\n): Promise<SmrtConfig> {\n  const config = await _loadConfig(options);\n  // Always update loadedConfig (even if caching is disabled)\n  loadedConfig = config;\n  return config;\n}\n\n/**\n * Get configuration for a specific module\n * Merges global smrt config with module-specific config\n *\n * @param moduleName - Name of the module\n * @param defaults - Default configuration values\n * @returns Merged configuration\n */\nexport function getModuleConfig<T extends Record<string, unknown>>(\n  moduleName: string,\n  defaults?: T,\n): T {\n  // Ensure config is loaded (will use empty config if not loaded)\n  const fileConfig = loadedConfig || {};\n  const runtime = getRuntimeConfig();\n\n  // Get global smrt config\n  const globalConfig = (fileConfig.smrt || {}) as Partial<T>;\n\n  // Get module-specific config\n  const moduleConfig = (fileConfig.modules?.[moduleName] || {}) as Partial<T>;\n\n  // Get runtime module config\n  const runtimeModuleConfig = (runtime.modules?.[moduleName] ||\n    {}) as Partial<T>;\n\n  // Merge: defaults < global < module < runtime\n  const defaultsWithGlobal = mergeConfigs(\n    defaults || ({} as T),\n    globalConfig,\n    {},\n  );\n  const withModuleConfig = mergeConfigs(defaultsWithGlobal, moduleConfig, {});\n  const final = mergeConfigs(withModuleConfig, runtimeModuleConfig, {});\n\n  return final;\n}\n\n/**\n * Get configuration for a specific package\n * Merges global smrt config with package-specific config\n *\n * @param packageName - Name of the package\n * @param defaults - Default configuration values\n * @returns Merged configuration\n */\nexport function getPackageConfig<T extends Record<string, unknown>>(\n  packageName: string,\n  defaults?: T,\n): T {\n  // Ensure config is loaded (will use empty config if not loaded)\n  const fileConfig = loadedConfig || {};\n  const runtime = getRuntimeConfig();\n\n  // Get global smrt config\n  const globalConfig = (fileConfig.smrt || {}) as Partial<T>;\n\n  // Get package-specific config\n  const packageConfig = (fileConfig.packages?.[packageName] ||\n    {}) as Partial<T>;\n\n  // Get runtime package config\n  const runtimePackageConfig = (runtime.packages?.[packageName] ||\n    {}) as Partial<T>;\n\n  // Merge: defaults < global < package < runtime\n  const defaultsWithGlobal = mergeConfigs(\n    defaults || ({} as T),\n    globalConfig,\n    {},\n  );\n  const withPackageConfig = mergeConfigs(defaultsWithGlobal, packageConfig, {});\n  const final = mergeConfigs(withPackageConfig, runtimePackageConfig, {});\n\n  return final;\n}\n\n/**\n * Set configuration at runtime\n * Merged with file-based config, runtime config takes priority\n */\nexport function setConfig(config: Partial<SmrtConfig>): void {\n  _setConfig(config);\n}\n\n/**\n * Clear all cached configuration\n * Useful for testing or hot-reloading\n */\nexport function clearCache(): void {\n  loadedConfig = null;\n  clearConfigCache(); // Clear loader.ts cache\n  clearRuntimeConfig(); // Clear runtime config\n}\n\n/**\n * Helper to define config with TypeScript support\n * Provides auto-completion in config files\n */\nexport function defineConfig(config: SmrtConfig): SmrtConfig {\n  return config;\n}\n"],"names":["loadConfig","setConfig","_loadConfig","_setConfig"],"mappings":"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"}