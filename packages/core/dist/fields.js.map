{"version":3,"file":"fields.js","sources":["../src/fields/index.ts"],"sourcesContent":["/**\n * Field definition system for SMRT objects\n *\n * Provides a clean, type-safe field definition syntax inspired by modern ORMs.\n * Fields define database schema, validation rules, and TypeScript types automatically.\n *\n * @example Basic field usage\n * ```typescript\n * import { text, decimal, boolean, foreignKey } from '@smrt/core/fields';\n *\n * class Product extends SmrtObject {\n *   name = text({ required: true, maxLength: 100 });\n *   price = decimal({ min: 0, max: 999999.99 });\n *   active = boolean({ default: true });\n *   categoryId = foreignKey(Category, { onDelete: 'restrict' });\n * }\n * ```\n *\n * @example Advanced field configuration\n * ```typescript\n * class User extends SmrtObject {\n *   email = text({\n *     required: true,\n *     unique: true,\n *     pattern: '^[^@]+@[^@]+\\.[^@]+$',\n *     description: 'User email address'\n *   });\n *   metadata = json({ default: {} });\n *   createdAt = datetime({ required: true });\n * }\n * ```\n */\n\n/**\n * Base configuration options available for all field types\n *\n * @interface FieldOptions\n */\nexport interface FieldOptions {\n  /** Whether this field is the primary key (default: false, 'id' field is auto-generated) */\n  primaryKey?: boolean;\n  /** Whether this field is required (NOT NULL constraint) */\n  required?: boolean;\n  /** Default value for this field when creating new objects */\n  default?: any;\n  /** Whether this field must have unique values (UNIQUE constraint) */\n  unique?: boolean;\n  /** Whether to create a database index on this field for faster queries */\n  index?: boolean;\n  /** Human-readable description of the field's purpose */\n  description?: string;\n  /**\n   * Custom validation function (synchronous or asynchronous)\n   * Should return true if valid, false if invalid\n   * @param value - The field value to validate\n   * @returns Boolean indicating validity\n   * @example\n   * ```typescript\n   * email = text({\n   *   validate: (v) => /^[^@]+@[^@]+\\.[^@]+$/.test(v),\n   *   customMessage: 'Invalid email format'\n   * });\n   * ```\n   */\n  validate?: (value: any) => boolean | Promise<boolean>;\n  /**\n   * Custom error message to display when validation fails\n   * Works with both built-in validators and custom validate functions\n   */\n  customMessage?: string;\n}\n\n/**\n * Configuration options for numeric fields (integer, decimal)\n *\n * @interface NumericFieldOptions\n * @extends FieldOptions\n */\nexport interface NumericFieldOptions extends FieldOptions {\n  /** Minimum allowed value for this field */\n  min?: number;\n  /** Maximum allowed value for this field */\n  max?: number;\n}\n\n/**\n * Configuration options for text fields\n *\n * @interface TextFieldOptions\n * @extends FieldOptions\n */\nexport interface TextFieldOptions extends FieldOptions {\n  /** Maximum length in characters */\n  maxLength?: number;\n  /** Minimum length in characters */\n  minLength?: number;\n  /** Regular expression pattern for validation */\n  pattern?: string;\n  /** Whether to encrypt this field's value in storage */\n  encrypted?: boolean;\n}\n\n/**\n * Configuration options for relationship fields (foreign keys, associations)\n *\n * @interface RelationshipFieldOptions\n * @extends FieldOptions\n */\nexport interface RelationshipFieldOptions extends FieldOptions {\n  /** What to do when the referenced object is deleted */\n  onDelete?: 'cascade' | 'restrict' | 'set_null';\n  /** Name of the related class (automatically set by relationship functions) */\n  related?: string;\n}\n\n/**\n * Base field class that all field types extend\n *\n * Represents a database field with type information, validation rules,\n * and SQL generation capabilities. All field functions return instances\n * of this class with specific type and options configurations.\n *\n * @class Field\n */\nexport class Field {\n  public readonly type: string;\n  public readonly options: FieldOptions;\n  public value: any;\n\n  constructor(type: string, options: FieldOptions = {}) {\n    this.type = type;\n    this.options = options;\n    this.value = options.default;\n  }\n\n  /**\n   * String coercion - allows Field instances to be used naturally in string contexts\n   * @returns String representation of the field's value\n   * @example\n   * ```typescript\n   * const name = text({ default: 'John' });\n   * console.log(name.toLowerCase()); // 'john' - toString() called automatically\n   * ```\n   */\n  toString(): string {\n    return this.value?.toString() || '';\n  }\n\n  /**\n   * Value coercion - returns the actual value for comparisons and operations\n   * @returns The field's value\n   * @example\n   * ```typescript\n   * const age = integer({ default: 25 });\n   * console.log(age + 5); // 30 - valueOf() called automatically\n   * ```\n   */\n  valueOf(): any {\n    return this.value;\n  }\n\n  /**\n   * JSON serialization - returns the value for JSON.stringify()\n   * @returns The field's value for JSON serialization\n   * @example\n   * ```typescript\n   * const data = { name: text({ default: 'John' }) };\n   * JSON.stringify(data); // {\"name\":\"John\"} - toJSON() called automatically\n   * ```\n   */\n  toJSON(): any {\n    return this.value;\n  }\n\n  /**\n   * Get the SQL type for this field based on the field type\n   *\n   * @returns SQL type string (e.g., 'TEXT', 'INTEGER', 'REAL')\n   * @example\n   * ```typescript\n   * const nameField = text();\n   * console.log(nameField.getSqlType()); // 'TEXT'\n   * ```\n   */\n  getSqlType(): string {\n    switch (this.type) {\n      case 'text':\n        return 'TEXT';\n      case 'integer':\n        return 'INTEGER';\n      case 'decimal':\n        return 'REAL';\n      case 'boolean':\n        return 'INTEGER';\n      case 'datetime':\n        return 'DATETIME';\n      case 'json':\n        return 'TEXT';\n      case 'foreignKey':\n        return 'TEXT';\n      default:\n        return 'TEXT';\n    }\n  }\n\n  /**\n   * Get field constraints for SQL DDL statements\n   *\n   * @returns Array of SQL constraint strings (e.g., ['NOT NULL', 'UNIQUE', 'PRIMARY KEY'])\n   * @example\n   * ```typescript\n   * const emailField = text({ required: true, unique: true });\n   * console.log(emailField.getSqlConstraints()); // ['NOT NULL', 'UNIQUE']\n   *\n   * const slugField = text({ primaryKey: true });\n   * console.log(slugField.getSqlConstraints()); // ['PRIMARY KEY']\n   * ```\n   */\n  getSqlConstraints(): string[] {\n    const constraints: string[] = [];\n\n    // PRIMARY KEY implies NOT NULL and UNIQUE, so handle it first\n    if (this.options.primaryKey) {\n      constraints.push('PRIMARY KEY');\n      // Don't add NOT NULL or UNIQUE separately - PRIMARY KEY implies both\n      return constraints;\n    }\n\n    if (this.options.required) {\n      constraints.push('NOT NULL');\n    }\n\n    if (this.options.unique) {\n      constraints.push('UNIQUE');\n    }\n\n    if (this.options.default !== undefined) {\n      const sqlType = this.getSqlType();\n      const escapedValue = this.escapeSqlValue(this.options.default);\n\n      // Add explicit CAST for TEXT types to prevent DuckDB ANY type inference\n      // DuckDB infers ANY type when DEFAULT is an empty string or NULL without explicit type\n      if (\n        sqlType === 'TEXT' &&\n        (this.options.default === '' || this.options.default === null)\n      ) {\n        constraints.push(`DEFAULT CAST(${escapedValue} AS TEXT)`);\n      } else {\n        constraints.push(`DEFAULT ${escapedValue}`);\n      }\n    } else if (!this.options.required && this.getSqlType() === 'TEXT') {\n      // For TEXT columns without explicit default or required constraint,\n      // add NOT NULL DEFAULT '' to prevent DuckDB ANY type inference\n      // DuckDB infers ANY type for nullable TEXT columns without defaults\n      constraints.push(\"NOT NULL DEFAULT ''\");\n    }\n\n    return constraints;\n  }\n\n  /**\n   * Escapes a value for safe inclusion in SQL statements\n   *\n   * @param value - Value to escape\n   * @returns Escaped SQL value string\n   * @private\n   */\n  private escapeSqlValue(value: any): string {\n    if (value === null) return 'NULL';\n    if (typeof value === 'string') return `'${value.replace(/'/g, \"''\")}'`;\n    if (typeof value === 'boolean') return value ? '1' : '0';\n    return String(value);\n  }\n}\n\n/**\n * Creates a text field for storing string values\n *\n * @param options - Configuration options for the text field\n * @returns Field instance configured for text storage\n * @example\n * ```typescript\n * class User extends SmrtObject {\n *   name = text({ required: true, maxLength: 100 });\n *   email = text({ unique: true, pattern: '^[^@]+@[^@]+\\.[^@]+$' });\n *   bio = text({ maxLength: 500 });\n * }\n * ```\n */\nexport function text(options: TextFieldOptions = {}): Field {\n  return new Field('text', options);\n}\n\n/**\n * Creates an integer field for storing whole numbers\n *\n * @param options - Configuration options for the integer field\n * @returns Field instance configured for integer storage\n * @example\n * ```typescript\n * class Product extends SmrtObject {\n *   quantity = integer({ min: 0, required: true });\n *   rating = integer({ min: 1, max: 5 });\n *   views = integer({ default: 0 });\n * }\n * ```\n */\nexport function integer(options: NumericFieldOptions = {}): Field {\n  return new Field('integer', options);\n}\n\n/**\n * Creates a decimal field for storing floating point numbers\n *\n * @param options - Configuration options for the decimal field\n * @returns Field instance configured for decimal storage\n * @example\n * ```typescript\n * class Product extends SmrtObject {\n *   price = decimal({ min: 0, required: true });\n *   weight = decimal({ min: 0.01, max: 999.99 });\n *   discountRate = decimal({ min: 0, max: 1, default: 0 });\n * }\n * ```\n */\nexport function decimal(options: NumericFieldOptions = {}): Field {\n  return new Field('decimal', options);\n}\n\n/**\n * Creates a boolean field for storing true/false values\n *\n * @param options - Configuration options for the boolean field\n * @returns Field instance configured for boolean storage\n * @example\n * ```typescript\n * class User extends SmrtObject {\n *   isActive = boolean({ default: true });\n *   hasVerifiedEmail = boolean({ default: false });\n *   isAdmin = boolean({ required: true });\n * }\n * ```\n */\nexport function boolean(options: FieldOptions = {}): Field {\n  return new Field('boolean', options);\n}\n\n/**\n * Creates a datetime field for storing timestamps\n *\n * @param options - Configuration options for the datetime field\n * @returns Field instance configured for datetime storage\n * @example\n * ```typescript\n * class Event extends SmrtObject {\n *   startDate = datetime({ required: true });\n *   endDate = datetime();\n *   createdAt = datetime({ default: new Date() });\n * }\n * ```\n */\nexport function datetime(options: FieldOptions = {}): Field {\n  return new Field('datetime', options);\n}\n\n/**\n * Creates a JSON field for storing structured data objects\n *\n * @param options - Configuration options for the JSON field\n * @returns Field instance configured for JSON storage\n * @example\n * ```typescript\n * class User extends SmrtObject {\n *   preferences = json({ default: {} });\n *   metadata = json();\n *   config = json({ required: true });\n * }\n * ```\n */\nexport function json(options: FieldOptions = {}): Field {\n  return new Field('json', options);\n}\n\n/**\n * Creates a foreign key field that references another SMRT object\n *\n * Supports lazy string-based references to avoid circular dependencies:\n * - String: `foreignKey('Customer')` - Recommended, avoids circular deps\n * - Function: `foreignKey(() => Customer)` - Lazy evaluation\n * - Class: `foreignKey(Customer)` - Direct reference (legacy, can cause circular deps)\n *\n * @param relatedClass - String name, lazy function, or class constructor of the related object\n * @param options - Configuration options for the foreign key field\n * @returns Field instance configured for foreign key relationships\n * @example\n * ```typescript\n * class Order extends SmrtObject {\n *   // Recommended: Lazy string reference (no circular dependency)\n *   customerId = foreignKey('Customer', { required: true, onDelete: 'restrict' });\n *   productId = foreignKey('Product', { onDelete: 'cascade' });\n *\n *   // Alternative: Lazy function reference\n *   categoryId = foreignKey(() => Category, { required: true });\n *\n *   // Legacy: Direct class reference (can cause circular dependency issues)\n *   // customerId = foreignKey(Customer, { required: true });\n * }\n * ```\n */\nexport function foreignKey(\n  relatedClass: string | Function | any,\n  options: Omit<RelationshipFieldOptions, 'related'> = {},\n): Field {\n  // Resolve the related class name\n  let relatedName: string;\n\n  if (typeof relatedClass === 'string') {\n    // Direct string reference (recommended)\n    relatedName = relatedClass;\n  } else if (\n    typeof relatedClass === 'function' &&\n    relatedClass.prototype === undefined\n  ) {\n    // Arrow function returning a class - evaluate it\n    const resolvedClass = relatedClass();\n    relatedName = resolvedClass.name;\n    // Store the lazy function for later resolution\n    (relatedClass as any)._lazyClass = relatedClass;\n  } else {\n    // Direct class reference (legacy)\n    relatedName = relatedClass.name;\n    // Store reference to related class for backward compatibility\n    if (relatedClass) {\n      (relatedClass as any)._directClass = relatedClass;\n    }\n  }\n\n  const field = new Field('foreignKey', {\n    ...options,\n    related: relatedName,\n  } as FieldOptions);\n\n  // Store reference metadata for debugging and backward compatibility\n  if (typeof relatedClass !== 'string') {\n    (field as any).relatedClass = relatedClass;\n  }\n\n  return field;\n}\n\n/**\n * Creates a one-to-many relationship field\n *\n * Supports lazy string-based references to avoid circular dependencies:\n * - String: `oneToMany('Product')` - Recommended, avoids circular deps\n * - Function: `oneToMany(() => Product)` - Lazy evaluation\n * - Class: `oneToMany(Product)` - Direct reference (legacy, can cause circular deps)\n *\n * @param relatedClass - String name, lazy function, or class constructor of the related objects\n * @param options - Configuration options for the relationship\n * @returns Field instance configured for one-to-many relationships\n * @example\n * ```typescript\n * class Category extends SmrtObject {\n *   // Recommended: Lazy string reference\n *   products = oneToMany('Product');\n * }\n *\n * class Customer extends SmrtObject {\n *   orders = oneToMany('Order', { onDelete: 'cascade' });\n * }\n * ```\n */\nexport function oneToMany(\n  relatedClass: string | Function | any,\n  options: Omit<RelationshipFieldOptions, 'related'> = {},\n): Field {\n  // Resolve the related class name (same logic as foreignKey)\n  let relatedName: string;\n\n  if (typeof relatedClass === 'string') {\n    relatedName = relatedClass;\n  } else if (\n    typeof relatedClass === 'function' &&\n    relatedClass.prototype === undefined\n  ) {\n    const resolvedClass = relatedClass();\n    relatedName = resolvedClass.name;\n  } else {\n    relatedName = relatedClass.name;\n  }\n\n  const field = new Field('oneToMany', {\n    ...options,\n    related: relatedName,\n  } as FieldOptions);\n\n  // Store reference to related class for backward compatibility\n  if (typeof relatedClass !== 'string') {\n    (field as any).relatedClass = relatedClass;\n  }\n\n  return field;\n}\n\n/**\n * Creates a many-to-many relationship field\n *\n * Supports lazy string-based references to avoid circular dependencies:\n * - String: `manyToMany('Category')` - Recommended, avoids circular deps\n * - Function: `manyToMany(() => Category)` - Lazy evaluation\n * - Class: `manyToMany(Category)` - Direct reference (legacy, can cause circular deps)\n *\n * @param relatedClass - String name, lazy function, or class constructor of the related objects\n * @param options - Configuration options for the relationship\n * @returns Field instance configured for many-to-many relationships\n * @example\n * ```typescript\n * class Product extends SmrtObject {\n *   // Recommended: Lazy string references\n *   categories = manyToMany('Category');\n *   tags = manyToMany('Tag');\n * }\n *\n * class User extends SmrtObject {\n *   roles = manyToMany('Role');\n * }\n * ```\n */\nexport function manyToMany(\n  relatedClass: string | Function | any,\n  options: Omit<RelationshipFieldOptions, 'related'> = {},\n): Field {\n  // Resolve the related class name (same logic as foreignKey)\n  let relatedName: string;\n\n  if (typeof relatedClass === 'string') {\n    relatedName = relatedClass;\n  } else if (\n    typeof relatedClass === 'function' &&\n    relatedClass.prototype === undefined\n  ) {\n    const resolvedClass = relatedClass();\n    relatedName = resolvedClass.name;\n  } else {\n    relatedName = relatedClass.name;\n  }\n\n  const field = new Field('manyToMany', {\n    ...options,\n    related: relatedName,\n  } as FieldOptions);\n\n  // Store reference to related class for backward compatibility\n  if (typeof relatedClass !== 'string') {\n    (field as any).relatedClass = relatedClass;\n  }\n\n  return field;\n}\n"],"names":[],"mappings":"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"}