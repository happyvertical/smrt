{"version":3,"file":"index.js","sources":["../src/asset-type.ts","../src/asset-status.ts","../src/asset-metafield.ts","../src/asset.ts","../src/asset-types.ts","../src/asset-statuses.ts","../src/asset-metafields.ts","../src/assets.ts"],"sourcesContent":["/**\n * AssetType model - Defines the high-level type of an asset\n *\n * Lookup table for asset type classification (e.g., 'image', 'video', 'document')\n */\n\nimport { SmrtObject, smrt } from '@smrt/core';\nimport type { AssetTypeOptions } from './types';\n\n@smrt({\n  api: { include: ['list', 'get', 'create', 'update', 'delete'] },\n  mcp: { include: ['list', 'get', 'create'] },\n  cli: true,\n})\nexport class AssetType extends SmrtObject {\n  slug = ''; // Primary key (human-readable identifier, e.g., 'image', 'video')\n  name = ''; // Display name (e.g., 'Image', 'Video')\n  description = ''; // Optional description\n\n  constructor(options: AssetTypeOptions = {}) {\n    super(options);\n    if (options.slug) this.slug = options.slug;\n    if (options.name) this.name = options.name;\n    if (options.description) this.description = options.description;\n  }\n\n  /**\n   * Get asset type by slug\n   *\n   * @param slug - The slug to search for\n   * @returns AssetType instance or null\n   */\n  static async getBySlug(slug: string): Promise<AssetType | null> {\n    // Will be auto-implemented by SMRT\n    return null;\n  }\n}\n","/**\n * AssetStatus model - Defines the lifecycle status of an asset\n *\n * Lookup table for asset status classification (e.g., 'draft', 'published', 'archived')\n */\n\nimport { SmrtObject, smrt } from '@smrt/core';\nimport type { AssetStatusOptions } from './types';\n\n@smrt({\n  api: { include: ['list', 'get', 'create', 'update', 'delete'] },\n  mcp: { include: ['list', 'get', 'create'] },\n  cli: true,\n})\nexport class AssetStatus extends SmrtObject {\n  slug = ''; // Primary key (human-readable identifier, e.g., 'draft', 'published')\n  name = ''; // Display name (e.g., 'Draft', 'Published')\n  description = ''; // Optional description\n\n  constructor(options: AssetStatusOptions = {}) {\n    super(options);\n    if (options.slug) this.slug = options.slug;\n    if (options.name) this.name = options.name;\n    if (options.description) this.description = options.description;\n  }\n\n  /**\n   * Get asset status by slug\n   *\n   * @param slug - The slug to search for\n   * @returns AssetStatus instance or null\n   */\n  static async getBySlug(slug: string): Promise<AssetStatus | null> {\n    // Will be auto-implemented by SMRT\n    return null;\n  }\n}\n","/**\n * AssetMetafield model - Defines the controlled vocabulary for metadata keys\n *\n * Lookup table for metadata field definitions with validation rules\n */\n\nimport { SmrtObject, smrt } from '@smrt/core';\nimport type { AssetMetafieldOptions } from './types';\n\n@smrt({\n  api: { include: ['list', 'get', 'create', 'update', 'delete'] },\n  mcp: { include: ['list', 'get', 'create'] },\n  cli: true,\n})\nexport class AssetMetafield extends SmrtObject {\n  slug = ''; // Primary key (human-readable identifier, e.g., 'width', 'height')\n  name = ''; // Display name (e.g., 'Width', 'Height')\n  validation = ''; // JSON validation rules stored as text\n\n  constructor(options: AssetMetafieldOptions = {}) {\n    super(options);\n    if (options.slug) this.slug = options.slug;\n    if (options.name) this.name = options.name;\n    if (options.validation) this.validation = options.validation;\n  }\n\n  /**\n   * Get validation rules as parsed object\n   *\n   * @returns Parsed validation object or empty object if no validation\n   */\n  getValidation(): Record<string, unknown> {\n    if (!this.validation) return {};\n    try {\n      return JSON.parse(this.validation);\n    } catch {\n      return {};\n    }\n  }\n\n  /**\n   * Set validation rules from object\n   *\n   * @param rules - Validation rules object\n   */\n  setValidation(rules: Record<string, unknown>): void {\n    this.validation = JSON.stringify(rules);\n  }\n\n  /**\n   * Get asset metafield by slug\n   *\n   * @param slug - The slug to search for\n   * @returns AssetMetafield instance or null\n   */\n  static async getBySlug(slug: string): Promise<AssetMetafield | null> {\n    // Will be auto-implemented by SMRT\n    return null;\n  }\n}\n","/**\n * Asset model - Core entity for asset management\n *\n * Represents a digital asset with versioning, metadata, and tag support\n */\n\nimport { SmrtObject, smrt } from '@smrt/core';\nimport type { Tag } from '@smrt/tags';\nimport type { AssetOptions } from './types';\nimport type { AssetType } from './asset-type';\nimport type { AssetStatus } from './asset-status';\n\n@smrt({\n  api: { include: ['list', 'get', 'create', 'update', 'delete'] },\n  mcp: { include: ['list', 'get', 'create', 'update'] },\n  cli: true,\n})\nexport class Asset extends SmrtObject {\n  // Core fields\n  name = ''; // User-friendly name\n  slug = ''; // URL-friendly identifier\n  sourceUri = ''; // URI to the actual file (e.g., 's3://bucket/key', 'file:///path')\n  mimeType = ''; // MIME type (e.g., 'image/jpeg', 'video/mp4')\n  description = ''; // Optional description\n  version = 1; // Version number\n\n  // Foreign key references (stored as IDs/slugs)\n  primaryVersionId: string | null = null; // Points to first version's ID\n  typeSlug = ''; // FK to AssetType.slug\n  statusSlug = ''; // FK to AssetStatus.slug\n  ownerProfileId: string | null = null; // FK to Profile.id (nullable)\n  parentId: string | null = null; // FK to Asset.id (for derivatives)\n\n  // Timestamps\n  createdAt = new Date();\n  updatedAt = new Date();\n\n  constructor(options: AssetOptions = {}) {\n    super(options);\n    if (options.name) this.name = options.name;\n    if (options.slug) this.slug = options.slug;\n    if (options.sourceUri) this.sourceUri = options.sourceUri;\n    if (options.mimeType) this.mimeType = options.mimeType;\n    if (options.description) this.description = options.description;\n    if (options.version !== undefined) this.version = options.version;\n    if (options.primaryVersionId !== undefined)\n      this.primaryVersionId = options.primaryVersionId;\n    if (options.typeSlug) this.typeSlug = options.typeSlug;\n    if (options.statusSlug) this.statusSlug = options.statusSlug;\n    if (options.ownerProfileId !== undefined)\n      this.ownerProfileId = options.ownerProfileId;\n    if (options.parentId !== undefined) this.parentId = options.parentId;\n    if (options.createdAt) this.createdAt = options.createdAt;\n    if (options.updatedAt) this.updatedAt = options.updatedAt;\n  }\n\n  /**\n   * Get all tags for this asset from @smrt/tags\n   *\n   * @returns Array of Tag instances from @smrt/tags package\n   */\n  async getTags(): Promise<Tag[]> {\n    // Query asset_tags join table and retrieve Tag instances\n    const collection = this.getCollection();\n    if (!collection) return [];\n\n    const db = await collection.getDb();\n    const rows = (await db\n      .prepare('SELECT tag_slug FROM asset_tags WHERE asset_id = ?')\n      .all(this.id)) as { tag_slug: string }[];\n\n    // Import Tag dynamically to avoid circular dependencies\n    const { Tag } = await import('@smrt/tags');\n    const tags: Tag[] = [];\n\n    for (const row of rows) {\n      const tag = await Tag.getBySlug(row.tag_slug);\n      if (tag) tags.push(tag);\n    }\n\n    return tags;\n  }\n\n  /**\n   * Check if this asset has a specific tag\n   *\n   * @param tagSlug - The slug of the tag to check\n   * @returns True if the asset has this tag\n   */\n  async hasTag(tagSlug: string): Promise<boolean> {\n    const collection = this.getCollection();\n    if (!collection) return false;\n\n    const db = await collection.getDb();\n    const result = (await db\n      .prepare(\n        'SELECT COUNT(*) as count FROM asset_tags WHERE asset_id = ? AND tag_slug = ?',\n      )\n      .get(this.id, tagSlug)) as { count: number };\n\n    return result.count > 0;\n  }\n\n  /**\n   * Get the parent asset (if this is a derivative)\n   *\n   * @returns Parent Asset instance or null\n   */\n  async getParent(): Promise<Asset | null> {\n    if (!this.parentId) return null;\n\n    const collection = this.getCollection();\n    if (!collection) return null;\n\n    return (await collection.get({ id: this.parentId })) as Asset | null;\n  }\n\n  /**\n   * Get all derivative assets (children)\n   *\n   * @returns Array of child Asset instances\n   */\n  async getChildren(): Promise<Asset[]> {\n    const collection = this.getCollection();\n    if (!collection) return [];\n\n    return (await collection.list({\n      where: { parentId: this.id },\n    })) as Asset[];\n  }\n\n  /**\n   * Get the type of this asset\n   *\n   * @returns AssetType instance or null\n   */\n  async getType(): Promise<AssetType | null> {\n    if (!this.typeSlug) return null;\n\n    const { AssetType } = await import('./asset-type');\n    return await AssetType.getBySlug(this.typeSlug);\n  }\n\n  /**\n   * Get the status of this asset\n   *\n   * @returns AssetStatus instance or null\n   */\n  async getStatus(): Promise<AssetStatus | null> {\n    if (!this.statusSlug) return null;\n\n    const { AssetStatus } = await import('./asset-status');\n    return await AssetStatus.getBySlug(this.statusSlug);\n  }\n\n  /**\n   * Get asset by slug\n   *\n   * @param slug - The slug to search for\n   * @returns Asset instance or null\n   */\n  static async getBySlug(slug: string): Promise<Asset | null> {\n    // Will be auto-implemented by SMRT\n    return null;\n  }\n}\n","/**\n * AssetTypeCollection - Collection manager for AssetType instances\n *\n * Manages asset type lookup table with common type initialization\n */\n\nimport { SmrtCollection } from '@smrt/core';\nimport { AssetType } from './asset-type';\n\nexport class AssetTypeCollection extends SmrtCollection<AssetType> {\n  static readonly _itemClass = AssetType;\n\n  /**\n   * Get or create an asset type by slug\n   *\n   * @param slug - The asset type slug\n   * @param name - The display name (defaults to slug)\n   * @param description - Optional description\n   * @returns The existing or newly created AssetType\n   */\n  async getOrCreate(\n    slug: string,\n    name?: string,\n    description?: string,\n  ): Promise<AssetType> {\n    const existing = await this.list({ where: { slug }, limit: 1 });\n    if (existing.length > 0) {\n      return existing[0];\n    }\n\n    return await this.create({\n      slug,\n      name: name || slug,\n      description,\n    });\n  }\n\n  /**\n   * Initialize common asset types\n   *\n   * Creates standard asset types if they don't exist:\n   * - image\n   * - video\n   * - document\n   * - audio\n   * - folder\n   */\n  async initializeCommonTypes(): Promise<void> {\n    await this.getOrCreate(\n      'image',\n      'Image',\n      'Image files (JPEG, PNG, GIF, etc.)',\n    );\n    await this.getOrCreate(\n      'video',\n      'Video',\n      'Video files (MP4, AVI, MOV, etc.)',\n    );\n    await this.getOrCreate(\n      'document',\n      'Document',\n      'Document files (PDF, DOCX, TXT, etc.)',\n    );\n    await this.getOrCreate(\n      'audio',\n      'Audio',\n      'Audio files (MP3, WAV, AAC, etc.)',\n    );\n    await this.getOrCreate(\n      'folder',\n      'Folder',\n      'Container for organizing assets',\n    );\n  }\n}\n","/**\n * AssetStatusCollection - Collection manager for AssetStatus instances\n *\n * Manages asset status lookup table with common status initialization\n */\n\nimport { SmrtCollection } from '@smrt/core';\nimport { AssetStatus } from './asset-status';\n\nexport class AssetStatusCollection extends SmrtCollection<AssetStatus> {\n  static readonly _itemClass = AssetStatus;\n\n  /**\n   * Get or create an asset status by slug\n   *\n   * @param slug - The asset status slug\n   * @param name - The display name (defaults to slug)\n   * @param description - Optional description\n   * @returns The existing or newly created AssetStatus\n   */\n  async getOrCreate(\n    slug: string,\n    name?: string,\n    description?: string,\n  ): Promise<AssetStatus> {\n    const existing = await this.list({ where: { slug }, limit: 1 });\n    if (existing.length > 0) {\n      return existing[0];\n    }\n\n    return await this.create({\n      slug,\n      name: name || slug,\n      description,\n    });\n  }\n\n  /**\n   * Initialize common asset statuses\n   *\n   * Creates standard asset statuses if they don't exist:\n   * - draft\n   * - published\n   * - archived\n   * - deleted\n   */\n  async initializeCommonStatuses(): Promise<void> {\n    await this.getOrCreate('draft', 'Draft', 'Work in progress, not yet ready');\n    await this.getOrCreate('published', 'Published', 'Live and available');\n    await this.getOrCreate(\n      'archived',\n      'Archived',\n      'No longer active but preserved',\n    );\n    await this.getOrCreate('deleted', 'Deleted', 'Marked for deletion');\n  }\n}\n","/**\n * AssetMetafieldCollection - Collection manager for AssetMetafield instances\n *\n * Manages asset metafield definitions with validation rules\n */\n\nimport { SmrtCollection } from '@smrt/core';\nimport { AssetMetafield } from './asset-metafield';\n\nexport class AssetMetafieldCollection extends SmrtCollection<AssetMetafield> {\n  static readonly _itemClass = AssetMetafield;\n\n  /**\n   * Get or create an asset metafield by slug\n   *\n   * @param slug - The metafield slug\n   * @param name - The display name (defaults to slug)\n   * @param validation - Optional validation rules (JSON string or object)\n   * @returns The existing or newly created AssetMetafield\n   */\n  async getOrCreate(\n    slug: string,\n    name?: string,\n    validation?: string | Record<string, unknown>,\n  ): Promise<AssetMetafield> {\n    const existing = await this.list({ where: { slug }, limit: 1 });\n    if (existing.length > 0) {\n      return existing[0];\n    }\n\n    const validationString =\n      typeof validation === 'string'\n        ? validation\n        : validation\n          ? JSON.stringify(validation)\n          : '';\n\n    return await this.create({\n      slug,\n      name: name || slug,\n      validation: validationString,\n    });\n  }\n\n  /**\n   * Initialize common asset metafields\n   *\n   * Creates standard metafields with validation rules:\n   * - width (integer, min: 0)\n   * - height (integer, min: 0)\n   * - duration (number, min: 0)\n   * - size (integer, min: 0)\n   * - author (string)\n   * - copyright (string)\n   */\n  async initializeCommonMetafields(): Promise<void> {\n    await this.getOrCreate('width', 'Width', {\n      type: 'integer',\n      min: 0,\n      description: 'Width in pixels',\n    });\n    await this.getOrCreate('height', 'Height', {\n      type: 'integer',\n      min: 0,\n      description: 'Height in pixels',\n    });\n    await this.getOrCreate('duration', 'Duration', {\n      type: 'number',\n      min: 0,\n      description: 'Duration in seconds',\n    });\n    await this.getOrCreate('size', 'File Size', {\n      type: 'integer',\n      min: 0,\n      description: 'File size in bytes',\n    });\n    await this.getOrCreate('author', 'Author', {\n      type: 'string',\n      description: 'Content creator',\n    });\n    await this.getOrCreate('copyright', 'Copyright', {\n      type: 'string',\n      description: 'Copyright notice',\n    });\n  }\n}\n","/**\n * AssetCollection - Collection manager for Asset instances\n *\n * Provides tag management, versioning, and query operations for assets\n */\n\nimport { SmrtCollection } from '@smrt/core';\nimport { Asset } from './asset';\n\nexport class AssetCollection extends SmrtCollection<Asset> {\n  static readonly _itemClass = Asset;\n\n  /**\n   * Add a tag to an asset (uses @smrt/tags)\n   *\n   * @param assetId - The asset ID to tag\n   * @param tagSlug - The tag slug from @smrt/tags\n   */\n  async addTag(assetId: string, tagSlug: string): Promise<void> {\n    const db = await this.getDb();\n    await db\n      .prepare(\n        'INSERT OR IGNORE INTO asset_tags (asset_id, tag_slug, created_at) VALUES (?, ?, ?)',\n      )\n      .run(assetId, tagSlug, new Date().toISOString());\n  }\n\n  /**\n   * Remove a tag from an asset\n   *\n   * @param assetId - The asset ID\n   * @param tagSlug - The tag slug to remove\n   */\n  async removeTag(assetId: string, tagSlug: string): Promise<void> {\n    const db = await this.getDb();\n    await db\n      .prepare('DELETE FROM asset_tags WHERE asset_id = ? AND tag_slug = ?')\n      .run(assetId, tagSlug);\n  }\n\n  /**\n   * Get all assets with a specific tag\n   *\n   * @param tagSlug - The tag slug to filter by\n   * @returns Array of assets with this tag\n   */\n  async getByTag(tagSlug: string): Promise<Asset[]> {\n    const db = await this.getDb();\n    const rows = (await db\n      .prepare('SELECT asset_id FROM asset_tags WHERE tag_slug = ?')\n      .all(tagSlug)) as { asset_id: string }[];\n\n    const assets: Asset[] = [];\n    for (const row of rows) {\n      const asset = await this.get({ id: row.asset_id });\n      if (asset) assets.push(asset as Asset);\n    }\n\n    return assets;\n  }\n\n  /**\n   * Get assets by type\n   *\n   * @param typeSlug - The asset type slug (e.g., 'image', 'video')\n   * @returns Array of assets matching the type\n   */\n  async getByType(typeSlug: string): Promise<Asset[]> {\n    return (await this.list({ where: { typeSlug } })) as Asset[];\n  }\n\n  /**\n   * Get assets by status\n   *\n   * @param statusSlug - The asset status slug (e.g., 'published', 'draft')\n   * @returns Array of assets matching the status\n   */\n  async getByStatus(statusSlug: string): Promise<Asset[]> {\n    return (await this.list({ where: { statusSlug } })) as Asset[];\n  }\n\n  /**\n   * Get assets by owner\n   *\n   * @param ownerProfileId - The profile ID of the owner\n   * @returns Array of assets owned by this profile\n   */\n  async getByOwner(ownerProfileId: string): Promise<Asset[]> {\n    return (await this.list({ where: { ownerProfileId } })) as Asset[];\n  }\n\n  /**\n   * Create a new version of an existing asset\n   *\n   * @param primaryVersionId - The primary version ID (first version's ID)\n   * @param newSourceUri - The new source URI for this version\n   * @param updates - Optional additional updates\n   * @returns The newly created asset version\n   */\n  async createNewVersion(\n    primaryVersionId: string,\n    newSourceUri: string,\n    updates: Partial<Asset> = {},\n  ): Promise<Asset> {\n    // Get the current latest version\n    const versions = await this.listVersions(primaryVersionId);\n    if (versions.length === 0) {\n      throw new Error(\n        `No asset found with primary version ID: ${primaryVersionId}`,\n      );\n    }\n\n    // Sort by version number to find the latest\n    versions.sort((a, b) => b.version - a.version);\n    const latestVersion = versions[0];\n\n    // Create new version\n    return (await this.create({\n      ...latestVersion,\n      id: undefined, // Generate new ID\n      sourceUri: newSourceUri,\n      version: latestVersion.version + 1,\n      primaryVersionId,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...updates,\n    })) as Asset;\n  }\n\n  /**\n   * Get the latest version of an asset\n   *\n   * @param primaryVersionId - The primary version ID\n   * @returns The latest version or null\n   */\n  async getLatestVersion(primaryVersionId: string): Promise<Asset | null> {\n    const versions = await this.listVersions(primaryVersionId);\n    if (versions.length === 0) return null;\n\n    // Sort by version number descending\n    versions.sort((a, b) => b.version - a.version);\n    return versions[0];\n  }\n\n  /**\n   * List all versions of an asset\n   *\n   * @param primaryVersionId - The primary version ID\n   * @returns Array of all asset versions, ordered by version number\n   */\n  async listVersions(primaryVersionId: string): Promise<Asset[]> {\n    const db = await this.getDb();\n\n    // Query for all assets with this primary version ID or ID matching primary version ID\n    const rows = (await db\n      .prepare(\n        'SELECT * FROM assets WHERE primary_version_id = ? OR id = ? ORDER BY version ASC',\n      )\n      .all(primaryVersionId, primaryVersionId)) as any[];\n\n    return rows.map((row) => {\n      const asset = new Asset();\n      Object.assign(asset, row);\n      return asset;\n    });\n  }\n\n  /**\n   * Get child assets (derivatives) of a parent asset\n   *\n   * @param parentId - The parent asset ID\n   * @returns Array of child assets\n   */\n  async getChildren(parentId: string): Promise<Asset[]> {\n    return (await this.list({ where: { parentId } })) as Asset[];\n  }\n\n  /**\n   * Get assets by MIME type pattern\n   *\n   * @param mimePattern - MIME type pattern (e.g., 'image/*', 'video/mp4')\n   * @returns Array of matching assets\n   */\n  async getByMimeType(mimePattern: string): Promise<Asset[]> {\n    const db = await this.getDb();\n    const pattern = mimePattern.replace('*', '%');\n\n    const rows = (await db\n      .prepare('SELECT * FROM assets WHERE mime_type LIKE ?')\n      .all(pattern)) as any[];\n\n    return rows.map((row) => {\n      const asset = new Asset();\n      Object.assign(asset, row);\n      return asset;\n    });\n  }\n}\n"],"names":["_init","AssetType","AssetStatus"],"mappings":"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"}