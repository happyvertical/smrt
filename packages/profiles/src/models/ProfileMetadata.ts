/**
 * ProfileMetadata model - Stores metadata values for profiles
 *
 * Links profiles to metafield definitions with actual values.
 * Uses UUID primary key with foreign keys to Profile and ProfileMetafield.
 */

import { SmrtObject, type SmrtObjectOptions, smrt } from '@smrt/core';
import { text, foreignKey } from '@smrt/core';

export interface ProfileMetadataOptions extends SmrtObjectOptions {
  profileId?: string;
  metafieldId?: string;
  value?: string;
}

@smrt({
  api: { include: ['list', 'get', 'create', 'update', 'delete'] },
  mcp: { include: ['list', 'get'] },
  cli: true,
})
export class ProfileMetadata extends SmrtObject {
  // id: UUID (auto-generated by SmrtObject)
  profileId = foreignKey('Profile', { required: true }); // References Profile.id
  metafieldId = foreignKey('ProfileMetafield', { required: true }); // References ProfileMetafield.id
  value = text({ required: true }); // The metadata value (stored as text)

  constructor(options: ProfileMetadataOptions = {}) {
    super(options);
    // Field values are automatically set by initializePropertiesFromOptions()
    // No need to manually assign Field properties here
  }

  /**
   * Validate this metadata value against the metafield's validation schema
   *
   * @returns True if valid, throws error if invalid
   */
  async validate(): Promise<boolean> {
    const metafield = await this.loadRelated('metafieldId');
    if (!metafield) {
      throw new Error('Metafield not found');
    }

    return await metafield.validateValue(this.value);
  }

  /**
   * Get the metafield slug for this metadata
   *
   * @returns The slug of the metafield
   */
  async getMetafieldSlug(): Promise<string> {
    const metafield = await this.loadRelated('metafieldId');
    return metafield?.slug || '';
  }
}
