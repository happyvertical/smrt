{"version":3,"file":"collection-CMrud5qH.js","sources":["../../src/config.ts","../../src/signals/sanitizer.ts","../../src/signals/bus.ts","../../src/system/schema.ts","../../src/class.ts","../../src/collection.ts"],"sourcesContent":["/**\n * Global SMRT configuration system\n *\n * Provides application-level defaults for signal adapters.\n * Configuration follows a three-tier pattern:\n * 1. Global defaults (via smrt.configure())\n * 2. Per-instance overrides (via SmrtClassOptions)\n * 3. Runtime behavior (from merged config)\n */\n\nimport type { LoggerConfig } from '@have/logger';\nimport type { ISignalAdapter } from '@smrt/types';\nimport type { SignalBus } from './signals/bus.js';\nimport type { SanitizationConfig } from './signals/sanitizer.js';\n\n/**\n * Metrics adapter configuration\n */\nexport interface MetricsConfig {\n  /** Enable metrics tracking */\n  enabled: boolean;\n}\n\n/**\n * Pub/Sub adapter configuration\n */\nexport interface PubSubConfig {\n  /** Enable pub/sub broadcasting */\n  enabled: boolean;\n}\n\n/**\n * Global signal configuration\n *\n * Application-level defaults for signal adapters.\n * These can be overridden per-instance via SmrtClassOptions.\n */\nexport interface GlobalSignalConfig {\n  /** Logging configuration (default: true with console, info level) */\n  logging?: LoggerConfig;\n\n  /** Metrics configuration (default: undefined/disabled) */\n  metrics?: MetricsConfig;\n\n  /** Pub/Sub configuration (default: undefined/disabled) */\n  pubsub?: PubSubConfig;\n\n  /**\n   * Signal sanitization configuration (default: enabled with standard redactions)\n   * Set to false to disable sanitization\n   */\n  sanitization?: SanitizationConfig | false;\n\n  /** Custom signal configuration */\n  signals?: {\n    /** Shared signal bus instance */\n    bus?: SignalBus;\n    /** Additional custom adapters */\n    adapters?: ISignalAdapter[];\n  };\n}\n\n/**\n * Singleton configuration manager\n *\n * Manages global SMRT configuration with sensible defaults.\n */\nclass SmrtConfig {\n  private static instance: SmrtConfig;\n  private config: GlobalSignalConfig = {\n    logging: true, // Default: console logging at info level\n  };\n\n  private constructor() {}\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(): SmrtConfig {\n    if (!SmrtConfig.instance) {\n      SmrtConfig.instance = new SmrtConfig();\n    }\n    return SmrtConfig.instance;\n  }\n\n  /**\n   * Configure global defaults\n   *\n   * @param config - Configuration to apply\n   */\n  configure(config: GlobalSignalConfig): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Get current configuration\n   *\n   * @returns Current global configuration\n   */\n  getConfig(): GlobalSignalConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Reset to default configuration\n   */\n  reset(): void {\n    this.config = { logging: true };\n  }\n}\n\n/**\n * Global configuration API\n *\n * Callable function with attached methods for managing SMRT configuration.\n *\n * @example\n * ```typescript\n * import { config } from '@smrt/core';\n *\n * // Set application-level defaults\n * config({\n *   logging: { level: 'debug' },\n *   metrics: { enabled: true },\n *   pubsub: { enabled: false }\n * });\n *\n * // Reset to defaults\n * config.reset();\n *\n * // Get current configuration\n * const current = config.toJSON();\n *\n * // Auto-convert to string\n * console.log(`Config: ${config}`);\n *\n * // Auto-convert to JSON\n * JSON.stringify(config);\n *\n * // All SmrtClass instances now use these defaults\n * const product = new Product({ name: 'Widget' });\n * await product.initialize();\n * // product has logging at debug level and metrics enabled\n * ```\n */\nfunction config(options: GlobalSignalConfig): void {\n  SmrtConfig.getInstance().configure(options);\n}\n\n/**\n * Reset configuration to defaults\n */\nconfig.reset = (): void => {\n  SmrtConfig.getInstance().reset();\n};\n\n/**\n * Get current configuration as object\n * Called automatically by JSON.stringify()\n *\n * @returns Current global configuration\n */\nconfig.toJSON = (): GlobalSignalConfig => SmrtConfig.getInstance().getConfig();\n\n/**\n * Convert configuration to string\n * Called automatically in string contexts\n *\n * @returns JSON string representation of configuration\n */\nconfig.toString = (): string =>\n  JSON.stringify(SmrtConfig.getInstance().getConfig(), null, 2);\n\nexport { config };\n","/**\n * Signal payload sanitization for security\n *\n * Prevents sensitive data (passwords, tokens, PII) from being leaked\n * into logs, metrics, or other signal outputs.\n */\n\nimport type { Signal } from '@smrt/types';\n\n/**\n * Sanitization configuration\n */\nexport interface SanitizationConfig {\n  /**\n   * Keys to redact from signal payloads\n   * Default: common sensitive fields\n   */\n  redactKeys?: string[];\n\n  /**\n   * Custom replacer function for sanitization\n   * Return undefined to redact the value entirely\n   */\n  replacer?: (key: string, value: any) => any;\n\n  /**\n   * Replacement value for redacted fields\n   * Default: '[REDACTED]'\n   */\n  redactedValue?: string;\n\n  /**\n   * Maximum number of stack trace lines to include in sanitized errors\n   * Default: 10\n   */\n  maxStackLines?: number;\n}\n\n/**\n * Default sensitive keys to redact\n */\nconst DEFAULT_REDACT_KEYS = [\n  'password',\n  'passwd',\n  'pwd',\n  'secret',\n  'token',\n  'apiKey',\n  'api_key',\n  'accessToken',\n  'access_token',\n  'refreshToken',\n  'refresh_token',\n  'privateKey',\n  'private_key',\n  'authToken',\n  'auth_token',\n  'bearerToken',\n  'bearer_token',\n  'sessionId',\n  'session_id',\n  'ssn',\n  'creditCard',\n  'credit_card',\n  'cvv',\n  'pin',\n];\n\n/**\n * Signal sanitizer\n *\n * Removes or redacts sensitive data from signal payloads before\n * they are processed by adapters.\n */\nexport class SignalSanitizer {\n  private config: Required<SanitizationConfig>;\n\n  constructor(config: SanitizationConfig = {}) {\n    this.config = {\n      redactKeys: config.redactKeys ?? DEFAULT_REDACT_KEYS,\n      replacer: config.replacer ?? this.defaultReplacer.bind(this),\n      redactedValue: config.redactedValue ?? '[REDACTED]',\n      maxStackLines: config.maxStackLines ?? 10,\n    };\n  }\n\n  /**\n   * Default replacer function\n   *\n   * Redacts sensitive keys and truncates long strings\n   */\n  private defaultReplacer(key: string, value: any): any {\n    // Check if key should be redacted\n    const lowerKey = key.toLowerCase();\n    if (\n      this.config.redactKeys.some((k) => lowerKey.includes(k.toLowerCase()))\n    ) {\n      return this.config.redactedValue;\n    }\n\n    // Truncate very long strings (potential data dumps)\n    if (typeof value === 'string' && value.length > 1000) {\n      return `${value.substring(0, 1000)}... [TRUNCATED]`;\n    }\n\n    return value;\n  }\n\n  /**\n   * Sanitize a value using the configured replacer\n   */\n  private sanitizeValue(value: any, seen = new WeakSet()): any {\n    // Handle null/undefined\n    if (value == null) {\n      return value;\n    }\n\n    // Handle primitives\n    if (typeof value !== 'object') {\n      return value;\n    }\n\n    // Prevent circular reference infinite loops\n    if (seen.has(value)) {\n      return '[CIRCULAR]';\n    }\n    seen.add(value);\n\n    // Handle arrays\n    if (Array.isArray(value)) {\n      return value.map((item) => this.sanitizeValue(item, seen));\n    }\n\n    // Handle Error objects specially\n    if (value instanceof Error) {\n      return {\n        message: value.message,\n        name: value.name,\n        stack: value.stack\n          ? value.stack\n              .split('\\n')\n              .slice(0, this.config.maxStackLines)\n              .join('\\n')\n          : undefined,\n      };\n    }\n\n    // Handle regular objects\n    const sanitized: Record<string, any> = {};\n    for (const [key, val] of Object.entries(value)) {\n      const replacedValue = this.config.replacer(key, val);\n      if (replacedValue !== undefined) {\n        sanitized[key] = this.sanitizeValue(replacedValue, seen);\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Sanitize a signal payload\n   *\n   * @param signal - Signal to sanitize\n   * @returns Sanitized signal (new object, doesn't mutate original)\n   */\n  sanitize(signal: Signal): Signal {\n    return {\n      id: signal.id,\n      objectId: signal.objectId,\n      className: signal.className,\n      method: signal.method,\n      type: signal.type,\n      timestamp: signal.timestamp,\n      ...(signal.step && { step: signal.step }),\n      ...(signal.duration !== undefined && { duration: signal.duration }),\n      ...(signal.args && { args: this.sanitizeValue(signal.args) }),\n      ...(signal.result && { result: this.sanitizeValue(signal.result) }),\n      ...(signal.error && { error: this.sanitizeValue(signal.error) }),\n      ...(signal.metadata && { metadata: this.sanitizeValue(signal.metadata) }),\n    };\n  }\n}\n","/**\n * Signal Bus for Universal Event Distribution\n *\n * This module provides the central SignalBus for distributing signals\n * to registered adapters (logging, metrics, pub/sub, etc.).\n */\n\nimport { makeId } from '@have/utils';\nimport type { ISignalAdapter, Signal } from '@smrt/types';\nimport type { SanitizationConfig } from './sanitizer.js';\nimport { SignalSanitizer } from './sanitizer.js';\n\n/**\n * Central signal distribution bus\n *\n * SignalBus manages adapter registration and signal distribution\n * with fire-and-forget error handling.\n */\nexport class SignalBus {\n  private adapters: ISignalAdapter[] = [];\n  private sanitizer?: SignalSanitizer;\n\n  /**\n   * Create a new SignalBus\n   *\n   * @param options - Configuration options\n   */\n  constructor(options?: { sanitization?: SanitizationConfig | false }) {\n    if (options && options.sanitization !== false && options.sanitization) {\n      this.sanitizer = new SignalSanitizer(options.sanitization);\n    }\n  }\n\n  /**\n   * Register a signal adapter\n   *\n   * @param adapter - Adapter to register\n   */\n  register(adapter: ISignalAdapter): void {\n    this.adapters.push(adapter);\n  }\n\n  /**\n   * Unregister a signal adapter\n   *\n   * Removes the adapter from the bus to prevent memory leaks.\n   *\n   * @param adapter - Adapter to unregister\n   * @returns True if adapter was found and removed\n   */\n  unregister(adapter: ISignalAdapter): boolean {\n    const index = this.adapters.indexOf(adapter);\n    if (index !== -1) {\n      this.adapters.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Clear all registered adapters\n   *\n   * Removes all adapters from the bus. Useful for cleanup or testing.\n   */\n  clear(): void {\n    this.adapters = [];\n  }\n\n  /**\n   * Emit a signal to all registered adapters\n   *\n   * Signals are sanitized (if configured) before being passed to adapters.\n   * Adapters are called in fire-and-forget mode - errors are logged\n   * but don't interrupt the main execution flow.\n   *\n   * @param signal - Signal to emit\n   */\n  async emit(signal: Signal): Promise<void> {\n    // Sanitize signal if configured\n    const sanitizedSignal = this.sanitizer\n      ? this.sanitizer.sanitize(signal)\n      : signal;\n\n    // Fire-and-forget - don't await adapter promises\n    const promises = this.adapters.map(async (adapter, index) => {\n      try {\n        await adapter.handle(sanitizedSignal);\n      } catch (error) {\n        // Log adapter errors with detailed context\n        const adapterName =\n          adapter.constructor.name !== 'Object'\n            ? adapter.constructor.name\n            : `Adapter[${index}]`;\n\n        console.error(`SignalBus: ${adapterName} failed to handle signal`, {\n          signalId: signal.id,\n          signalType: signal.type,\n          className: signal.className,\n          method: signal.method,\n          adapterIndex: index,\n          error:\n            error instanceof Error\n              ? {\n                  message: error.message,\n                  name: error.name,\n                  stack: error.stack,\n                }\n              : error,\n        });\n      }\n    });\n\n    // Don't wait for adapters to complete\n    // They execute asynchronously without blocking the main flow\n    void Promise.allSettled(promises);\n  }\n\n  /**\n   * Generate unique execution ID for method invocations\n   *\n   * @returns Unique execution ID (CUID2)\n   */\n  generateExecutionId(): string {\n    return makeId();\n  }\n\n  /**\n   * Get count of registered adapters\n   *\n   * @returns Number of registered adapters\n   */\n  get adapterCount(): number {\n    return this.adapters.length;\n  }\n}\n","/**\n * SMRT System Tables Schema\n *\n * System tables use _smrt_ prefix to avoid conflicts with user tables.\n * All system tables are created in the same database as user data.\n */\n\n/**\n * Context memory storage\n * Stores remembered context (learned strategies, patterns, selectors) for reuse\n */\nexport const CREATE_SMRT_CONTEXTS_TABLE = `\nCREATE TABLE IF NOT EXISTS _smrt_contexts (\n  id TEXT PRIMARY KEY,\n  owner_class TEXT NOT NULL,\n  owner_id TEXT NOT NULL,\n  scope TEXT NOT NULL,\n  key TEXT NOT NULL,\n  value TEXT,\n  metadata TEXT,\n  version INTEGER DEFAULT 1,\n  confidence REAL DEFAULT 1.0,\n  success_count INTEGER DEFAULT 0,\n  failure_count INTEGER DEFAULT 0,\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  last_used_at DATETIME,\n  expires_at DATETIME,\n  UNIQUE(owner_class, owner_id, scope, key, version)\n);\n\nCREATE INDEX IF NOT EXISTS idx_smrt_contexts_owner\n  ON _smrt_contexts(owner_class, owner_id);\n\nCREATE INDEX IF NOT EXISTS idx_smrt_contexts_scope\n  ON _smrt_contexts(scope);\n\nCREATE INDEX IF NOT EXISTS idx_smrt_contexts_confidence\n  ON _smrt_contexts(confidence);\n\nCREATE INDEX IF NOT EXISTS idx_smrt_contexts_last_used\n  ON _smrt_contexts(last_used_at);\n`;\n\n/**\n * Schema version tracking\n * Records which SMRT framework versions have been applied\n */\nexport const CREATE_SMRT_MIGRATIONS_TABLE = `\nCREATE TABLE IF NOT EXISTS _smrt_migrations (\n  id TEXT PRIMARY KEY,\n  version TEXT NOT NULL UNIQUE,\n  applied_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n  description TEXT,\n  checksum TEXT\n);\n`;\n\n/**\n * Runtime object registry persistence\n * Stores metadata about registered SMRT objects for introspection\n */\nexport const CREATE_SMRT_REGISTRY_TABLE = `\nCREATE TABLE IF NOT EXISTS _smrt_registry (\n  class_name TEXT PRIMARY KEY,\n  schema_version TEXT,\n  fields TEXT,\n  relationships TEXT,\n  config TEXT,\n  manifest TEXT,\n  last_updated DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n`;\n\n/**\n * Signal history/audit log\n * Optional persistence of signals for debugging and auditing\n */\nexport const CREATE_SMRT_SIGNALS_TABLE = `\nCREATE TABLE IF NOT EXISTS _smrt_signals (\n  id TEXT PRIMARY KEY,\n  type TEXT NOT NULL,\n  source_class TEXT,\n  source_id TEXT,\n  target_class TEXT,\n  target_id TEXT,\n  payload TEXT,\n  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE INDEX IF NOT EXISTS idx_smrt_signals_source\n  ON _smrt_signals(source_class, source_id);\n\nCREATE INDEX IF NOT EXISTS idx_smrt_signals_type\n  ON _smrt_signals(type);\n\nCREATE INDEX IF NOT EXISTS idx_smrt_signals_timestamp\n  ON _smrt_signals(timestamp);\n`;\n\n/**\n * All system table creation statements\n */\nexport const ALL_SYSTEM_TABLES = [\n  CREATE_SMRT_CONTEXTS_TABLE,\n  CREATE_SMRT_MIGRATIONS_TABLE,\n  CREATE_SMRT_REGISTRY_TABLE,\n  CREATE_SMRT_SIGNALS_TABLE,\n];\n\n/**\n * Current SMRT system schema version\n */\nexport const SMRT_SCHEMA_VERSION = '1.0.0';\n","import type { AIClientOptions } from '@have/ai';\nimport { type AIClient, getAI } from '@have/ai';\nimport type { FilesystemAdapterOptions } from '@have/files';\nimport { FilesystemAdapter } from '@have/files';\nimport type { LoggerConfig } from '@have/logger';\nimport type { DatabaseInterface } from '@have/sql';\nimport { getDatabase } from '@have/sql';\nimport type { ISignalAdapter } from '@smrt/types';\nimport type {\n  GlobalSignalConfig,\n  MetricsConfig,\n  PubSubConfig,\n} from './config.js';\nimport { config } from './config.js';\nimport { SignalBus } from './signals/bus.js';\nimport { ALL_SYSTEM_TABLES, SMRT_SCHEMA_VERSION } from './system/schema.js';\n\n/**\n * Configuration options for the SmrtClass\n */\nexport interface SmrtClassOptions {\n  /**\n   * Optional custom class name override\n   */\n  _className?: string;\n\n  /**\n   * Database configuration - unified approach matching @have/sql\n   *\n   * Supports three formats:\n   * - String shortcut: 'products.db' (auto-detects database type)\n   * - Config object: { type: 'sqlite', url: 'products.db' }\n   * - DatabaseInterface instance: await getDatabase(...)\n   */\n  db?:\n    | string\n    | {\n        url?: string;\n        type?: 'sqlite' | 'postgres';\n        authToken?: string;\n        [key: string]: any;\n      }\n    | DatabaseInterface;\n\n  /**\n   * Filesystem adapter configuration options\n   */\n  fs?: FilesystemAdapterOptions;\n\n  /**\n   * AI client configuration options or instance\n   */\n  ai?: AIClientOptions | AIClient;\n\n  /**\n   * Logging configuration (overrides global default)\n   */\n  logging?: LoggerConfig;\n\n  /**\n   * Metrics configuration (overrides global default)\n   */\n  metrics?: MetricsConfig;\n\n  /**\n   * Pub/Sub configuration (overrides global default)\n   */\n  pubsub?: PubSubConfig;\n\n  /**\n   * Sanitization configuration (overrides global default)\n   */\n  sanitization?: import('./config.js').GlobalSignalConfig['sanitization'];\n\n  /**\n   * Custom signal configuration (overrides global default)\n   */\n  signals?: {\n    /** Shared signal bus instance */\n    bus?: SignalBus;\n    /** Additional custom adapters */\n    adapters?: ISignalAdapter[];\n  };\n}\n\n/**\n * Foundation class providing core functionality for the SMRT framework\n *\n * SmrtClass provides unified access to database, filesystem, and AI client\n * interfaces. It serves as the foundation for all other classes in the\n * SMRT framework.\n */\nexport class SmrtClass {\n  /**\n   * AI client instance for interacting with AI models\n   */\n  protected _ai!: AIClient;\n\n  /**\n   * Filesystem adapter for file operations\n   */\n  protected _fs!: FilesystemAdapter;\n\n  /**\n   * Database interface for data persistence\n   */\n  protected _db!: DatabaseInterface;\n\n  /**\n   * Class name used for identification\n   */\n  protected _className!: string;\n\n  /**\n   * Signal bus for method execution tracking\n   */\n  protected _signalBus?: SignalBus;\n\n  /**\n   * Adapters registered by this instance (for cleanup)\n   */\n  private _registeredAdapters: ISignalAdapter[] = [];\n\n  /**\n   * Configuration options provided to the class\n   */\n  protected options: SmrtClassOptions;\n\n  /**\n   * Track which databases have had system tables initialized\n   * Key is database connection identifier\n   */\n  private static _systemTablesInitialized = new Set<string>();\n\n  /**\n   * Creates a new SmrtClass instance\n   *\n   * @param options - Configuration options for database, filesystem, and AI clients\n   */\n  constructor(options: SmrtClassOptions = {}) {\n    this.options = options;\n    this._className = this.constructor.name;\n  }\n\n  /**\n   * Initializes database, filesystem, and AI client connections\n   *\n   * This method sets up all required services based on the provided options.\n   * It should be called before using any of the service interfaces.\n   *\n   * @returns Promise that resolves to this instance for chaining\n   */\n  protected async initialize(): Promise<this> {\n    if (this.options.db) {\n      // Handle three db config formats:\n      // 1. String: 'products.db' (shortcut)\n      // 2. Config object: { type: 'sqlite', url: 'products.db' }\n      // 3. DatabaseInterface instance: await getDatabase(...)\n      if (typeof this.options.db === 'string') {\n        // String shortcut - let getDatabase auto-detect type from URL\n        this._db = await getDatabase({ url: this.options.db });\n      } else if ('query' in this.options.db) {\n        // Already a DatabaseInterface instance\n        this._db = this.options.db as DatabaseInterface;\n      } else {\n        // Config object - pass directly to getDatabase\n        this._db = await getDatabase(this.options.db);\n      }\n      await this.ensureSystemTables();\n    }\n    if (this.options.fs) {\n      this._fs = await FilesystemAdapter.create(this.options.fs);\n    }\n    if (this.options.ai) {\n      // Use getAI() factory to support all AI providers (OpenAI, Anthropic, Gemini, etc.)\n      // getAI() returns AIInterface, which we cast to AIClient for backward compatibility\n      this._ai = (await getAI(this.options.ai as any)) as any as AIClient;\n    }\n    await this.initializeSignals();\n    return this;\n  }\n\n  /**\n   * Ensure SMRT system tables exist in the database\n   *\n   * System tables use _smrt_ prefix and store framework metadata:\n   * - _smrt_contexts: Context memory storage for remembered patterns\n   * - _smrt_migrations: Schema version tracking\n   * - _smrt_registry: Object registry persistence\n   * - _smrt_signals: Signal history/audit log\n   *\n   * This method is idempotent and safe to call multiple times.\n   * Tables are only created once per database connection.\n   */\n  private async ensureSystemTables(): Promise<void> {\n    if (!this._db) return;\n\n    // Generate unique key for this database connection\n    const dbKey = this.getDatabaseKey();\n\n    // Skip if already initialized for this database\n    if (SmrtClass._systemTablesInitialized.has(dbKey)) {\n      return;\n    }\n\n    // Create all system tables\n    for (const createTableSQL of ALL_SYSTEM_TABLES) {\n      // Execute as raw SQL (not a parameterized query)\n      await this._db.query(createTableSQL);\n    }\n\n    // Record current schema version\n    const id = crypto.randomUUID();\n    const version = SMRT_SCHEMA_VERSION;\n    const description = 'Initial SMRT system tables';\n    await this._db.execute`\n      INSERT OR IGNORE INTO _smrt_migrations (id, version, description)\n      VALUES (${id}, ${version}, ${description})\n    `;\n\n    // Mark this database as initialized\n    SmrtClass._systemTablesInitialized.add(dbKey);\n  }\n\n  /**\n   * Generate unique identifier for database connection\n   * Used to track which databases have system tables initialized\n   */\n  private getDatabaseKey(): string {\n    if (!this.options.db) {\n      return 'default';\n    }\n\n    // Handle string shortcut\n    if (typeof this.options.db === 'string') {\n      return `sqlite:${this.options.db}`;\n    }\n\n    // Handle DatabaseInterface instance\n    if ('query' in this.options.db) {\n      // Use a generic key for instances (they share the same physical database)\n      return 'instance:database';\n    }\n\n    // Handle config object\n    const dbUrl = this.options.db.url || 'default';\n    const dbType = this.options.db.type || 'sqlite';\n    return `${dbType}:${dbUrl}`;\n  }\n\n  /**\n   * Access system tables through standard database interface\n   * System tables use _smrt_ prefix to avoid conflicts with user tables\n   */\n  protected get systemDb(): DatabaseInterface {\n    return this._db;\n  }\n\n  /**\n   * Initialize signal bus and adapters\n   *\n   * Merges global configuration with instance-specific overrides.\n   * Registers built-in and custom adapters based on configuration.\n   */\n  private async initializeSignals(): Promise<void> {\n    const globalConfig = config.toJSON();\n    const effectiveConfig = this.mergeSignalConfig(globalConfig);\n\n    // If a shared bus is provided, always use it (don't create new adapters)\n    if (this.options.signals?.bus) {\n      this._signalBus = this.options.signals.bus;\n      return;\n    }\n\n    // Otherwise, check if we should initialize signals based on config\n    if (!this.shouldInitializeSignals(effectiveConfig)) {\n      return;\n    }\n\n    this._signalBus = new SignalBus({\n      sanitization: effectiveConfig.sanitization,\n    });\n    await this.registerAdapters(effectiveConfig);\n  }\n\n  /**\n   * Merge global and instance signal configuration\n   *\n   * Instance configuration takes priority over global defaults.\n   *\n   * @param globalConfig - Global configuration from smrt.configure()\n   * @returns Merged configuration\n   */\n  private mergeSignalConfig(\n    globalConfig: GlobalSignalConfig,\n  ): GlobalSignalConfig {\n    return {\n      logging: this.options.logging ?? globalConfig.logging,\n      metrics: this.options.metrics ?? globalConfig.metrics,\n      pubsub: this.options.pubsub ?? globalConfig.pubsub,\n      sanitization: this.options.sanitization ?? globalConfig.sanitization,\n      signals: {\n        bus: this.options.signals?.bus ?? globalConfig.signals?.bus,\n        adapters: [\n          ...(globalConfig.signals?.adapters ?? []),\n          ...(this.options.signals?.adapters ?? []),\n        ],\n      },\n    };\n  }\n\n  /**\n   * Check if signals should be initialized\n   *\n   * Signals are initialized if any adapter is configured.\n   *\n   * @param config - Effective signal configuration\n   * @returns True if signals should be initialized\n   */\n  private shouldInitializeSignals(config: GlobalSignalConfig): boolean {\n    return !!(\n      config.logging !== false ||\n      config.metrics?.enabled ||\n      config.pubsub?.enabled ||\n      config.signals?.adapters?.length\n    );\n  }\n\n  /**\n   * Register signal adapters based on configuration\n   *\n   * @param config - Effective signal configuration\n   */\n  private async registerAdapters(config: GlobalSignalConfig): Promise<void> {\n    if (!this._signalBus) return;\n\n    // Logging adapter (default: enabled with console)\n    if (config.logging !== false) {\n      const { createLogger, LoggerAdapter } = await import('@have/logger');\n      const logger = createLogger(config.logging ?? true);\n      const adapter = new LoggerAdapter(logger);\n      this._signalBus.register(adapter);\n      this._registeredAdapters.push(adapter);\n    }\n\n    // Metrics adapter (default: disabled)\n    if (config.metrics?.enabled) {\n      const { MetricsAdapter } = await import('./adapters/metrics.js');\n      const adapter = new MetricsAdapter();\n      this._signalBus.register(adapter);\n      this._registeredAdapters.push(adapter);\n    }\n\n    // Pub/Sub adapter (default: disabled)\n    if (config.pubsub?.enabled) {\n      const { PubSubAdapter } = await import('./adapters/pubsub.js');\n      const adapter = new PubSubAdapter();\n      this._signalBus.register(adapter);\n      this._registeredAdapters.push(adapter);\n    }\n\n    // Custom adapters\n    if (config.signals?.adapters) {\n      for (const adapter of config.signals.adapters) {\n        this._signalBus.register(adapter);\n        this._registeredAdapters.push(adapter);\n      }\n    }\n  }\n\n  /**\n   * Gets the filesystem adapter instance\n   */\n  get fs() {\n    return this._fs;\n  }\n\n  /**\n   * Gets the database interface instance\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Gets the AI client instance\n   */\n  get ai() {\n    return this._ai;\n  }\n\n  /**\n   * Gets the signal bus instance\n   *\n   * @returns Signal bus if signals are enabled, undefined otherwise\n   */\n  get signalBus(): SignalBus | undefined {\n    return this._signalBus;\n  }\n\n  /**\n   * Cleanup method to prevent memory leaks\n   *\n   * Unregisters all adapters from the signal bus that were registered\n   * by this instance. Call this when the SmrtClass instance is no longer\n   * needed to prevent memory leaks.\n   *\n   * @example\n   * ```typescript\n   * const product = new Product({ name: 'Widget' });\n   * await product.initialize();\n   * // ... use product ...\n   * product.destroy(); // Clean up when done\n   * ```\n   */\n  destroy(): void {\n    // Only unregister adapters if we own the bus (not shared)\n    if (this._signalBus && !this.options.signals?.bus) {\n      for (const adapter of this._registeredAdapters) {\n        this._signalBus.unregister(adapter);\n      }\n      this._registeredAdapters = [];\n    }\n  }\n}\n","import { buildWhere, syncSchema } from '@have/sql';\nimport type { SmrtClassOptions } from './class';\nimport { SmrtClass } from './class';\nimport type { SmrtObject } from './object';\nimport { ObjectRegistry } from './registry';\nimport {\n  fieldsFromClass,\n  formatDataJs,\n  formatDataSql,\n  generateSchema,\n  tableNameFromClass,\n  toCamelCase,\n  toSnakeCase,\n} from './utils';\n\n/**\n * Configuration options for SmrtCollection\n */\nexport interface SmrtCollectionOptions extends SmrtClassOptions {}\n\n/**\n * Collection interface for managing sets of SmrtObjects\n *\n * SmrtCollection provides methods for querying, creating, and managing\n * collections of persistent objects. It handles database setup, schema\n * generation, and provides a fluent interface for querying objects.\n */\nexport class SmrtCollection<ModelType extends SmrtObject> extends SmrtClass {\n  /**\n   * Promise tracking the database setup operation\n   */\n  protected _db_setup_promise: Promise<void> | null = null;\n\n  /**\n   * Gets the class constructor for items in this collection\n   */\n  protected get _itemClass(): (new (\n    options: any,\n  ) => ModelType) & {\n    create(options: any): ModelType | Promise<ModelType>;\n  } {\n    const ctor = this.constructor as {\n      readonly _itemClass?: (new (\n        options: any,\n      ) => ModelType) & {\n        create(options: any): ModelType | Promise<ModelType>;\n      };\n    };\n    if (!ctor._itemClass) {\n      const className = this.constructor.name;\n      const errorMessage = [\n        `Collection \"${className}\" must define a static _itemClass property.`,\n        '',\n        'Example:',\n        `  class ${className} extends SmrtCollection<YourItemClass> {`,\n        '    static readonly _itemClass = YourItemClass;',\n        '  }',\n        '',\n        'Make sure your item class is imported and defined before the collection class.',\n      ].join('\\n');\n\n      throw new Error(errorMessage);\n    }\n    return ctor._itemClass;\n  }\n\n  /**\n   * Static reference to the item class constructor\n   */\n  static readonly _itemClass: any;\n\n  /**\n   * Validates that the collection is properly configured\n   * Call this during development to catch configuration issues early\n   */\n  static validate(): void {\n    if (!SmrtCollection._itemClass) {\n      const className = SmrtCollection.name;\n      const errorMessage = [\n        `Collection \"${className}\" is missing required static _itemClass property.`,\n        '',\n        'Fix by adding:',\n        `  class ${className} extends SmrtCollection<YourItemClass> {`,\n        '    static readonly _itemClass = YourItemClass;',\n        '  }',\n      ].join('\\n');\n      throw new Error(errorMessage);\n    }\n\n    // Validate that _itemClass has required methods\n    if (typeof SmrtCollection._itemClass !== 'function') {\n      throw new Error(\n        `Collection \"${SmrtCollection.name}\"._itemClass must be a constructor function`,\n      );\n    }\n\n    // Check if it has a create method (static or prototype)\n    const hasCreateMethod =\n      typeof SmrtCollection._itemClass.create === 'function' ||\n      typeof SmrtCollection._itemClass.prototype?.create === 'function';\n\n    if (!hasCreateMethod) {\n      console.warn(\n        `Collection \"${SmrtCollection.name}\"._itemClass should have a create() method for optimal functionality`,\n      );\n    }\n  }\n\n  /**\n   * Database table name for this collection\n   */\n  public _tableName!: string;\n\n  /**\n   * Creates a new SmrtCollection instance\n   *\n   * @deprecated Use the static create() factory method instead\n   * @param options - Configuration options\n   */\n  protected constructor(options: SmrtCollectionOptions = {}) {\n    super(options);\n\n    // Auto-register the collection if it's not the base SmrtCollection and has an _itemClass\n    if (\n      this.constructor !== SmrtCollection &&\n      (this.constructor as any)._itemClass\n    ) {\n      const itemClassName = (this.constructor as any)._itemClass.name;\n      ObjectRegistry.registerCollection(itemClassName, this.constructor as any);\n    }\n  }\n\n  /**\n   * Static factory method for creating fully initialized collection instances\n   *\n   * This is the recommended way to create collections. It accepts broad option types\n   * (SmrtClassOptions) and handles option extraction internally, then returns a\n   * fully initialized, ready-to-use collection instance.\n   *\n   * TypeScript Note: Uses InstanceType<T> to preserve subclass types through the\n   * static factory method, ensuring custom collection methods are properly typed.\n   *\n   * @param options - Configuration options (accepts both SmrtClassOptions and SmrtCollectionOptions)\n   * @returns Promise resolving to a fully initialized collection instance\n   *\n   * @example\n   * ```typescript\n   * // Create collection from object options\n   * const collection = await ProductCollection.create(smrtObject.options);\n   *\n   * // Create collection with specific config\n   * const collection = await ProductCollection.create({\n   *   persistence: { type: 'sql', url: 'products.db' },\n   *   ai: { provider: 'openai', apiKey: process.env.OPENAI_API_KEY }\n   * });\n   * ```\n   */\n  static async create<T extends typeof SmrtCollection>(\n    this: T,\n    options: SmrtClassOptions = {},\n  ): Promise<any> {\n    // Extract only collection-compatible options from broader SmrtClassOptions\n    const {\n      _className,\n      db,\n      ai,\n      fs,\n      logging,\n      metrics,\n      pubsub,\n      sanitization,\n      signals,\n    } = options;\n\n    const collectionOptions: SmrtCollectionOptions = {\n      _className,\n      db,\n      ai,\n      fs,\n      logging,\n      metrics,\n      pubsub,\n      sanitization,\n      signals,\n    };\n\n    // Create instance using protected constructor\n    // biome-ignore lint: Must use 'new this()' to create subclass instances\n    const instance = new this(collectionOptions);\n\n    // Perform async initialization\n    await instance.initialize();\n\n    // Return fully initialized instance\n    return instance as any;\n  }\n\n  /**\n   * Initializes the collection, setting up database tables\n   *\n   * @returns Promise that resolves to this instance for chaining\n   */\n  public async initialize(): Promise<this> {\n    await super.initialize();\n\n    // Setup database if configured\n    if (this.options.db) {\n      await this.setupDb();\n    }\n\n    return this;\n  }\n\n  /**\n   * Retrieves a single object from the collection by ID, slug, or custom filter\n   *\n   * @param filter - String ID/slug or object with filter conditions\n   * @returns Promise resolving to the object or null if not found\n   */\n  public async get(filter: string | Record<string, any>) {\n    const where =\n      typeof filter === 'string'\n        ? /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(\n            filter,\n          )\n          ? { id: filter }\n          : { slug: filter, context: '' }\n        : filter;\n\n    const { sql: whereSql, values: whereValues } = buildWhere(where);\n\n    const { rows } = await this.db.query(\n      `SELECT * FROM ${this.tableName} ${whereSql}`,\n      whereValues,\n    );\n    if (!rows?.[0]) {\n      return null;\n    }\n\n    return this.create(formatDataJs(rows[0]));\n  }\n\n  /**\n   * Lists records from the collection with flexible filtering options\n   *\n   * @param options - Query options object\n   * @param options.where - Record of conditions to filter results. Each key can include an operator\n   *                      separated by a space (e.g., 'price >', 'name like'). Default operator is '='.\n   * @param options.offset - Number of records to skip\n   * @param options.limit - Maximum number of records to return\n   * @param options.orderBy - Field(s) to order results by, with optional direction\n   *\n   * @example\n   * ```typescript\n   * // Find active products priced between $100-$200\n   * await collection.list({\n   *   where: {\n   *     'price >': 100,\n   *     'price <=': 200,\n   *     'status': 'active',              // equals operator is default\n   *     'category in': ['A', 'B', 'C'],  // IN operator for arrays\n   *     'name like': '%shirt%',          // LIKE for pattern matching\n   *     'deleted_at !=': null            // exclude deleted items\n   *   },\n   *   limit: 10,\n   *   offset: 0\n   * });\n   *\n   * // Find users matching pattern but not in specific roles\n   * await users.list({\n   *   where: {\n   *     'email like': '%@company.com',\n   *     'active': true,\n   *     'role in': ['guest', 'blocked'],\n   *     'last_login <': lastMonth\n   *   }\n   * });\n   * ```\n   *\n   * @returns Promise resolving to an array of model instances\n   */\n  public async list(options: {\n    where?: Record<string, any>;\n    offset?: number;\n    limit?: number;\n    orderBy?: string | string[];\n    /**\n     * Relationships to eagerly load (avoids N+1 query problem)\n     * @example\n     * ```typescript\n     * // Load orders with their customers pre-loaded\n     * const orders = await orderCollection.list({\n     *   include: ['customerId']\n     * });\n     * // Access customer without additional query\n     * orders[0].getRelated('customerId');\n     * ```\n     */\n    include?: string[];\n  }) {\n    const { where, offset, limit, orderBy } = options;\n    const { sql: whereSql, values: whereValues } = buildWhere(where || {});\n\n    let orderBySql = '';\n    if (orderBy) {\n      orderBySql = ' ORDER BY ';\n      const orderByItems = Array.isArray(orderBy) ? orderBy : [orderBy];\n\n      orderBySql += orderByItems\n        .map((item) => {\n          const [field, direction = 'ASC'] = item.split(' ');\n\n          // Validate field name\n          if (!/^[a-zA-Z0-9_]+$/.test(field)) {\n            throw new Error(`Invalid field name for ordering: ${field}`);\n          }\n\n          // Validate direction\n          const normalizedDirection = direction.toUpperCase();\n          if (normalizedDirection !== 'ASC' && normalizedDirection !== 'DESC') {\n            throw new Error(\n              `Invalid sort direction: ${direction}. Must be ASC or DESC.`,\n            );\n          }\n\n          return `${field} ${normalizedDirection}`;\n        })\n        .join(', ');\n    }\n\n    let limitOffsetSql = '';\n    const limitOffsetValues = [];\n\n    if (limit !== undefined) {\n      limitOffsetSql += ' LIMIT ?';\n      limitOffsetValues.push(limit);\n    }\n\n    if (offset !== undefined) {\n      limitOffsetSql += ' OFFSET ?';\n      limitOffsetValues.push(offset);\n    }\n\n    const result = await this.db.query(\n      `SELECT * FROM ${this.tableName} ${whereSql} ${orderBySql} ${limitOffsetSql}`,\n      [...whereValues, ...limitOffsetValues],\n    );\n    const instances = await Promise.all(\n      result.rows.map((item: object) => this.create(formatDataJs(item))),\n    );\n\n    // Eager load specified relationships\n    if (options.include && options.include.length > 0) {\n      await this.eagerLoadRelationships(instances, options.include);\n    }\n\n    return instances;\n  }\n\n  /**\n   * Eagerly load relationships for a collection of instances\n   *\n   * Optimizes loading by batching queries for foreignKey relationships to avoid N+1 queries.\n   *\n   * @param instances - Array of object instances to load relationships for\n   * @param relationships - Array of relationship field names to load\n   * @private\n   */\n  private async eagerLoadRelationships(\n    instances: ModelType[],\n    relationships: string[],\n  ): Promise<void> {\n    if (instances.length === 0) return;\n\n    for (const fieldName of relationships) {\n      // Get relationship metadata\n      const relationshipMeta = ObjectRegistry.getRelationships(\n        this._itemClass.name,\n      );\n      const relationship = relationshipMeta.find(\n        (r) => r.fieldName === fieldName,\n      );\n\n      if (!relationship) {\n        console.warn(\n          `Relationship ${fieldName} not found on ${this._itemClass.name}, skipping eager load`,\n        );\n        continue;\n      }\n\n      if (relationship.type === 'foreignKey') {\n        // Batch load foreignKey relationships\n        await this.batchLoadForeignKeys(instances, fieldName, relationship);\n      } else if (relationship.type === 'oneToMany') {\n        // Load oneToMany relationships (less optimizable)\n        await this.batchLoadOneToMany(instances, fieldName, relationship);\n      } else if (relationship.type === 'manyToMany') {\n        console.warn(\n          `manyToMany eager loading not yet implemented for ${fieldName}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Batch load foreignKey relationships to avoid N+1 queries\n   *\n   * @param instances - Instances to load relationships for\n   * @param fieldName - Name of the foreignKey field\n   * @param relationship - Relationship metadata\n   * @private\n   */\n  private async batchLoadForeignKeys(\n    instances: ModelType[],\n    fieldName: string,\n    relationship: import('./registry').RelationshipMetadata,\n  ): Promise<void> {\n    // Collect all unique foreign key values\n    const foreignKeyValues = new Set<string>();\n    for (const instance of instances) {\n      const value = instance[fieldName as keyof ModelType];\n      if (value && typeof value === 'string') {\n        foreignKeyValues.add(value);\n      }\n    }\n\n    if (foreignKeyValues.size === 0) return;\n\n    // Get or create cached collection instance\n    let targetCollection: SmrtCollection<any> | undefined;\n    try {\n      targetCollection = await ObjectRegistry.getCollection(\n        relationship.targetClass,\n        this.options,\n      );\n    } catch (error) {\n      console.warn(\n        `Could not get collection for ${relationship.targetClass}:`,\n        error,\n      );\n      return;\n    }\n\n    // Load all related objects in a single query\n    const relatedObjects = await targetCollection.list({\n      where: { 'id in': Array.from(foreignKeyValues) },\n    });\n\n    // Build a map of ID to object for quick lookup\n    const relatedMap = new Map();\n    for (const obj of relatedObjects) {\n      relatedMap.set(obj.id, obj);\n    }\n\n    // Assign loaded objects to instances\n    for (const instance of instances) {\n      const foreignKeyValue = instance[fieldName as keyof ModelType];\n      if (foreignKeyValue && typeof foreignKeyValue === 'string') {\n        const relatedObject = relatedMap.get(foreignKeyValue);\n        if (relatedObject) {\n          // Set in the relationship cache\n          (instance as any)._loadedRelationships.set(fieldName, relatedObject);\n        }\n      }\n    }\n  }\n\n  /**\n   * Batch load oneToMany relationships\n   *\n   * @param instances - Instances to load relationships for\n   * @param fieldName - Name of the oneToMany field\n   * @param relationship - Relationship metadata\n   * @private\n   */\n  private async batchLoadOneToMany(\n    instances: ModelType[],\n    fieldName: string,\n    relationship: import('./registry').RelationshipMetadata,\n  ): Promise<void> {\n    // Find the inverse foreignKey field\n    const inverseRelationships = ObjectRegistry.getInverseRelationships(\n      this._itemClass.name,\n    );\n    const inverseForeignKey = inverseRelationships.find(\n      (r) =>\n        r.sourceClass === relationship.targetClass &&\n        r.type === 'foreignKey' &&\n        r.targetClass === this._itemClass.name,\n    );\n\n    if (!inverseForeignKey) {\n      console.warn(\n        `Could not find inverse foreignKey for oneToMany ${fieldName}`,\n      );\n      return;\n    }\n\n    // Collect all instance IDs\n    const instanceIds = instances\n      .map((i) => i.id)\n      .filter((id): id is string => !!id);\n\n    if (instanceIds.length === 0) return;\n\n    // Get or create cached collection instance\n    let targetCollection: SmrtCollection<any> | undefined;\n    try {\n      targetCollection = await ObjectRegistry.getCollection(\n        relationship.targetClass,\n        this.options,\n      );\n    } catch (error) {\n      console.warn(\n        `Could not get collection for ${relationship.targetClass}:`,\n        error,\n      );\n      return;\n    }\n\n    // Load all related objects in a single query\n    const relatedObjects = await targetCollection.list({\n      where: { [`${inverseForeignKey.fieldName} in`]: instanceIds },\n    });\n\n    // Group related objects by the foreign key value\n    const relatedMap = new Map<string, any[]>();\n    for (const obj of relatedObjects) {\n      const foreignKeyValue = obj[inverseForeignKey.fieldName as any];\n      if (!relatedMap.has(foreignKeyValue)) {\n        relatedMap.set(foreignKeyValue, []);\n      }\n      relatedMap.get(foreignKeyValue)?.push(obj);\n    }\n\n    // Assign loaded objects to instances\n    for (const instance of instances) {\n      const relatedArray = relatedMap.get(instance.id as string) || [];\n      (instance as any)._loadedRelationships.set(fieldName, relatedArray);\n    }\n  }\n\n  /**\n   * Creates a new instance of the collection's item class\n   *\n   * @param options - Options for creating the item\n   * @returns New item instance\n   */\n  public async create(options: any) {\n    const params = {\n      ai: this.options.ai,\n      db: this.options.db,\n      _skipLoad: true, // Don't try to load from DB - this is a new object\n      ...options,\n    };\n\n    // Direct instantiation - all SmrtObject classes support this pattern\n    const instance = new this._itemClass(params);\n    await instance.initialize();\n    return instance;\n  }\n\n  /**\n   * Gets an existing item or creates a new one if it doesn't exist\n   *\n   * @param data - Object data to find or create\n   * @param defaults - Default values to use if creating a new object\n   * @returns Promise resolving to the existing or new object\n   */\n  public async getOrUpsert(data: any, defaults: any = {}) {\n    data = formatDataSql(data);\n    let where: any = {};\n    if (data.id) {\n      where = { id: data.id };\n    } else if (data.slug) {\n      where = { slug: data.slug, context: data.context || '' };\n    } else {\n      where = data;\n    }\n    const existing = await this.get(where);\n    if (existing) {\n      const diff = this.getDiff(existing, data);\n      if (diff) {\n        Object.assign(existing, diff);\n        await existing.save();\n        return existing;\n      }\n      return existing;\n    }\n    const upsertData = { ...defaults, ...data };\n    const upserted = await this.create(upsertData);\n    await upserted.save();\n    return upserted;\n  }\n\n  /**\n   * Gets differences between an existing object and new data\n   *\n   * @param existing - Existing object\n   * @param data - New data\n   * @returns Object containing only the changed fields\n   */\n  getDiff(\n    existing: Record<string, any>,\n    data: Record<string, any>,\n  ): Record<string, any> {\n    const fields = this._itemClass.prototype.getFields();\n    return Object.keys(data).reduce(\n      (acc, key) => {\n        if (fields[key] && existing[key] !== data[key]) {\n          acc[key] = data[key];\n        }\n        return acc;\n      },\n      {} as Record<string, any>,\n    );\n  }\n\n  /**\n   * Sets up the database schema for this collection\n   *\n   * @returns Promise that resolves when setup is complete\n   */\n  async setupDb() {\n    if (this._db_setup_promise) {\n      return this._db_setup_promise;\n    }\n\n    this._db_setup_promise = (async () => {\n      try {\n        const schema = this.generateSchema();\n        console.log(\n          `[Collection] Generated schema for ${this.tableName}:`,\n          schema,\n        );\n        await syncSchema({ db: this.db, schema });\n      } catch (error) {\n        this._db_setup_promise = null; // Allow retry on failure\n        throw error;\n      }\n    })();\n\n    return this._db_setup_promise;\n  }\n\n  /**\n   * Gets field definitions for the collection's item class\n   *\n   * @returns Object containing field definitions\n   */\n  getFields() {\n    return fieldsFromClass(this._itemClass);\n  }\n\n  /**\n   * Generates database schema for the collection's item class\n   *\n   * Leverages ObjectRegistry's cached schema for instant retrieval.\n   *\n   * @returns Schema object for database setup\n   */\n  generateSchema() {\n    // Always generate fresh schema to ensure latest field mapping is used\n    return generateSchema(this._itemClass);\n  }\n\n  /**\n   * Gets the database table name for this collection\n   */\n  get tableName() {\n    if (!this._tableName) {\n      this._tableName = tableNameFromClass(this._itemClass);\n    }\n    return this._tableName;\n  }\n\n  /**\n   * Generates a table name from the collection class name\n   *\n   * @returns Generated table name\n   */\n  generateTableName() {\n    // Convert camelCase/PascalCase to snake_case and pluralize\n    const tableName = this._className\n      // Insert underscore between lower & upper case letters\n      .replace(/([a-z])([A-Z])/g, '$1_$2')\n      // Convert to lowercase\n      .toLowerCase()\n      // Handle basic pluralization rules\n      .replace(/([^s])$/, '$1s')\n      // Handle special cases ending in 'y'\n      .replace(/y$/, 'ies');\n\n    return tableName;\n  }\n\n  /**\n   * Counts records in the collection matching the given filters\n   *\n   * Accepts the same where conditions as list() but ignores limit/offset/orderBy.\n   *\n   * @param options - Query options object\n   * @param options.where - Record of conditions to filter results\n   * @returns Promise resolving to the total count of matching records\n   */\n  public async count(options: { where?: Record<string, any> } = {}) {\n    const { where } = options;\n    const { sql: whereSql, values: whereValues } = buildWhere(where || {});\n\n    const result = await this.db.query(\n      `SELECT COUNT(*) as count FROM ${this.tableName} ${whereSql}`,\n      whereValues,\n    );\n\n    return Number.parseInt(result.rows[0].count, 10);\n  }\n\n  /**\n   * Remember collection-level context\n   *\n   * Stores context applicable to all instances of this collection type.\n   * Use for patterns that apply to the entire collection (e.g., default parsing strategies).\n   *\n   * @param options - Context options\n   * @returns Promise that resolves when context is stored\n   * @example\n   * ```typescript\n   * // Remember a default parsing strategy for all documents\n   * await documentCollection.remember({\n   *   scope: 'parser/default',\n   *   key: 'selector',\n   *   value: { pattern: '.content article' },\n   *   confidence: 0.8\n   * });\n   *\n   * // Update an existing context entry by specifying id\n   * await documentCollection.remember({\n   *   id: 'existing-context-id',\n   *   scope: 'parser/default',\n   *   key: 'selector',\n   *   value: { pattern: '.content main article' },\n   *   confidence: 0.85\n   * });\n   * ```\n   */\n  public async remember(options: {\n    id?: string;\n    scope: string;\n    key: string;\n    value: any;\n    metadata?: any;\n    confidence?: number;\n    version?: number;\n    expiresAt?: Date;\n  }): Promise<void> {\n    if (!this.systemDb) {\n      throw new Error('Database not initialized. Call initialize() first.');\n    }\n\n    const id = options.id || crypto.randomUUID();\n    const now = new Date();\n\n    await this.systemDb.query(\n      `INSERT OR REPLACE INTO _smrt_contexts (\n        id, owner_class, owner_id, scope, key, value, metadata,\n        version, confidence, created_at, updated_at, last_used_at, expires_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      id,\n      this._itemClass.name,\n      '__collection__',\n      options.scope,\n      options.key,\n      JSON.stringify(options.value),\n      options.metadata ? JSON.stringify(options.metadata) : null,\n      options.version ?? 1,\n      options.confidence ?? 1.0,\n      now,\n      now,\n      now,\n      options.expiresAt ?? null,\n    );\n  }\n\n  /**\n   * Recall collection-level context\n   *\n   * Retrieves context that applies to all instances of this collection.\n   *\n   * @param options - Recall options\n   * @returns Promise resolving to the context value or null if not found\n   * @example\n   * ```typescript\n   * // Recall default parsing strategy\n   * const strategy = await documentCollection.recall({\n   *   scope: 'parser/default',\n   *   key: 'selector',\n   *   minConfidence: 0.5\n   * });\n   * ```\n   */\n  public async recall(options: {\n    scope: string;\n    key: string;\n    includeAncestors?: boolean;\n    minConfidence?: number;\n  }): Promise<any | null> {\n    if (!this.systemDb) {\n      throw new Error('Database not initialized. Call initialize() first.');\n    }\n\n    let query = `\n      SELECT value, confidence\n      FROM _smrt_contexts\n      WHERE owner_class = ? AND owner_id = ? AND scope = ? AND key = ?\n    `;\n    const params: any[] = [\n      this._itemClass.name,\n      '__collection__',\n      options.scope,\n      options.key,\n    ];\n\n    if (options.minConfidence !== undefined) {\n      query += ` AND confidence >= ?`;\n      params.push(options.minConfidence);\n    }\n\n    query += ` ORDER BY confidence DESC, version DESC LIMIT 1`;\n\n    const result = await this.systemDb.get(query, params);\n\n    if (result) {\n      return JSON.parse(result.value);\n    }\n\n    // Hierarchical fallback to parent scopes\n    if (options.includeAncestors) {\n      const scopeParts = options.scope.split('/');\n      while (scopeParts.length > 0) {\n        scopeParts.pop();\n        const parentScope = scopeParts.join('/') || 'global';\n\n        const parentResult = await this.recall({\n          ...options,\n          scope: parentScope,\n          includeAncestors: false,\n        });\n\n        if (parentResult) return parentResult;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Recall all collection-level context in a scope\n   *\n   * Returns a Map of key -> value for all collection contexts matching the criteria.\n   *\n   * @param options - Recall options\n   * @returns Promise resolving to Map of key -> value pairs\n   * @example\n   * ```typescript\n   * // Get all default strategies\n   * const strategies = await documentCollection.recallAll({\n   *   scope: 'parser/default',\n   *   minConfidence: 0.5\n   * });\n   * ```\n   */\n  public async recallAll(\n    options: {\n      scope?: string;\n      includeDescendants?: boolean;\n      minConfidence?: number;\n    } = {},\n  ): Promise<Map<string, any>> {\n    if (!this.systemDb) {\n      throw new Error('Database not initialized. Call initialize() first.');\n    }\n\n    const results = new Map<string, any>();\n\n    let query = `\n      SELECT key, value, confidence\n      FROM _smrt_contexts\n      WHERE owner_class = ? AND owner_id = ?\n    `;\n    const params: any[] = [this._itemClass.name, '__collection__'];\n\n    if (options.scope) {\n      if (options.includeDescendants) {\n        query += ` AND (scope = ? OR scope LIKE ?)`;\n        params.push(options.scope, `${options.scope}/%`);\n      } else {\n        query += ` AND scope = ?`;\n        params.push(options.scope);\n      }\n    }\n\n    if (options.minConfidence !== undefined) {\n      query += ` AND confidence >= ?`;\n      params.push(options.minConfidence);\n    }\n\n    query += ` ORDER BY confidence DESC`;\n\n    const { rows } = await this.systemDb.query(query, ...params);\n\n    for (const row of rows) {\n      results.set(row.key, JSON.parse(row.value));\n    }\n\n    return results;\n  }\n\n  /**\n   * Forget collection-level context\n   *\n   * Deletes collection context by scope and key.\n   *\n   * @param options - Context identification\n   * @returns Promise that resolves when context is deleted\n   * @example\n   * ```typescript\n   * // Remove a default strategy\n   * await documentCollection.forget({\n   *   scope: 'parser/default',\n   *   key: 'selector'\n   * });\n   * ```\n   */\n  public async forget(options: { scope: string; key: string }): Promise<void> {\n    if (!this.systemDb) {\n      throw new Error('Database not initialized. Call initialize() first.');\n    }\n\n    await this.systemDb.query(\n      `DELETE FROM _smrt_contexts\n       WHERE owner_class = ? AND owner_id = ? AND scope = ? AND key = ?`,\n      this._itemClass.name,\n      '__collection__',\n      options.scope,\n      options.key,\n    );\n  }\n\n  /**\n   * Forget all collection-level context in a scope\n   *\n   * Deletes all collection contexts matching the scope pattern.\n   *\n   * @param options - Scope options\n   * @returns Promise resolving to number of contexts deleted\n   * @example\n   * ```typescript\n   * // Clear all default strategies\n   * const count = await documentCollection.forgetScope({\n   *   scope: 'parser/default',\n   *   includeDescendants: true\n   * });\n   * ```\n   */\n  public async forgetScope(options: {\n    scope: string;\n    includeDescendants?: boolean;\n  }): Promise<number> {\n    if (!this.systemDb) {\n      throw new Error('Database not initialized. Call initialize() first.');\n    }\n\n    let query = `\n      DELETE FROM _smrt_contexts\n      WHERE owner_class = ? AND owner_id = ?\n    `;\n    const params: any[] = [this._itemClass.name, '__collection__'];\n\n    if (options.includeDescendants) {\n      query += ` AND (scope = ? OR scope LIKE ?)`;\n      params.push(options.scope, `${options.scope}/%`);\n    } else {\n      query += ` AND scope = ?`;\n      params.push(options.scope);\n    }\n\n    const { rowCount } = await this.systemDb.query(query, ...params);\n    return rowCount || 0;\n  }\n}\n"],"names":["config"],"mappings":";;;;;AAmEA,MAAM,WAAW;AAAA,EACf,OAAe;AAAA,EACP,SAA6B;AAAA,IACnC,SAAS;AAAA;AAAA,EAAA;AAAA,EAGH,cAAc;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA,EAKvB,OAAO,cAA0B;AAC/B,QAAI,CAAC,WAAW,UAAU;AACxB,iBAAW,WAAW,IAAI,WAAA;AAAA,IAC5B;AACA,WAAO,WAAW;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAUA,SAAkC;AAC1C,SAAK,SAAS,EAAE,GAAG,KAAK,QAAQ,GAAGA,QAAAA;AAAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAgC;AAC9B,WAAO,EAAE,GAAG,KAAK,OAAA;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,QAAc;AACZ,SAAK,SAAS,EAAE,SAAS,KAAA;AAAA,EAC3B;AACF;AAoCA,SAAS,OAAO,SAAmC;AACjD,aAAW,YAAA,EAAc,UAAU,OAAO;AAC5C;AAKA,OAAO,QAAQ,MAAY;AACzB,aAAW,YAAA,EAAc,MAAA;AAC3B;AAQA,OAAO,SAAS,MAA0B,WAAW,YAAA,EAAc,UAAA;AAQnE,OAAO,WAAW,MAChB,KAAK,UAAU,WAAW,cAAc,UAAA,GAAa,MAAM,CAAC;AClI9D,MAAM,sBAAsB;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAQO,MAAM,gBAAgB;AAAA,EACnB;AAAA,EAER,YAAYA,UAA6B,IAAI;AAC3C,SAAK,SAAS;AAAA,MACZ,YAAYA,QAAO,cAAc;AAAA,MACjC,UAAUA,QAAO,YAAY,KAAK,gBAAgB,KAAK,IAAI;AAAA,MAC3D,eAAeA,QAAO,iBAAiB;AAAA,MACvC,eAAeA,QAAO,iBAAiB;AAAA,IAAA;AAAA,EAE3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,gBAAgB,KAAa,OAAiB;AAEpD,UAAM,WAAW,IAAI,YAAA;AACrB,QACE,KAAK,OAAO,WAAW,KAAK,CAAC,MAAM,SAAS,SAAS,EAAE,YAAA,CAAa,CAAC,GACrE;AACA,aAAO,KAAK,OAAO;AAAA,IACrB;AAGA,QAAI,OAAO,UAAU,YAAY,MAAM,SAAS,KAAM;AACpD,aAAO,GAAG,MAAM,UAAU,GAAG,GAAI,CAAC;AAAA,IACpC;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKQ,cAAc,OAAY,OAAO,oBAAI,WAAgB;AAE3D,QAAI,SAAS,MAAM;AACjB,aAAO;AAAA,IACT;AAGA,QAAI,OAAO,UAAU,UAAU;AAC7B,aAAO;AAAA,IACT;AAGA,QAAI,KAAK,IAAI,KAAK,GAAG;AACnB,aAAO;AAAA,IACT;AACA,SAAK,IAAI,KAAK;AAGd,QAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,aAAO,MAAM,IAAI,CAAC,SAAS,KAAK,cAAc,MAAM,IAAI,CAAC;AAAA,IAC3D;AAGA,QAAI,iBAAiB,OAAO;AAC1B,aAAO;AAAA,QACL,SAAS,MAAM;AAAA,QACf,MAAM,MAAM;AAAA,QACZ,OAAO,MAAM,QACT,MAAM,MACH,MAAM,IAAI,EACV,MAAM,GAAG,KAAK,OAAO,aAAa,EAClC,KAAK,IAAI,IACZ;AAAA,MAAA;AAAA,IAER;AAGA,UAAM,YAAiC,CAAA;AACvC,eAAW,CAAC,KAAK,GAAG,KAAK,OAAO,QAAQ,KAAK,GAAG;AAC9C,YAAM,gBAAgB,KAAK,OAAO,SAAS,KAAK,GAAG;AACnD,UAAI,kBAAkB,QAAW;AAC/B,kBAAU,GAAG,IAAI,KAAK,cAAc,eAAe,IAAI;AAAA,MACzD;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS,QAAwB;AAC/B,WAAO;AAAA,MACL,IAAI,OAAO;AAAA,MACX,UAAU,OAAO;AAAA,MACjB,WAAW,OAAO;AAAA,MAClB,QAAQ,OAAO;AAAA,MACf,MAAM,OAAO;AAAA,MACb,WAAW,OAAO;AAAA,MAClB,GAAI,OAAO,QAAQ,EAAE,MAAM,OAAO,KAAA;AAAA,MAClC,GAAI,OAAO,aAAa,UAAa,EAAE,UAAU,OAAO,SAAA;AAAA,MACxD,GAAI,OAAO,QAAQ,EAAE,MAAM,KAAK,cAAc,OAAO,IAAI,EAAA;AAAA,MACzD,GAAI,OAAO,UAAU,EAAE,QAAQ,KAAK,cAAc,OAAO,MAAM,EAAA;AAAA,MAC/D,GAAI,OAAO,SAAS,EAAE,OAAO,KAAK,cAAc,OAAO,KAAK,EAAA;AAAA,MAC5D,GAAI,OAAO,YAAY,EAAE,UAAU,KAAK,cAAc,OAAO,QAAQ,EAAA;AAAA,IAAE;AAAA,EAE3E;AACF;ACnKO,MAAM,UAAU;AAAA,EACb,WAA6B,CAAA;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOR,YAAY,SAAyD;AACnE,QAAI,WAAW,QAAQ,iBAAiB,SAAS,QAAQ,cAAc;AACrE,WAAK,YAAY,IAAI,gBAAgB,QAAQ,YAAY;AAAA,IAC3D;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,SAA+B;AACtC,SAAK,SAAS,KAAK,OAAO;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAW,SAAkC;AAC3C,UAAM,QAAQ,KAAK,SAAS,QAAQ,OAAO;AAC3C,QAAI,UAAU,IAAI;AAChB,WAAK,SAAS,OAAO,OAAO,CAAC;AAC7B,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAc;AACZ,SAAK,WAAW,CAAA;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,KAAK,QAA+B;AAExC,UAAM,kBAAkB,KAAK,YACzB,KAAK,UAAU,SAAS,MAAM,IAC9B;AAGJ,UAAM,WAAW,KAAK,SAAS,IAAI,OAAO,SAAS,UAAU;AAC3D,UAAI;AACF,cAAM,QAAQ,OAAO,eAAe;AAAA,MACtC,SAAS,OAAO;AAEd,cAAM,cACJ,QAAQ,YAAY,SAAS,WACzB,QAAQ,YAAY,OACpB,WAAW,KAAK;AAEtB,gBAAQ,MAAM,cAAc,WAAW,4BAA4B;AAAA,UACjE,UAAU,OAAO;AAAA,UACjB,YAAY,OAAO;AAAA,UACnB,WAAW,OAAO;AAAA,UAClB,QAAQ,OAAO;AAAA,UACf,cAAc;AAAA,UACd,OACE,iBAAiB,QACb;AAAA,YACE,SAAS,MAAM;AAAA,YACf,MAAM,MAAM;AAAA,YACZ,OAAO,MAAM;AAAA,UAAA,IAEf;AAAA,QAAA,CACP;AAAA,MACH;AAAA,IACF,CAAC;AAID,SAAK,QAAQ,WAAW,QAAQ;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAA8B;AAC5B,WAAO,OAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,eAAuB;AACzB,WAAO,KAAK,SAAS;AAAA,EACvB;AACF;AC3HO,MAAM,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqCnC,MAAM,+BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcrC,MAAM,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBnC,MAAM,4BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBlC,MAAM,oBAAoB;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAKO,MAAM,sBAAsB;ACrB5B,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA,EAIX;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAKF,sBAAwC,CAAA;AAAA;AAAA;AAAA;AAAA,EAKtC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMV,OAAe,2BAA2B,oBAAI,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO9C,YAAY,UAA4B,IAAI;AAC1C,SAAK,UAAU;AACf,SAAK,aAAa,KAAK,YAAY;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAgB,aAA4B;AAC1C,QAAI,KAAK,QAAQ,IAAI;AAKnB,UAAI,OAAO,KAAK,QAAQ,OAAO,UAAU;AAEvC,aAAK,MAAM,MAAM,YAAY,EAAE,KAAK,KAAK,QAAQ,IAAI;AAAA,MACvD,WAAW,WAAW,KAAK,QAAQ,IAAI;AAErC,aAAK,MAAM,KAAK,QAAQ;AAAA,MAC1B,OAAO;AAEL,aAAK,MAAM,MAAM,YAAY,KAAK,QAAQ,EAAE;AAAA,MAC9C;AACA,YAAM,KAAK,mBAAA;AAAA,IACb;AACA,QAAI,KAAK,QAAQ,IAAI;AACnB,WAAK,MAAM,MAAM,kBAAkB,OAAO,KAAK,QAAQ,EAAE;AAAA,IAC3D;AACA,QAAI,KAAK,QAAQ,IAAI;AAGnB,WAAK,MAAO,MAAM,MAAM,KAAK,QAAQ,EAAS;AAAA,IAChD;AACA,UAAM,KAAK,kBAAA;AACX,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAc,qBAAoC;AAChD,QAAI,CAAC,KAAK,IAAK;AAGf,UAAM,QAAQ,KAAK,eAAA;AAGnB,QAAI,UAAU,yBAAyB,IAAI,KAAK,GAAG;AACjD;AAAA,IACF;AAGA,eAAW,kBAAkB,mBAAmB;AAE9C,YAAM,KAAK,IAAI,MAAM,cAAc;AAAA,IACrC;AAGA,UAAM,KAAK,OAAO,WAAA;AAClB,UAAM,UAAU;AAChB,UAAM,cAAc;AACpB,UAAM,KAAK,IAAI;AAAA;AAAA,gBAEH,EAAE,KAAK,OAAO,KAAK,WAAW;AAAA;AAI1C,cAAU,yBAAyB,IAAI,KAAK;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,iBAAyB;AAC/B,QAAI,CAAC,KAAK,QAAQ,IAAI;AACpB,aAAO;AAAA,IACT;AAGA,QAAI,OAAO,KAAK,QAAQ,OAAO,UAAU;AACvC,aAAO,UAAU,KAAK,QAAQ,EAAE;AAAA,IAClC;AAGA,QAAI,WAAW,KAAK,QAAQ,IAAI;AAE9B,aAAO;AAAA,IACT;AAGA,UAAM,QAAQ,KAAK,QAAQ,GAAG,OAAO;AACrC,UAAM,SAAS,KAAK,QAAQ,GAAG,QAAQ;AACvC,WAAO,GAAG,MAAM,IAAI,KAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAc,WAA8B;AAC1C,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,oBAAmC;AAC/C,UAAM,eAAe,OAAO,OAAA;AAC5B,UAAM,kBAAkB,KAAK,kBAAkB,YAAY;AAG3D,QAAI,KAAK,QAAQ,SAAS,KAAK;AAC7B,WAAK,aAAa,KAAK,QAAQ,QAAQ;AACvC;AAAA,IACF;AAGA,QAAI,CAAC,KAAK,wBAAwB,eAAe,GAAG;AAClD;AAAA,IACF;AAEA,SAAK,aAAa,IAAI,UAAU;AAAA,MAC9B,cAAc,gBAAgB;AAAA,IAAA,CAC/B;AACD,UAAM,KAAK,iBAAiB,eAAe;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUQ,kBACN,cACoB;AACpB,WAAO;AAAA,MACL,SAAS,KAAK,QAAQ,WAAW,aAAa;AAAA,MAC9C,SAAS,KAAK,QAAQ,WAAW,aAAa;AAAA,MAC9C,QAAQ,KAAK,QAAQ,UAAU,aAAa;AAAA,MAC5C,cAAc,KAAK,QAAQ,gBAAgB,aAAa;AAAA,MACxD,SAAS;AAAA,QACP,KAAK,KAAK,QAAQ,SAAS,OAAO,aAAa,SAAS;AAAA,QACxD,UAAU;AAAA,UACR,GAAI,aAAa,SAAS,YAAY,CAAA;AAAA,UACtC,GAAI,KAAK,QAAQ,SAAS,YAAY,CAAA;AAAA,QAAC;AAAA,MACzC;AAAA,IACF;AAAA,EAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUQ,wBAAwBA,SAAqC;AACnE,WAAO,CAAC,EACNA,QAAO,YAAY,SACnBA,QAAO,SAAS,WAChBA,QAAO,QAAQ,WACfA,QAAO,SAAS,UAAU;AAAA,EAE9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,iBAAiBA,SAA2C;AACxE,QAAI,CAAC,KAAK,WAAY;AAGtB,QAAIA,QAAO,YAAY,OAAO;AAC5B,YAAM,EAAE,cAAc,kBAAkB,MAAM,OAAO,cAAc;AACnE,YAAM,SAAS,aAAaA,QAAO,WAAW,IAAI;AAClD,YAAM,UAAU,IAAI,cAAc,MAAM;AACxC,WAAK,WAAW,SAAS,OAAO;AAChC,WAAK,oBAAoB,KAAK,OAAO;AAAA,IACvC;AAGA,QAAIA,QAAO,SAAS,SAAS;AAC3B,YAAM,EAAE,eAAA,IAAmB,MAAM,OAAO,uBAAuB;AAC/D,YAAM,UAAU,IAAI,eAAA;AACpB,WAAK,WAAW,SAAS,OAAO;AAChC,WAAK,oBAAoB,KAAK,OAAO;AAAA,IACvC;AAGA,QAAIA,QAAO,QAAQ,SAAS;AAC1B,YAAM,EAAE,cAAA,IAAkB,MAAM,OAAO,sBAAsB;AAC7D,YAAM,UAAU,IAAI,cAAA;AACpB,WAAK,WAAW,SAAS,OAAO;AAChC,WAAK,oBAAoB,KAAK,OAAO;AAAA,IACvC;AAGA,QAAIA,QAAO,SAAS,UAAU;AAC5B,iBAAW,WAAWA,QAAO,QAAQ,UAAU;AAC7C,aAAK,WAAW,SAAS,OAAO;AAChC,aAAK,oBAAoB,KAAK,OAAO;AAAA,MACvC;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,KAAK;AACP,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,KAAK;AACP,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,KAAK;AACP,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,YAAmC;AACrC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,UAAgB;AAEd,QAAI,KAAK,cAAc,CAAC,KAAK,QAAQ,SAAS,KAAK;AACjD,iBAAW,WAAW,KAAK,qBAAqB;AAC9C,aAAK,WAAW,WAAW,OAAO;AAAA,MACpC;AACA,WAAK,sBAAsB,CAAA;AAAA,IAC7B;AAAA,EACF;AACF;AC7YO,MAAM,uBAAqD,UAAU;AAAA;AAAA;AAAA;AAAA,EAIhE,oBAA0C;AAAA;AAAA;AAAA;AAAA,EAKpD,IAAc,aAIZ;AACA,UAAM,OAAO,KAAK;AAOlB,QAAI,CAAC,KAAK,YAAY;AACpB,YAAM,YAAY,KAAK,YAAY;AACnC,YAAM,eAAe;AAAA,QACnB,eAAe,SAAS;AAAA,QACxB;AAAA,QACA;AAAA,QACA,WAAW,SAAS;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA,EACA,KAAK,IAAI;AAEX,YAAM,IAAI,MAAM,YAAY;AAAA,IAC9B;AACA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,OAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhB,OAAO,WAAiB;AACtB,QAAI,CAAC,eAAe,YAAY;AAC9B,YAAM,YAAY,eAAe;AACjC,YAAM,eAAe;AAAA,QACnB,eAAe,SAAS;AAAA,QACxB;AAAA,QACA;AAAA,QACA,WAAW,SAAS;AAAA,QACpB;AAAA,QACA;AAAA,MAAA,EACA,KAAK,IAAI;AACX,YAAM,IAAI,MAAM,YAAY;AAAA,IAC9B;AAGA,QAAI,OAAO,eAAe,eAAe,YAAY;AACnD,YAAM,IAAI;AAAA,QACR,eAAe,eAAe,IAAI;AAAA,MAAA;AAAA,IAEtC;AAGA,UAAM,kBACJ,OAAO,eAAe,WAAW,WAAW,cAC5C,OAAO,eAAe,WAAW,WAAW,WAAW;AAEzD,QAAI,CAAC,iBAAiB;AACpB,cAAQ;AAAA,QACN,eAAe,eAAe,IAAI;AAAA,MAAA;AAAA,IAEtC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQG,YAAY,UAAiC,IAAI;AACzD,UAAM,OAAO;AAGb,QACE,KAAK,gBAAgB,kBACpB,KAAK,YAAoB,YAC1B;AACA,YAAM,gBAAiB,KAAK,YAAoB,WAAW;AAC3D,qBAAe,mBAAmB,eAAe,KAAK,WAAkB;AAAA,IAC1E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BA,aAAa,OAEX,UAA4B,IACd;AAEd,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,IACE;AAEJ,UAAM,oBAA2C;AAAA,MAC/C;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAKF,UAAM,WAAW,IAAI,KAAK,iBAAiB;AAG3C,UAAM,SAAS,WAAA;AAGf,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAa,aAA4B;AACvC,UAAM,MAAM,WAAA;AAGZ,QAAI,KAAK,QAAQ,IAAI;AACnB,YAAM,KAAK,QAAA;AAAA,IACb;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,IAAI,QAAsC;AACrD,UAAM,QACJ,OAAO,WAAW,WACd,kEAAkE;AAAA,MAChE;AAAA,IAAA,IAEA,EAAE,IAAI,WACN,EAAE,MAAM,QAAQ,SAAS,GAAA,IAC3B;AAEN,UAAM,EAAE,KAAK,UAAU,QAAQ,YAAA,IAAgB,WAAW,KAAK;AAE/D,UAAM,EAAE,KAAA,IAAS,MAAM,KAAK,GAAG;AAAA,MAC7B,iBAAiB,KAAK,SAAS,IAAI,QAAQ;AAAA,MAC3C;AAAA,IAAA;AAEF,QAAI,CAAC,OAAO,CAAC,GAAG;AACd,aAAO;AAAA,IACT;AAEA,WAAO,KAAK,OAAO,aAAa,KAAK,CAAC,CAAC,CAAC;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyCA,MAAa,KAAK,SAkBf;AACD,UAAM,EAAE,OAAO,QAAQ,OAAO,YAAY;AAC1C,UAAM,EAAE,KAAK,UAAU,QAAQ,gBAAgB,WAAW,SAAS,EAAE;AAErE,QAAI,aAAa;AACjB,QAAI,SAAS;AACX,mBAAa;AACb,YAAM,eAAe,MAAM,QAAQ,OAAO,IAAI,UAAU,CAAC,OAAO;AAEhE,oBAAc,aACX,IAAI,CAAC,SAAS;AACb,cAAM,CAAC,OAAO,YAAY,KAAK,IAAI,KAAK,MAAM,GAAG;AAGjD,YAAI,CAAC,kBAAkB,KAAK,KAAK,GAAG;AAClC,gBAAM,IAAI,MAAM,oCAAoC,KAAK,EAAE;AAAA,QAC7D;AAGA,cAAM,sBAAsB,UAAU,YAAA;AACtC,YAAI,wBAAwB,SAAS,wBAAwB,QAAQ;AACnE,gBAAM,IAAI;AAAA,YACR,2BAA2B,SAAS;AAAA,UAAA;AAAA,QAExC;AAEA,eAAO,GAAG,KAAK,IAAI,mBAAmB;AAAA,MACxC,CAAC,EACA,KAAK,IAAI;AAAA,IACd;AAEA,QAAI,iBAAiB;AACrB,UAAM,oBAAoB,CAAA;AAE1B,QAAI,UAAU,QAAW;AACvB,wBAAkB;AAClB,wBAAkB,KAAK,KAAK;AAAA,IAC9B;AAEA,QAAI,WAAW,QAAW;AACxB,wBAAkB;AAClB,wBAAkB,KAAK,MAAM;AAAA,IAC/B;AAEA,UAAM,SAAS,MAAM,KAAK,GAAG;AAAA,MAC3B,iBAAiB,KAAK,SAAS,IAAI,QAAQ,IAAI,UAAU,IAAI,cAAc;AAAA,MAC3E,CAAC,GAAG,aAAa,GAAG,iBAAiB;AAAA,IAAA;AAEvC,UAAM,YAAY,MAAM,QAAQ;AAAA,MAC9B,OAAO,KAAK,IAAI,CAAC,SAAiB,KAAK,OAAO,aAAa,IAAI,CAAC,CAAC;AAAA,IAAA;AAInE,QAAI,QAAQ,WAAW,QAAQ,QAAQ,SAAS,GAAG;AACjD,YAAM,KAAK,uBAAuB,WAAW,QAAQ,OAAO;AAAA,IAC9D;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAc,uBACZ,WACA,eACe;AACf,QAAI,UAAU,WAAW,EAAG;AAE5B,eAAW,aAAa,eAAe;AAErC,YAAM,mBAAmB,eAAe;AAAA,QACtC,KAAK,WAAW;AAAA,MAAA;AAElB,YAAM,eAAe,iBAAiB;AAAA,QACpC,CAAC,MAAM,EAAE,cAAc;AAAA,MAAA;AAGzB,UAAI,CAAC,cAAc;AACjB,gBAAQ;AAAA,UACN,gBAAgB,SAAS,iBAAiB,KAAK,WAAW,IAAI;AAAA,QAAA;AAEhE;AAAA,MACF;AAEA,UAAI,aAAa,SAAS,cAAc;AAEtC,cAAM,KAAK,qBAAqB,WAAW,WAAW,YAAY;AAAA,MACpE,WAAW,aAAa,SAAS,aAAa;AAE5C,cAAM,KAAK,mBAAmB,WAAW,WAAW,YAAY;AAAA,MAClE,WAAW,aAAa,SAAS,cAAc;AAC7C,gBAAQ;AAAA,UACN,oDAAoD,SAAS;AAAA,QAAA;AAAA,MAEjE;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAc,qBACZ,WACA,WACA,cACe;AAEf,UAAM,uCAAuB,IAAA;AAC7B,eAAW,YAAY,WAAW;AAChC,YAAM,QAAQ,SAAS,SAA4B;AACnD,UAAI,SAAS,OAAO,UAAU,UAAU;AACtC,yBAAiB,IAAI,KAAK;AAAA,MAC5B;AAAA,IACF;AAEA,QAAI,iBAAiB,SAAS,EAAG;AAGjC,QAAI;AACJ,QAAI;AACF,yBAAmB,MAAM,eAAe;AAAA,QACtC,aAAa;AAAA,QACb,KAAK;AAAA,MAAA;AAAA,IAET,SAAS,OAAO;AACd,cAAQ;AAAA,QACN,gCAAgC,aAAa,WAAW;AAAA,QACxD;AAAA,MAAA;AAEF;AAAA,IACF;AAGA,UAAM,iBAAiB,MAAM,iBAAiB,KAAK;AAAA,MACjD,OAAO,EAAE,SAAS,MAAM,KAAK,gBAAgB,EAAA;AAAA,IAAE,CAChD;AAGD,UAAM,iCAAiB,IAAA;AACvB,eAAW,OAAO,gBAAgB;AAChC,iBAAW,IAAI,IAAI,IAAI,GAAG;AAAA,IAC5B;AAGA,eAAW,YAAY,WAAW;AAChC,YAAM,kBAAkB,SAAS,SAA4B;AAC7D,UAAI,mBAAmB,OAAO,oBAAoB,UAAU;AAC1D,cAAM,gBAAgB,WAAW,IAAI,eAAe;AACpD,YAAI,eAAe;AAEhB,mBAAiB,qBAAqB,IAAI,WAAW,aAAa;AAAA,QACrE;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAc,mBACZ,WACA,WACA,cACe;AAEf,UAAM,uBAAuB,eAAe;AAAA,MAC1C,KAAK,WAAW;AAAA,IAAA;AAElB,UAAM,oBAAoB,qBAAqB;AAAA,MAC7C,CAAC,MACC,EAAE,gBAAgB,aAAa,eAC/B,EAAE,SAAS,gBACX,EAAE,gBAAgB,KAAK,WAAW;AAAA,IAAA;AAGtC,QAAI,CAAC,mBAAmB;AACtB,cAAQ;AAAA,QACN,mDAAmD,SAAS;AAAA,MAAA;AAE9D;AAAA,IACF;AAGA,UAAM,cAAc,UACjB,IAAI,CAAC,MAAM,EAAE,EAAE,EACf,OAAO,CAAC,OAAqB,CAAC,CAAC,EAAE;AAEpC,QAAI,YAAY,WAAW,EAAG;AAG9B,QAAI;AACJ,QAAI;AACF,yBAAmB,MAAM,eAAe;AAAA,QACtC,aAAa;AAAA,QACb,KAAK;AAAA,MAAA;AAAA,IAET,SAAS,OAAO;AACd,cAAQ;AAAA,QACN,gCAAgC,aAAa,WAAW;AAAA,QACxD;AAAA,MAAA;AAEF;AAAA,IACF;AAGA,UAAM,iBAAiB,MAAM,iBAAiB,KAAK;AAAA,MACjD,OAAO,EAAE,CAAC,GAAG,kBAAkB,SAAS,KAAK,GAAG,YAAA;AAAA,IAAY,CAC7D;AAGD,UAAM,iCAAiB,IAAA;AACvB,eAAW,OAAO,gBAAgB;AAChC,YAAM,kBAAkB,IAAI,kBAAkB,SAAgB;AAC9D,UAAI,CAAC,WAAW,IAAI,eAAe,GAAG;AACpC,mBAAW,IAAI,iBAAiB,EAAE;AAAA,MACpC;AACA,iBAAW,IAAI,eAAe,GAAG,KAAK,GAAG;AAAA,IAC3C;AAGA,eAAW,YAAY,WAAW;AAChC,YAAM,eAAe,WAAW,IAAI,SAAS,EAAY,KAAK,CAAA;AAC7D,eAAiB,qBAAqB,IAAI,WAAW,YAAY;AAAA,IACpE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,OAAO,SAAc;AAChC,UAAM,SAAS;AAAA,MACb,IAAI,KAAK,QAAQ;AAAA,MACjB,IAAI,KAAK,QAAQ;AAAA,MACjB,WAAW;AAAA;AAAA,MACX,GAAG;AAAA,IAAA;AAIL,UAAM,WAAW,IAAI,KAAK,WAAW,MAAM;AAC3C,UAAM,SAAS,WAAA;AACf,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,YAAY,MAAW,WAAgB,IAAI;AACtD,WAAO,cAAc,IAAI;AACzB,QAAI,QAAa,CAAA;AACjB,QAAI,KAAK,IAAI;AACX,cAAQ,EAAE,IAAI,KAAK,GAAA;AAAA,IACrB,WAAW,KAAK,MAAM;AACpB,cAAQ,EAAE,MAAM,KAAK,MAAM,SAAS,KAAK,WAAW,GAAA;AAAA,IACtD,OAAO;AACL,cAAQ;AAAA,IACV;AACA,UAAM,WAAW,MAAM,KAAK,IAAI,KAAK;AACrC,QAAI,UAAU;AACZ,YAAM,OAAO,KAAK,QAAQ,UAAU,IAAI;AACxC,UAAI,MAAM;AACR,eAAO,OAAO,UAAU,IAAI;AAC5B,cAAM,SAAS,KAAA;AACf,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AACA,UAAM,aAAa,EAAE,GAAG,UAAU,GAAG,KAAA;AACrC,UAAM,WAAW,MAAM,KAAK,OAAO,UAAU;AAC7C,UAAM,SAAS,KAAA;AACf,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,QACE,UACA,MACqB;AACrB,UAAM,SAAS,KAAK,WAAW,UAAU,UAAA;AACzC,WAAO,OAAO,KAAK,IAAI,EAAE;AAAA,MACvB,CAAC,KAAK,QAAQ;AACZ,YAAI,OAAO,GAAG,KAAK,SAAS,GAAG,MAAM,KAAK,GAAG,GAAG;AAC9C,cAAI,GAAG,IAAI,KAAK,GAAG;AAAA,QACrB;AACA,eAAO;AAAA,MACT;AAAA,MACA,CAAA;AAAA,IAAC;AAAA,EAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,mBAAmB;AAC1B,aAAO,KAAK;AAAA,IACd;AAEA,SAAK,qBAAqB,YAAY;AACpC,UAAI;AACF,cAAM,SAAS,KAAK,eAAA;AACpB,gBAAQ;AAAA,UACN,qCAAqC,KAAK,SAAS;AAAA,UACnD;AAAA,QAAA;AAEF,cAAM,WAAW,EAAE,IAAI,KAAK,IAAI,QAAQ;AAAA,MAC1C,SAAS,OAAO;AACd,aAAK,oBAAoB;AACzB,cAAM;AAAA,MACR;AAAA,IACF,GAAA;AAEA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY;AACV,WAAO,gBAAgB,KAAK,UAAU;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB;AAEf,WAAO,eAAe,KAAK,UAAU;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,YAAY;AACd,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,mBAAmB,KAAK,UAAU;AAAA,IACtD;AACA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,oBAAoB;AAElB,UAAM,YAAY,KAAK,WAEpB,QAAQ,mBAAmB,OAAO,EAElC,YAAA,EAEA,QAAQ,WAAW,KAAK,EAExB,QAAQ,MAAM,KAAK;AAEtB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAa,MAAM,UAA2C,IAAI;AAChE,UAAM,EAAE,UAAU;AAClB,UAAM,EAAE,KAAK,UAAU,QAAQ,gBAAgB,WAAW,SAAS,EAAE;AAErE,UAAM,SAAS,MAAM,KAAK,GAAG;AAAA,MAC3B,iCAAiC,KAAK,SAAS,IAAI,QAAQ;AAAA,MAC3D;AAAA,IAAA;AAGF,WAAO,OAAO,SAAS,OAAO,KAAK,CAAC,EAAE,OAAO,EAAE;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8BA,MAAa,SAAS,SASJ;AAChB,QAAI,CAAC,KAAK,UAAU;AAClB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,UAAM,KAAK,QAAQ,MAAM,OAAO,WAAA;AAChC,UAAM,0BAAU,KAAA;AAEhB,UAAM,KAAK,SAAS;AAAA,MAClB;AAAA;AAAA;AAAA;AAAA,MAIA;AAAA,MACA,KAAK,WAAW;AAAA,MAChB;AAAA,MACA,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,KAAK,UAAU,QAAQ,KAAK;AAAA,MAC5B,QAAQ,WAAW,KAAK,UAAU,QAAQ,QAAQ,IAAI;AAAA,MACtD,QAAQ,WAAW;AAAA,MACnB,QAAQ,cAAc;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ,aAAa;AAAA,IAAA;AAAA,EAEzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,MAAa,OAAO,SAKI;AACtB,QAAI,CAAC,KAAK,UAAU;AAClB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,QAAI,QAAQ;AAAA;AAAA;AAAA;AAAA;AAKZ,UAAM,SAAgB;AAAA,MACpB,KAAK,WAAW;AAAA,MAChB;AAAA,MACA,QAAQ;AAAA,MACR,QAAQ;AAAA,IAAA;AAGV,QAAI,QAAQ,kBAAkB,QAAW;AACvC,eAAS;AACT,aAAO,KAAK,QAAQ,aAAa;AAAA,IACnC;AAEA,aAAS;AAET,UAAM,SAAS,MAAM,KAAK,SAAS,IAAI,OAAO,MAAM;AAEpD,QAAI,QAAQ;AACV,aAAO,KAAK,MAAM,OAAO,KAAK;AAAA,IAChC;AAGA,QAAI,QAAQ,kBAAkB;AAC5B,YAAM,aAAa,QAAQ,MAAM,MAAM,GAAG;AAC1C,aAAO,WAAW,SAAS,GAAG;AAC5B,mBAAW,IAAA;AACX,cAAM,cAAc,WAAW,KAAK,GAAG,KAAK;AAE5C,cAAM,eAAe,MAAM,KAAK,OAAO;AAAA,UACrC,GAAG;AAAA,UACH,OAAO;AAAA,UACP,kBAAkB;AAAA,QAAA,CACnB;AAED,YAAI,aAAc,QAAO;AAAA,MAC3B;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAa,UACX,UAII,IACuB;AAC3B,QAAI,CAAC,KAAK,UAAU;AAClB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,UAAM,8BAAc,IAAA;AAEpB,QAAI,QAAQ;AAAA;AAAA;AAAA;AAAA;AAKZ,UAAM,SAAgB,CAAC,KAAK,WAAW,MAAM,gBAAgB;AAE7D,QAAI,QAAQ,OAAO;AACjB,UAAI,QAAQ,oBAAoB;AAC9B,iBAAS;AACT,eAAO,KAAK,QAAQ,OAAO,GAAG,QAAQ,KAAK,IAAI;AAAA,MACjD,OAAO;AACL,iBAAS;AACT,eAAO,KAAK,QAAQ,KAAK;AAAA,MAC3B;AAAA,IACF;AAEA,QAAI,QAAQ,kBAAkB,QAAW;AACvC,eAAS;AACT,aAAO,KAAK,QAAQ,aAAa;AAAA,IACnC;AAEA,aAAS;AAET,UAAM,EAAE,SAAS,MAAM,KAAK,SAAS,MAAM,OAAO,GAAG,MAAM;AAE3D,eAAW,OAAO,MAAM;AACtB,cAAQ,IAAI,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,CAAC;AAAA,IAC5C;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAa,OAAO,SAAwD;AAC1E,QAAI,CAAC,KAAK,UAAU;AAClB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,UAAM,KAAK,SAAS;AAAA,MAClB;AAAA;AAAA,MAEA,KAAK,WAAW;AAAA,MAChB;AAAA,MACA,QAAQ;AAAA,MACR,QAAQ;AAAA,IAAA;AAAA,EAEZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAa,YAAY,SAGL;AAClB,QAAI,CAAC,KAAK,UAAU;AAClB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,QAAI,QAAQ;AAAA;AAAA;AAAA;AAIZ,UAAM,SAAgB,CAAC,KAAK,WAAW,MAAM,gBAAgB;AAE7D,QAAI,QAAQ,oBAAoB;AAC9B,eAAS;AACT,aAAO,KAAK,QAAQ,OAAO,GAAG,QAAQ,KAAK,IAAI;AAAA,IACjD,OAAO;AACL,eAAS;AACT,aAAO,KAAK,QAAQ,KAAK;AAAA,IAC3B;AAEA,UAAM,EAAE,aAAa,MAAM,KAAK,SAAS,MAAM,OAAO,GAAG,MAAM;AAC/D,WAAO,YAAY;AAAA,EACrB;AACF;;;;;"}