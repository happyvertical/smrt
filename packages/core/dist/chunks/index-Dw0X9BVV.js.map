{"version":3,"file":"index-Dw0X9BVV.js","sources":["../../src/prebuild/index.ts"],"sourcesContent":["/**\n * Pre-build utilities for generating TypeScript declarations\n * Solves virtual module resolution by creating physical .d.ts files\n */\n\nimport * as fs from 'node:fs';\nimport * as path from 'node:path';\nimport type { SmartObjectManifest } from '../scanner/types';\n\nexport interface PrebuildOptions {\n  /** Path to manifest file or manifest object */\n  manifest: string | SmartObjectManifest;\n  /** Output directory for generated types */\n  outDir: string;\n  /** Include virtual module declarations */\n  includeVirtualModules?: boolean;\n  /** Include object type definitions */\n  includeObjectTypes?: boolean;\n  /** Project root path for resolving relative paths */\n  projectRoot?: string;\n}\n\n/**\n * Generate TypeScript declaration files from SMRT manifest\n */\nexport async function generateDeclarations(\n  options: PrebuildOptions,\n): Promise<void> {\n  const {\n    manifest: manifestInput,\n    outDir,\n    includeVirtualModules = true,\n    includeObjectTypes = true,\n    projectRoot = process.cwd(),\n  } = options;\n\n  // Load manifest\n  const manifest: SmartObjectManifest =\n    typeof manifestInput === 'string'\n      ? JSON.parse(fs.readFileSync(manifestInput, 'utf-8'))\n      : manifestInput;\n\n  // Ensure output directory exists\n  const fullOutDir = path.isAbsolute(outDir)\n    ? outDir\n    : path.join(projectRoot, outDir);\n  fs.mkdirSync(fullOutDir, { recursive: true });\n\n  console.log(`[smrt:prebuild] Generating declarations to ${fullOutDir}`);\n\n  if (includeObjectTypes) {\n    await generateObjectTypeDeclarations(manifest, fullOutDir);\n  }\n\n  if (includeVirtualModules) {\n    await generateVirtualModuleDeclarations(manifest, fullOutDir);\n  }\n\n  console.log(\n    `[smrt:prebuild] Generated declarations for ${Object.keys(manifest.objects).length} SMRT objects`,\n  );\n}\n\n/**\n * Generate TypeScript interfaces for SMRT objects\n */\nasync function generateObjectTypeDeclarations(\n  manifest: SmartObjectManifest,\n  outDir: string,\n): Promise<void> {\n  const interfaces: string[] = [];\n\n  // Generate interfaces for each discovered SMRT object\n  for (const [_objectName, objectMeta] of Object.entries(manifest.objects)) {\n    const fields = objectMeta.fields || {};\n    const propertyLines: string[] = [];\n\n    // Add standard SmrtObject properties\n    propertyLines.push('  id?: string;');\n    propertyLines.push('  created_at?: string;');\n    propertyLines.push('  updated_at?: string;');\n\n    // Add object-specific properties\n    for (const [fieldName, fieldDef] of Object.entries(fields)) {\n      const type = mapFieldTypeToTypeScript(fieldDef.type);\n      const optional = !fieldDef.required ? '?' : '';\n      propertyLines.push(`  ${fieldName}${optional}: ${type};`);\n    }\n\n    const interfaceDef = `export interface ${objectMeta.className}Data {\n${propertyLines.join('\\n')}\n}`;\n    interfaces.push(interfaceDef);\n  }\n\n  // Write object types file\n  const objectTypesContent = `/**\n * Auto-generated TypeScript interfaces for SMRT objects\n * Generated at build time from @smrt() decorated classes\n *\n * DO NOT EDIT THIS FILE MANUALLY\n */\n\n${interfaces.join('\\n\\n')}\n`;\n\n  fs.writeFileSync(path.join(outDir, 'smrt-objects.d.ts'), objectTypesContent);\n}\n\n/**\n * Generate virtual module declarations\n */\nasync function generateVirtualModuleDeclarations(\n  manifest: SmartObjectManifest,\n  outDir: string,\n): Promise<void> {\n  // Generate manifest module declaration\n  const manifestDeclaration = `/**\n * Auto-generated manifest module declaration\n */\ndeclare module '@smrt/manifest' {\n  export interface SmrtObjectField {\n    type: string;\n    required?: boolean;\n    default?: any;\n  }\n\n  export interface SmrtObjectMethod {\n    name: string;\n    parameters: Array<{\n      name: string;\n      type: string;\n      optional?: boolean;\n      default?: any;\n    }>;\n    returnType: string;\n    async: boolean;\n    isStatic: boolean;\n    isPublic: boolean;\n  }\n\n  export interface SmrtObjectDefinition {\n    name: string;\n    className: string;\n    collection: string;\n    filePath: string;\n    fields: Record<string, SmrtObjectField>;\n    methods: Record<string, SmrtObjectMethod>;\n    decoratorConfig: any;\n    extends?: string;\n  }\n\n  export interface SmrtManifest {\n    version: string;\n    timestamp: number;\n    objects: Record<string, SmrtObjectDefinition>;\n  }\n\n  export const manifest: SmrtManifest;\n  export default manifest;\n}`;\n\n  // Generate client module declaration\n  const collectionNames = [\n    ...new Set(Object.values(manifest.objects).map((obj) => obj.collection)),\n  ];\n\n  const apiClientInterface = collectionNames\n    .map((collection) => {\n      const dataType = Object.entries(manifest.objects).find(\n        ([, obj]) => obj.collection === collection,\n      )?.[1].className;\n      const interfaceName = dataType ? `${dataType}Data` : 'any';\n      return `    ${collection}: CrudOperations<${interfaceName}>;`;\n    })\n    .join('\\n');\n\n  const clientDeclaration = `/**\n * Auto-generated API client module declaration\n */\ndeclare module '@smrt/client' {\n  export interface ApiResponse<T = any> {\n    id?: string;\n    data?: T;\n    error?: string;\n    message?: string;\n  }\n\n  export interface CrudOperations<T = any> {\n    list(params?: Record<string, any>): Promise<ApiResponse<T[]>>;\n    get(id: string): Promise<ApiResponse<T>>;\n    create(data: Partial<T>): Promise<ApiResponse<T>>;\n    update(id: string, data: Partial<T>): Promise<ApiResponse<T>>;\n    delete(id: string): Promise<boolean>;\n  }\n\n  export interface ApiClient {\n${apiClientInterface}\n  }\n\n  export function createClient(basePath?: string): ApiClient;\n  export default createClient;\n}`;\n\n  // Generate routes module declaration\n  const routesDeclaration = `/**\n * Auto-generated routes module declaration\n */\ndeclare module '@smrt/routes' {\n  export interface RouteApp {\n    get(path: string, handler: (req: any, res: any) => void): void;\n    post(path: string, handler: (req: any, res: any) => void): void;\n    put(path: string, handler: (req: any, res: any) => void): void;\n    delete(path: string, handler: (req: any, res: any) => void): void;\n  }\n\n  export function setupRoutes(app: RouteApp): void;\n  export default setupRoutes;\n}`;\n\n  // Generate MCP module declaration\n  const mcpDeclaration = `/**\n * Auto-generated MCP module declaration\n */\ndeclare module '@smrt/mcp' {\n  export interface McpTool {\n    name: string;\n    description: string;\n    inputSchema: {\n      type: string;\n      properties: Record<string, any>;\n      required?: string[];\n    };\n  }\n\n  export const tools: McpTool[];\n  export function createMCPServer(): {\n    name: string;\n    version: string;\n    tools: McpTool[]\n  };\n  export default createMCPServer;\n}`;\n\n  // Generate types module declaration with object imports\n  const objectImports = Object.values(manifest.objects)\n    .map(\n      (obj) =>\n        `  export type ${obj.className}Data = import('./smrt-objects').${obj.className}Data;`,\n    )\n    .join('\\n');\n\n  const typesDeclaration = `/**\n * Auto-generated types module declaration\n */\ndeclare module '@smrt/types' {\n${objectImports}\n\n  export interface Request {\n    params: Record<string, string>;\n    query: Record<string, any>;\n    json(): Promise<any>;\n  }\n\n  export interface Response {\n    json(data: any, init?: { status?: number }): Response;\n    status(code: number): Response;\n  }\n}`;\n\n  // Write all virtual module declarations\n  fs.writeFileSync(\n    path.join(outDir, 'smrt-manifest.d.ts'),\n    manifestDeclaration,\n  );\n  fs.writeFileSync(path.join(outDir, 'smrt-client.d.ts'), clientDeclaration);\n  fs.writeFileSync(path.join(outDir, 'smrt-routes.d.ts'), routesDeclaration);\n  fs.writeFileSync(path.join(outDir, 'smrt-mcp.d.ts'), mcpDeclaration);\n  fs.writeFileSync(path.join(outDir, 'smrt-types.d.ts'), typesDeclaration);\n}\n\n/**\n * Map SMRT field types to TypeScript types\n */\nfunction mapFieldTypeToTypeScript(smrtType: string): string {\n  switch (smrtType) {\n    case 'text':\n      return 'string';\n    case 'decimal':\n    case 'integer':\n      return 'number';\n    case 'boolean':\n      return 'boolean';\n    case 'datetime':\n      return 'string | Date';\n    case 'json':\n      return 'any';\n    case 'foreignKey':\n      return 'string';\n    default:\n      return 'any';\n  }\n}\n\n/**\n * CLI command for generating declarations\n */\nexport async function generateDeclarationsFromCLI(\n  args: string[],\n): Promise<void> {\n  const manifestPath = args[0];\n  const outDir = args[1] || 'src/types/generated';\n\n  if (!manifestPath) {\n    console.error('Usage: generate-declarations <manifest-path> [output-dir]');\n    process.exit(1);\n  }\n\n  if (!fs.existsSync(manifestPath)) {\n    console.error(`Manifest file not found: ${manifestPath}`);\n    process.exit(1);\n  }\n\n  await generateDeclarations({\n    manifest: manifestPath,\n    outDir,\n  });\n}\n"],"names":[],"mappings":"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"}