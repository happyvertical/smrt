{"version":3,"file":"index.js","sources":["../src/agent.ts"],"sourcesContent":["import { SmrtObject, type SmrtObjectOptions } from '@have/smrt';\nimport { createLogger, type Logger } from '@have/logger';\nimport type { AgentStatusType } from './types.js';\n\n/**\n * Base Agent class for building autonomous actors in the SMRT ecosystem\n *\n * Agents are SmrtObjects that perform specific tasks with:\n * - Status tracking (idle, initializing, running, error, shutdown)\n * - Configuration management via @have/config\n * - Structured logging via @have/logger\n * - Lifecycle hooks (initialize, validate, run, shutdown)\n * - Automatic signal handling for graceful shutdown\n *\n * Agents can define their own properties for state management - since they extend\n * SmrtObject, any properties defined will be automatically persisted to the database.\n *\n * **Important**: Extending classes must add the `@smrt()` decorator themselves.\n *\n * @example\n * ```typescript\n * import { Agent } from '@have/agents';\n * import { getModuleConfig } from '@have/config';\n * import { smrt } from '@have/smrt';\n *\n * @smrt()\n * class MyAgent extends Agent {\n *   protected config = getModuleConfig('my-agent', {\n *     cronSchedule: '0 2 * * *',\n *     maxRetries: 3\n *   });\n *\n *   // Define your own state properties (automatically persisted)\n *   lastCrawl: Date | null = null;\n *   itemsProcessed: number = 0;\n *\n *   async validate(): Promise<void> {\n *     if (!this.config.cronSchedule) {\n *       throw new Error('cronSchedule is required');\n *     }\n *   }\n *\n *   async run(): Promise<void> {\n *     // Agent logic here\n *     this.itemsProcessed = 42;\n *     this.lastCrawl = new Date();\n *     await this.save(); // Persist state\n *   }\n * }\n *\n * const agent = new MyAgent({ name: 'my-agent' });\n * await agent.execute();\n * ```\n */\nexport abstract class Agent extends SmrtObject {\n  /**\n   * Current agent status\n   */\n  status: AgentStatusType = 'idle';\n\n  /**\n   * Structured logger instance\n   * Created with agent's class name as context\n   */\n  protected logger: Logger;\n\n  /**\n   * Agent configuration\n   * Must be defined by extending classes using getModuleConfig()\n   *\n   * @example\n   * ```typescript\n   * protected config = getModuleConfig('my-agent', {\n   *   cronSchedule: '0 0 * * *',\n   *   maxRetries: 3\n   * });\n   * ```\n   */\n  protected abstract config: unknown;\n\n  /**\n   * Signal handlers for graceful shutdown\n   */\n  private signalHandlers: Map<NodeJS.Signals, () => void> = new Map();\n\n  /**\n   * Creates a new Agent instance\n   *\n   * @param options - Configuration options including identifiers and metadata\n   */\n  constructor(options: SmrtObjectOptions = {}) {\n    super(options);\n    this.logger = createLogger({ level: 'info' });\n  }\n\n  /**\n   * Initialize the agent\n   * Sets status to 'initializing' and sets up signal handlers\n   *\n   * Override to perform setup after construction, but always call super.initialize()\n   *\n   * @example\n   * ```typescript\n   * async initialize(): Promise<void> {\n   *   await super.initialize();\n   *   // Custom initialization logic\n   * }\n   * ```\n   */\n  async initialize(): Promise<this> {\n    await super.initialize();\n    this.status = 'initializing';\n    this.logger.info('Agent initializing');\n\n    // Setup signal handlers for graceful shutdown\n    this.setupSignalHandlers();\n\n    return this;\n  }\n\n  /**\n   * Set up signal handlers for graceful shutdown\n   * Handles SIGTERM and SIGINT\n   */\n  private setupSignalHandlers(): void {\n    const signals: NodeJS.Signals[] = ['SIGTERM', 'SIGINT'];\n\n    for (const signal of signals) {\n      const handler = () => {\n        this.logger.info(`Received ${signal}, shutting down gracefully`);\n        this.shutdown()\n          .then(() => {\n            process.exit(0);\n          })\n          .catch((error) => {\n            this.logger.error('Error during shutdown', { error });\n            process.exit(1);\n          });\n      };\n\n      this.signalHandlers.set(signal, handler);\n      process.on(signal, handler);\n    }\n  }\n\n  /**\n   * Clean up signal handlers\n   */\n  private cleanupSignalHandlers(): void {\n    for (const [signal, handler] of this.signalHandlers.entries()) {\n      process.removeListener(signal, handler);\n    }\n    this.signalHandlers.clear();\n  }\n\n  /**\n   * Validate configuration and dependencies\n   * Override to check agent-specific requirements\n   *\n   * @throws Error if validation fails\n   *\n   * @example\n   * ```typescript\n   * async validate(): Promise<void> {\n   *   if (!this.config.apiKey) {\n   *     throw new Error('API key is required');\n   *   }\n   * }\n   * ```\n   */\n  async validate(): Promise<void> {\n    this.logger.info('Validating agent configuration');\n    // Base implementation - extending agents should override\n  }\n\n  /**\n   * Main agent logic\n   * Must be implemented by extending class\n   *\n   * Update this.lastRun.itemsProcessed to track work done\n   *\n   * @example\n   * ```typescript\n   * async run(): Promise<void> {\n   *   this.logger.info('Starting agent work');\n   *   let processed = 0;\n   *\n   *   for (const item of items) {\n   *     await this.processItem(item);\n   *     processed++;\n   *   }\n   *\n   *   this.lastRun.itemsProcessed = processed;\n   *   this.logger.info(`Processed ${processed} items`);\n   * }\n   * ```\n   */\n  abstract run(): Promise<void>;\n\n  /**\n   * Cleanup and shutdown\n   * Override to perform graceful shutdown\n   *\n   * Always call super.shutdown() to clean up signal handlers\n   *\n   * @example\n   * ```typescript\n   * async shutdown(): Promise<void> {\n   *   this.logger.info('Cleaning up resources');\n   *   await this.cleanup();\n   *   await super.shutdown();\n   * }\n   * ```\n   */\n  async shutdown(): Promise<void> {\n    this.status = 'shutdown';\n    this.logger.info('Agent shutting down');\n    this.cleanupSignalHandlers();\n  }\n\n  /**\n   * Execute agent with lifecycle management\n   *\n   * Runs the full lifecycle:\n   * 1. initialize()\n   * 2. validate()\n   * 3. run()\n   *\n   * On error:\n   * 1. Sets status to 'error'\n   * 2. Logs error\n   * 3. Re-throws error\n   *\n   * @example\n   * ```typescript\n   * const agent = new MyAgent({ name: 'my-agent' });\n   *\n   * try {\n   *   await agent.execute();\n   *   console.log('Agent completed successfully');\n   * } catch (error) {\n   *   console.error('Agent failed:', error);\n   * }\n   * ```\n   */\n  async execute(): Promise<void> {\n    try {\n      await this.initialize();\n      await this.validate();\n\n      this.status = 'running';\n      await this.run();\n      this.status = 'idle';\n\n      this.logger.info('Agent execution completed');\n    } catch (error) {\n      this.status = 'error';\n      this.logger.error('Agent execution failed', { error });\n      throw error;\n    }\n  }\n}\n"],"names":[],"mappings":";;AAsDO,MAAe,cAAc,WAAW;AAAA;AAAA;AAAA;AAAA,EAI7C,SAA0B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhB;AAAA;AAAA;AAAA;AAAA,EAmBF,qCAAsD,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO9D,YAAY,UAA6B,IAAI;AAC3C,UAAM,OAAO;AACb,SAAK,SAAS,aAAa,EAAE,OAAO,QAAQ;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,MAAM,aAA4B;AAChC,UAAM,MAAM,WAAA;AACZ,SAAK,SAAS;AACd,SAAK,OAAO,KAAK,oBAAoB;AAGrC,SAAK,oBAAA;AAEL,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,sBAA4B;AAClC,UAAM,UAA4B,CAAC,WAAW,QAAQ;AAEtD,eAAW,UAAU,SAAS;AAC5B,YAAM,UAAU,MAAM;AACpB,aAAK,OAAO,KAAK,YAAY,MAAM,4BAA4B;AAC/D,aAAK,WACF,KAAK,MAAM;AACV,kBAAQ,KAAK,CAAC;AAAA,QAChB,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,eAAK,OAAO,MAAM,yBAAyB,EAAE,OAAO;AACpD,kBAAQ,KAAK,CAAC;AAAA,QAChB,CAAC;AAAA,MACL;AAEA,WAAK,eAAe,IAAI,QAAQ,OAAO;AACvC,cAAQ,GAAG,QAAQ,OAAO;AAAA,IAC5B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,wBAA8B;AACpC,eAAW,CAAC,QAAQ,OAAO,KAAK,KAAK,eAAe,WAAW;AAC7D,cAAQ,eAAe,QAAQ,OAAO;AAAA,IACxC;AACA,SAAK,eAAe,MAAA;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,MAAM,WAA0B;AAC9B,SAAK,OAAO,KAAK,gCAAgC;AAAA,EAEnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyCA,MAAM,WAA0B;AAC9B,SAAK,SAAS;AACd,SAAK,OAAO,KAAK,qBAAqB;AACtC,SAAK,sBAAA;AAAA,EACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BA,MAAM,UAAyB;AAC7B,QAAI;AACF,YAAM,KAAK,WAAA;AACX,YAAM,KAAK,SAAA;AAEX,WAAK,SAAS;AACd,YAAM,KAAK,IAAA;AACX,WAAK,SAAS;AAEd,WAAK,OAAO,KAAK,2BAA2B;AAAA,IAC9C,SAAS,OAAO;AACd,WAAK,SAAS;AACd,WAAK,OAAO,MAAM,0BAA0B,EAAE,OAAO;AACrD,YAAM;AAAA,IACR;AAAA,EACF;AACF;"}