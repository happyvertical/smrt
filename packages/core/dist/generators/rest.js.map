{"version":3,"file":"rest.js","sources":["../../src/generators/rest.ts"],"sourcesContent":["/**\n * High-performance REST API generator for smrt objects using Node.js HTTP server\n *\n * Designed for minimal bundle size and maximum performance\n */\n\nimport http from 'node:http';\nimport type { SmrtCollection } from '../collection';\nimport type { SmrtObject } from '../object';\nimport { ObjectRegistry } from '../registry';\n\nexport interface APIConfig {\n  basePath?: string;\n  enableCors?: boolean;\n  customRoutes?: Record<string, (req: Request) => Promise<Response>>;\n  authMiddleware?: (\n    objectName: string,\n    action: string,\n  ) => (req: Request) => Promise<Request | Response>;\n  port?: number;\n  hostname?: string;\n}\n\nexport interface APIContext {\n  db?: any;\n  ai?: any;\n  user?: {\n    id: string;\n    username?: string;\n    roles?: string[];\n  };\n}\n\n/**\n * High-performance API generator using native Bun\n */\nexport class APIGenerator {\n  private config: APIConfig;\n  private collections = new Map<string, SmrtCollection<any>>();\n  private context: APIContext;\n\n  constructor(config: APIConfig = {}, context: APIContext = {}) {\n    this.config = {\n      basePath: '/api/v1',\n      enableCors: true,\n      port: 3000,\n      hostname: '0.0.0.0',\n      ...config,\n    };\n    this.context = context;\n  }\n\n  /**\n   * Register a pre-configured collection instance for API exposure\n   *\n   * @param name - URL path segment for the collection (e.g., 'products' for /api/products)\n   * @param collection - Pre-initialized SmrtCollection instance\n   */\n  registerCollection(name: string, collection: SmrtCollection<any>): void {\n    this.collections.set(name, collection);\n  }\n\n  /**\n   * Create Node.js HTTP server with all routes\n   */\n  createServer(): { server: any; url: string } {\n    const server = http.createServer(async (req, res) => {\n      try {\n        const request = await this.nodeRequestToWebRequest(req);\n        const response = await this.handleRequest(request);\n        await this.webResponseToNodeResponse(response, res);\n      } catch (_error) {\n        res.statusCode = 500;\n        res.end('Internal Server Error');\n      }\n    });\n\n    server.listen(this.config.port, this.config.hostname);\n\n    return {\n      server,\n      url: `http://${this.config.hostname}:${this.config.port}`,\n    };\n  }\n\n  /**\n   * Convert stream to string\n   */\n  private async streamToString(stream: http.IncomingMessage): Promise<string> {\n    const chunks: Buffer[] = [];\n    for await (const chunk of stream) {\n      chunks.push(Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk));\n    }\n    return Buffer.concat(chunks).toString('utf-8');\n  }\n\n  /**\n   * Convert Node.js IncomingMessage to Web Request\n   */\n  private async nodeRequestToWebRequest(\n    req: http.IncomingMessage,\n  ): Promise<Request> {\n    const url = `http://${this.config.hostname}:${this.config.port}${req.url}`;\n    const method = req.method || 'GET';\n    const headers = new Headers();\n\n    for (const [key, value] of Object.entries(req.headers)) {\n      if (value) {\n        headers.set(key, Array.isArray(value) ? value[0] : value);\n      }\n    }\n\n    let body: string | undefined;\n    if (method !== 'GET' && method !== 'HEAD') {\n      body = await this.streamToString(req);\n    }\n\n    return new Request(url, {\n      method,\n      headers,\n      body,\n    });\n  }\n\n  /**\n   * Convert Web Response to Node.js ServerResponse\n   */\n  private async webResponseToNodeResponse(\n    webResponse: Response,\n    res: http.ServerResponse,\n  ): Promise<void> {\n    res.statusCode = webResponse.status;\n\n    // Set headers\n    for (const [key, value] of webResponse.headers.entries()) {\n      res.setHeader(key, value);\n    }\n\n    // Send body\n    if (webResponse.body) {\n      const reader = webResponse.body.getReader();\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n        res.write(value);\n      }\n    }\n\n    res.end();\n  }\n\n  /**\n   * Generate fetch handler function (for serverless environments)\n   */\n  generateHandler(): (req: Request) => Promise<Response> {\n    return (req) => this.handleRequest(req);\n  }\n\n  /**\n   * Main request handler using native Bun APIs\n   */\n  private async handleRequest(req: Request): Promise<Response> {\n    const url = new URL(req.url);\n\n    // Handle CORS preflight\n    if (req.method === 'OPTIONS' && this.config.enableCors) {\n      return this.createCorsResponse();\n    }\n\n    // Handle custom routes first\n    if (this.config.customRoutes) {\n      for (const [path, handler] of Object.entries(this.config.customRoutes)) {\n        if (url.pathname === `${this.config.basePath}${path}`) {\n          const response = await handler(req);\n          return this.addCorsHeaders(response);\n        }\n      }\n    }\n\n    // Handle object routes\n    if (url.pathname.startsWith(this.config.basePath!)) {\n      const response = await this.handleObjectRoute(req, url);\n      return this.addCorsHeaders(response);\n    }\n\n    // Not found\n    return this.createErrorResponse(404, 'Not found');\n  }\n\n  /**\n   * Handle CRUD routes for SMRT objects\n   */\n  private async handleObjectRoute(req: Request, url: URL): Promise<Response> {\n    const pathParts = url.pathname\n      .replace(this.config.basePath!, '')\n      .split('/')\n      .filter(Boolean);\n\n    if (pathParts.length === 0) {\n      return this.createErrorResponse(400, 'Object type required');\n    }\n\n    const objectType = pathParts[0];\n    const objectId = pathParts[1];\n\n    // Check for explicitly registered collection first\n    if (this.collections.has(objectType)) {\n      const collection = this.collections.get(objectType)!;\n\n      // Apply auth middleware if configured\n      if (this.config.authMiddleware) {\n        const authCheck = this.config.authMiddleware(\n          objectType,\n          req.method.toLowerCase(),\n        );\n        const authResult = await authCheck(req);\n        if (authResult instanceof Response) {\n          return authResult; // Auth failed\n        }\n        // Auth passed, use the potentially modified request\n        req = authResult;\n      }\n\n      // Use registered collection directly\n      return await this.executeCrudOperation(req, collection, objectId, url);\n    }\n\n    // Fall back to auto-discovery via ObjectRegistry\n    const registeredClasses = ObjectRegistry.getAllClasses();\n    const pluralName = this.pluralize(objectType);\n\n    let classInfo: any = null;\n    for (const [name, info] of registeredClasses) {\n      if (this.pluralize(name.toLowerCase()) === pluralName) {\n        classInfo = info;\n        break;\n      }\n    }\n\n    if (!classInfo) {\n      return this.createErrorResponse(\n        404,\n        `Object type '${objectType}' not found`,\n      );\n    }\n\n    // Apply auth middleware if configured\n    if (this.config.authMiddleware) {\n      const authCheck = this.config.authMiddleware(\n        classInfo.name,\n        req.method.toLowerCase(),\n      );\n      const authResult = await authCheck(req);\n      if (authResult instanceof Response) {\n        return authResult; // Auth failed\n      }\n      // Auth passed, use the potentially modified request\n      req = authResult;\n    }\n\n    // Get or create collection\n    const collection = this.getCollection(classInfo);\n\n    return await this.executeCrudOperation(req, collection, objectId, url);\n  }\n\n  /**\n   * Execute CRUD operation on a collection\n   */\n  private async executeCrudOperation(\n    req: Request,\n    collection: SmrtCollection<any>,\n    objectId: string | undefined,\n    url: URL,\n  ): Promise<Response> {\n    try {\n      // Handle special /count endpoint\n      if (objectId === 'count' && req.method === 'GET') {\n        return await this.handleCount(collection, url.searchParams);\n      }\n\n      // Route to appropriate CRUD operation\n      switch (req.method) {\n        case 'GET':\n          return objectId\n            ? await this.handleGet(collection, objectId)\n            : await this.handleList(collection, url.searchParams);\n\n        case 'POST':\n          return await this.handleCreate(collection, req);\n\n        case 'PUT':\n        case 'PATCH':\n          if (!objectId) {\n            return this.createErrorResponse(\n              400,\n              'Object ID required for update',\n            );\n          }\n          return await this.handleUpdate(collection, objectId, req);\n\n        case 'DELETE':\n          if (!objectId) {\n            return this.createErrorResponse(\n              400,\n              'Object ID required for delete',\n            );\n          }\n          return await this.handleDelete(collection, objectId);\n\n        default:\n          return this.createErrorResponse(405, 'Method not allowed');\n      }\n    } catch (error) {\n      console.error('API Error:', error);\n      return this.createErrorResponse(500, 'Internal server error');\n    }\n  }\n\n  /**\n   * Handle GET /objects/:id\n   */\n  private async handleGet(\n    collection: SmrtCollection<any>,\n    id: string,\n  ): Promise<Response> {\n    const object = await collection.get(id);\n    if (!object) {\n      return this.createErrorResponse(404, 'Object not found');\n    }\n    return this.createJsonResponse(object);\n  }\n\n  /**\n   * Handle GET /objects (list with query params)\n   */\n  private async handleList(\n    collection: SmrtCollection<any>,\n    params: URLSearchParams,\n  ): Promise<Response> {\n    const limit = Number.parseInt(params.get('limit') || '50', 10);\n    const offset = Number.parseInt(params.get('offset') || '0', 10);\n    const orderBy = params.get('orderBy') || 'created_at DESC';\n\n    // Build where clause from query params\n    // Convert REST-style operators (price[gt]) to SQL-style (price >)\n    const where: any = {};\n    for (const [key, value] of params.entries()) {\n      if (!['limit', 'offset', 'orderBy'].includes(key)) {\n        // Parse REST operator format: field[operator]\n        const match = key.match(/^(.+)\\[(.+)\\]$/);\n        if (match) {\n          const field = match[1];\n          const operator = match[2];\n          // Map REST operators to SQL operators\n          const operatorMap: Record<string, string> = {\n            gt: '>',\n            gte: '>=',\n            lt: '<',\n            lte: '<=',\n            ne: '!=',\n            in: 'in',\n            like: 'like',\n          };\n          const sqlOperator = operatorMap[operator] || operator;\n          const sqlKey = `${field} ${sqlOperator}`;\n          // Handle 'in' operator - convert comma-separated string to array\n          where[sqlKey] = operator === 'in' ? value.split(',') : value;\n        } else {\n          where[key] = value;\n        }\n      }\n    }\n\n    const objects = await collection.list({\n      where: Object.keys(where).length > 0 ? where : undefined,\n      limit,\n      offset,\n      orderBy,\n    });\n\n    return this.createJsonResponse(objects);\n  }\n\n  /**\n   * Handle GET /objects/count\n   */\n  private async handleCount(\n    collection: SmrtCollection<any>,\n    params: URLSearchParams,\n  ): Promise<Response> {\n    // Build where clause from query params (same logic as handleList)\n    const where: any = {};\n    for (const [key, value] of params.entries()) {\n      // Parse REST operator format: field[operator]\n      const match = key.match(/^(.+)\\[(.+)\\]$/);\n      if (match) {\n        const field = match[1];\n        const operator = match[2];\n        // Map REST operators to SQL operators\n        const operatorMap: Record<string, string> = {\n          gt: '>',\n          gte: '>=',\n          lt: '<',\n          lte: '<=',\n          ne: '!=',\n          in: 'in',\n          like: 'like',\n        };\n        const sqlOperator = operatorMap[operator] || operator;\n        const sqlKey = `${field} ${sqlOperator}`;\n        // Handle 'in' operator - convert comma-separated string to array\n        where[sqlKey] = operator === 'in' ? value.split(',') : value;\n      } else {\n        where[key] = value;\n      }\n    }\n\n    const count = await collection.count({\n      where: Object.keys(where).length > 0 ? where : undefined,\n    });\n\n    return this.createJsonResponse({ count });\n  }\n\n  /**\n   * Handle POST /objects\n   */\n  private async handleCreate(\n    collection: SmrtCollection<any>,\n    req: Request,\n  ): Promise<Response> {\n    const data = (await req.json()) as Record<string, any>;\n    const object = await collection.create({ ...data, _skipLoad: true });\n    await object.save();\n    return this.createJsonResponse(object, 201);\n  }\n\n  /**\n   * Handle PUT/PATCH /objects/:id\n   */\n  private async handleUpdate(\n    collection: SmrtCollection<any>,\n    id: string,\n    req: Request,\n  ): Promise<Response> {\n    const data = await req.json();\n    const object = await collection.get(id);\n\n    if (!object) {\n      return this.createErrorResponse(404, 'Object not found');\n    }\n\n    // Update object properties\n    Object.assign(object, data);\n    await object.save();\n\n    return this.createJsonResponse(object);\n  }\n\n  /**\n   * Handle DELETE /objects/:id\n   */\n  private async handleDelete(\n    collection: SmrtCollection<any>,\n    id: string,\n  ): Promise<Response> {\n    const object = await collection.get(id);\n\n    if (!object) {\n      return this.createErrorResponse(404, 'Object not found');\n    }\n\n    await object.delete();\n    return new Response(null, { status: 204 });\n  }\n\n  /**\n   * Get or create collection instance\n   */\n  private getCollection(classInfo: any): SmrtCollection<any> {\n    if (!this.collections.has(classInfo.name)) {\n      const collection = new classInfo.collectionConstructor({\n        ai: this.context.ai,\n        db: this.context.db,\n      });\n      this.collections.set(classInfo.name, collection);\n    }\n    return this.collections.get(classInfo.name)!;\n  }\n\n  /**\n   * Create JSON response with proper headers\n   */\n  private createJsonResponse(data: any, status = 200): Response {\n    return new Response(JSON.stringify(data), {\n      status,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  /**\n   * Create error response\n   */\n  private createErrorResponse(status: number, message: string): Response {\n    return new Response(JSON.stringify({ error: message }), {\n      status,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  /**\n   * Create CORS preflight response\n   */\n  private createCorsResponse(): Response {\n    return new Response(null, {\n      status: 200,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,PUT,PATCH,DELETE,OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type,Authorization',\n        'Access-Control-Max-Age': '86400',\n      },\n    });\n  }\n\n  /**\n   * Add CORS headers to response\n   */\n  private addCorsHeaders(response: Response): Response {\n    if (!this.config.enableCors) return response;\n\n    const headers = new Headers(response.headers);\n    headers.set('Access-Control-Allow-Origin', '*');\n    headers.set(\n      'Access-Control-Allow-Methods',\n      'GET,POST,PUT,PATCH,DELETE,OPTIONS',\n    );\n    headers.set('Access-Control-Allow-Headers', 'Content-Type,Authorization');\n\n    return new Response(response.body, {\n      status: response.status,\n      statusText: response.statusText,\n      headers,\n    });\n  }\n\n  /**\n   * Simple pluralization (basic implementation)\n   */\n  private pluralize(word: string): string {\n    if (word.endsWith('y')) {\n      return `${word.slice(0, -1)}ies`;\n    }\n    if (word.endsWith('s') || word.endsWith('sh') || word.endsWith('ch')) {\n      return `${word}es`;\n    }\n    return `${word}s`;\n  }\n}\n\n// REST Server Utilities\n\nexport interface RestServerConfig extends APIConfig {\n  healthCheck?: {\n    enabled?: boolean;\n    path?: string;\n    customChecks?: (() => Promise<boolean>)[];\n  };\n}\n\n/**\n * Create REST server with health checks using Bun\n */\nexport function createRestServer(\n  objects: (typeof SmrtObject)[],\n  context: APIContext = {},\n  config: RestServerConfig = {},\n): { server: any; url: string } {\n  // Register objects if not already registered\n  objects.forEach((obj) => {\n    if (!ObjectRegistry.hasClass(obj.name)) {\n      console.warn(`Object ${obj.name} not registered with @smrt decorator`);\n    }\n  });\n\n  const generator = new APIGenerator(config, context);\n  const { server, url } = generator.createServer();\n\n  console.log(`🚀 smrt REST API server running at ${url}`);\n\n  return { server, url };\n}\n\n/**\n * Start server with graceful shutdown\n */\nexport function startRestServer(\n  objects: (typeof SmrtObject)[],\n  context: APIContext = {},\n  config: RestServerConfig = {},\n): Promise<() => Promise<void>> {\n  return new Promise((resolve) => {\n    const { server, url } = createRestServer(objects, context, config);\n\n    // Graceful shutdown function\n    const shutdown = (): Promise<void> => {\n      return new Promise((shutdownResolve) => {\n        console.log('🛑 Shutting down server gracefully...');\n        server.stop();\n        console.log('✅ Server shut down complete');\n        shutdownResolve();\n      });\n    };\n\n    // Handle shutdown signals\n    process.on('SIGTERM', shutdown);\n    process.on('SIGINT', shutdown);\n\n    resolve(shutdown);\n  });\n}\n"],"names":["collection"],"mappings":"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"}