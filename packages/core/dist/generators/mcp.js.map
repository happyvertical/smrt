{"version":3,"file":"mcp.js","sources":["../../src/generators/mcp-runtime-template.ts","../../src/generators/mcp.ts"],"sourcesContent":["/**\n * Runtime bootstrap template for generated MCP servers\n *\n * This template provides stdio transport integration for SMRT-generated MCP servers.\n * It handles:\n * - Server initialization with @modelcontextprotocol/sdk\n * - Tool registration from MCPGenerator\n * - Stdio transport connection\n * - Error handling and logging\n * - Graceful shutdown\n */\n\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n} from '@modelcontextprotocol/sdk/types.js';\nimport type { MCPConfig, MCPContext } from './mcp.js';\nimport { MCPGenerator } from './mcp.js';\n\nexport interface RuntimeOptions {\n  /** Server name (defaults to package name) */\n  name?: string;\n\n  /** Server version (defaults to package version) */\n  version?: string;\n\n  /** Server description */\n  description?: string;\n\n  /** MCP generator configuration */\n  config?: MCPConfig;\n\n  /** MCP context (database, AI client, etc.) */\n  context?: MCPContext;\n\n  /** Enable debug logging */\n  debug?: boolean;\n}\n\n/**\n * Generate runtime bootstrap code for MCP server\n *\n * @param options - Runtime configuration options\n * @returns TypeScript code for server entry point\n */\nexport function generateRuntimeBootstrap(options: RuntimeOptions = {}): string {\n  const {\n    name = 'smrt-mcp-server',\n    version = '1.0.0',\n    description = 'Auto-generated MCP server from SMRT objects',\n    debug = false,\n  } = options;\n\n  return `#!/usr/bin/env node\n/**\n * Auto-generated MCP Server\n * Generated by @smrt/core MCPGenerator\n *\n * This server exposes SMRT objects as MCP tools for AI integration.\n */\n\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n  type CallToolRequest,\n  type ListToolsRequest,\n} from '@modelcontextprotocol/sdk/types.js';\nimport { MCPGenerator } from '@smrt/core/generators/mcp';\nimport { getDatabase } from '@have/sql';\nimport { getAI } from '@have/ai';\n\n// Server configuration\nconst SERVER_NAME = ${JSON.stringify(name)};\nconst SERVER_VERSION = ${JSON.stringify(version)};\nconst SERVER_DESCRIPTION = ${JSON.stringify(description)};\nconst DEBUG = ${debug};\n\n/**\n * Initialize MCP generator with context\n */\nasync function initializeGenerator() {\n  // Setup database connection (optional)\n  const db = process.env.DATABASE_URL\n    ? await getDatabase({ url: process.env.DATABASE_URL })\n    : undefined;\n\n  // Setup AI client (optional)\n  const ai = process.env.OPENAI_API_KEY || process.env.ANTHROPIC_API_KEY\n    ? await getAI({\n        provider: process.env.OPENAI_API_KEY ? 'openai' : 'anthropic',\n        apiKey: process.env.OPENAI_API_KEY || process.env.ANTHROPIC_API_KEY,\n      })\n    : undefined;\n\n  // Create generator with context\n  const generator = new MCPGenerator(\n    {\n      name: SERVER_NAME,\n      version: SERVER_VERSION,\n      description: SERVER_DESCRIPTION,\n    },\n    {\n      db,\n      ai,\n    }\n  );\n\n  return generator;\n}\n\n/**\n * Main server startup function\n */\nasync function main() {\n  try {\n    if (DEBUG) {\n      console.error(\\`[MCP] Starting server: \\${SERVER_NAME} v\\${SERVER_VERSION}\\`);\n    }\n\n    // Initialize generator\n    const generator = await initializeGenerator();\n\n    // Generate tools from registered SMRT objects\n    const tools = generator.generateTools();\n\n    if (DEBUG) {\n      console.error(\\`[MCP] Generated \\${tools.length} tools from SMRT objects\\`);\n      console.error(\\`[MCP] Available tools:\\`, tools.map(t => t.name).join(', '));\n    }\n\n    // Create MCP server\n    const server = new Server(\n      {\n        name: SERVER_NAME,\n        version: SERVER_VERSION,\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      }\n    );\n\n    // Register ListTools handler\n    server.setRequestHandler(ListToolsRequestSchema, async (_request: ListToolsRequest) => {\n      if (DEBUG) {\n        console.error(\\`[MCP] ListTools request received\\`);\n      }\n\n      return {\n        tools: tools.map(tool => ({\n          name: tool.name,\n          description: tool.description,\n          inputSchema: tool.inputSchema,\n        })),\n      };\n    });\n\n    // Register CallTool handler\n    server.setRequestHandler(CallToolRequestSchema, async (request: CallToolRequest) => {\n      const { name: toolName, arguments: args } = request.params;\n\n      if (DEBUG) {\n        console.error(\\`[MCP] CallTool request: \\${toolName}\\`);\n        console.error(\\`[MCP] Arguments:\\`, JSON.stringify(args, null, 2));\n      }\n\n      try {\n        // Execute tool via generator\n        const result = await generator.handleToolCall({\n          method: 'tools/call',\n          params: {\n            name: toolName,\n            arguments: args || {},\n          },\n        });\n\n        if (DEBUG) {\n          console.error(\\`[MCP] Tool executed successfully: \\${toolName}\\`);\n        }\n\n        return result;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        console.error(\\`[MCP] Tool execution failed: \\${toolName}\\`, error);\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: \\`Error executing tool \\${toolName}: \\${errorMessage}\\`,\n            },\n          ],\n          isError: true,\n        };\n      }\n    });\n\n    // Setup stdio transport\n    const transport = new StdioServerTransport();\n\n    // Connect server to transport\n    await server.connect(transport);\n\n    if (DEBUG) {\n      console.error(\\`[MCP] Server connected via stdio transport\\`);\n      console.error(\\`[MCP] Ready to receive requests\\`);\n    }\n\n    // Handle graceful shutdown\n    process.on('SIGINT', async () => {\n      if (DEBUG) {\n        console.error(\\`[MCP] Received SIGINT, shutting down gracefully\\`);\n      }\n      await server.close();\n      process.exit(0);\n    });\n\n    process.on('SIGTERM', async () => {\n      if (DEBUG) {\n        console.error(\\`[MCP] Received SIGTERM, shutting down gracefully\\`);\n      }\n      await server.close();\n      process.exit(0);\n    });\n  } catch (error) {\n    console.error('[MCP] Fatal error during server startup:', error);\n    process.exit(1);\n  }\n}\n\n// Start the server\nmain().catch((error) => {\n  console.error('[MCP] Unhandled error:', error);\n  process.exit(1);\n});\n`;\n}\n\n/**\n * Generate package.json script for running MCP server\n *\n * @param serverPath - Path to generated server file (relative to package root)\n * @returns Script command for package.json\n */\nexport function generateMCPScript(serverPath: string = 'dist/mcp-server.js'): string {\n  return `node ${serverPath}`;\n}\n\n/**\n * Generate Claude Desktop configuration example\n *\n * @param serverName - Name for the MCP server\n * @param serverPath - Absolute path to server file\n * @returns Configuration object for claude_desktop_config.json\n */\nexport function generateClaudeConfig(\n  serverName: string,\n  serverPath: string,\n): object {\n  return {\n    mcpServers: {\n      [serverName]: {\n        command: 'node',\n        args: [serverPath],\n      },\n    },\n  };\n}\n\n/**\n * Generate README documentation for MCP server setup\n *\n * @param serverName - Name of the MCP server\n * @param serverPath - Path to the server file\n * @returns Markdown documentation\n */\nexport function generateMCPDocumentation(\n  serverName: string,\n  serverPath: string,\n): string {\n  return `# MCP Server Setup\n\nThis project includes an auto-generated MCP (Model Context Protocol) server that exposes SMRT objects as tools for AI integration.\n\n## Quick Start\n\n### 1. Build the MCP Server\n\n\\`\\`\\`bash\nnpm run build\n\\`\\`\\`\n\nThis generates the MCP server at: \\`${serverPath}\\`\n\n### 2. Configure Claude Desktop\n\nAdd the following to your Claude Desktop configuration file:\n\n**macOS**: \\`~/.config/Claude/claude_desktop_config.json\\`\n**Windows**: \\`%APPDATA%\\\\Claude\\\\claude_desktop_config.json\\`\n\n\\`\\`\\`json\n{\n  \"mcpServers\": {\n    \"${serverName}\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/${serverPath}\"]\n    }\n  }\n}\n\\`\\`\\`\n\nReplace \\`/absolute/path/to/\\` with the actual absolute path to your project directory.\n\n### 3. Restart Claude Desktop\n\nClose and reopen Claude Desktop to load the new MCP server.\n\n### 4. Test the Integration\n\nIn Claude Code, you can now use the auto-generated tools. For example:\n\n- \\`list_products\\` - List all products\n- \\`get_product\\` - Get a specific product by ID\n- \\`create_product\\` - Create a new product\n- And more...\n\n## Environment Variables\n\nThe MCP server supports optional environment variables:\n\n- \\`DATABASE_URL\\` - Database connection string\n- \\`OPENAI_API_KEY\\` or \\`ANTHROPIC_API_KEY\\` - AI provider API key\n\n## Troubleshooting\n\n### Server Not Appearing in Claude\n\n1. Check that the path in \\`claude_desktop_config.json\\` is absolute\n2. Verify the server file exists at the specified path\n3. Check Claude Desktop logs for errors\n\n### Tools Not Working\n\n1. Ensure your database is accessible (if using one)\n2. Check that SMRT objects are properly decorated with \\`@smrt()\\`\n3. Look for errors in the MCP server output\n\n### Debug Mode\n\nTo enable debug logging, set the \\`DEBUG\\` constant to \\`true\\` in the generated server file.\n\n## Generated Tools\n\nThe following tools are automatically generated from your SMRT objects:\n\n- **CRUD Operations**: \\`list_\\`, \\`get_\\`, \\`create_\\`, \\`update_\\`, \\`delete_\\` for each object type\n- **Custom Actions**: Any custom methods included in the \\`@smrt()\\` decorator configuration\n\nSee the SMRT object definitions for the complete list of available tools and their parameters.\n`;\n}\n","/**\n * MCP (Model Context Protocol) server generator for smrt objects\n *\n * Exposes smrt objects as AI tools for Claude, GPT, and other AI models\n */\n\nimport { writeFile } from 'node:fs/promises';\nimport { resolve, dirname } from 'node:path';\nimport { mkdir } from 'node:fs/promises';\nimport { SmrtCollection } from '../collection';\nimport type { SmrtObject } from '../object';\nimport { ObjectRegistry } from '../registry';\nimport {\n  generateRuntimeBootstrap,\n  generateMCPScript,\n  generateClaudeConfig,\n  generateMCPDocumentation,\n  type RuntimeOptions,\n} from './mcp-runtime-template.js';\n\nexport interface MCPConfig {\n  name?: string;\n  version?: string;\n  description?: string;\n  server?: {\n    name: string;\n    version: string;\n  };\n}\n\nexport interface MCPContext {\n  db?: any;\n  ai?: any;\n  user?: {\n    id: string;\n    roles?: string[];\n  };\n}\n\nexport interface MCPTool {\n  name: string;\n  description: string;\n  inputSchema: {\n    type: string;\n    properties: Record<string, any>;\n    required?: string[];\n  };\n}\n\nexport interface MCPRequest {\n  method: string;\n  params: {\n    name: string;\n    arguments: Record<string, any>;\n  };\n}\n\nexport interface MCPResponse {\n  content: Array<{\n    type: 'text';\n    text: string;\n  }>;\n}\n\n/**\n * Generate MCP server from smrt objects\n */\nexport class MCPGenerator {\n  private config: MCPConfig;\n  private context: MCPContext;\n  private collections = new Map<string, SmrtCollection<any>>();\n\n  constructor(config: MCPConfig = {}, context: MCPContext = {}) {\n    this.config = {\n      name: 'smrt-mcp-server',\n      version: '1.0.0',\n      description: 'Auto-generated MCP server from smrt objects',\n      server: {\n        name: 'smrt-mcp',\n        version: '1.0.0',\n      },\n      ...config,\n    };\n    this.context = context;\n  }\n\n  /**\n   * Generate all available tools from registered objects\n   */\n  generateTools(): MCPTool[] {\n    const tools: MCPTool[] = [];\n    const registeredClasses = ObjectRegistry.getAllClasses();\n\n    for (const [name, _classInfo] of registeredClasses) {\n      const config = ObjectRegistry.getConfig(name);\n      const mcpConfig = config.mcp || {};\n\n      // Skip excluded endpoints\n      const excluded = mcpConfig.exclude || [];\n      const included = mcpConfig.include;\n\n      const shouldInclude = (endpoint: string) => {\n        if (included && !included.includes(endpoint)) return false;\n        if (excluded.includes(endpoint)) return false;\n        return true;\n      };\n\n      const objectTools = this.generateObjectTools(name, shouldInclude);\n      tools.push(...objectTools);\n    }\n\n    return tools;\n  }\n\n  /**\n   * Generate tools for a specific object\n   */\n  private generateObjectTools(\n    objectName: string,\n    shouldInclude: (endpoint: string) => boolean,\n  ): MCPTool[] {\n    const tools: MCPTool[] = [];\n    const fields = ObjectRegistry.getFields(objectName);\n    const lowerName = objectName.toLowerCase();\n    const classInfo = ObjectRegistry.getClass(objectName);\n\n    // LIST tool\n    if (shouldInclude('list')) {\n      tools.push({\n        name: `${lowerName}_list`,\n        description: `List ${objectName} objects with optional filtering`,\n        inputSchema: {\n          type: 'object',\n          properties: {\n            limit: {\n              type: 'integer',\n              description: 'Maximum number of items to return',\n              default: 50,\n              minimum: 1,\n              maximum: 1000,\n            },\n            offset: {\n              type: 'integer',\n              description: 'Number of items to skip',\n              default: 0,\n              minimum: 0,\n            },\n            orderBy: {\n              type: 'string',\n              description: 'Field to order by (e.g., \"created_at DESC\")',\n            },\n            where: {\n              type: 'object',\n              description: 'Filter conditions as key-value pairs',\n              additionalProperties: true,\n            },\n          },\n        },\n      });\n    }\n\n    // GET tool\n    if (shouldInclude('get')) {\n      tools.push({\n        name: `${lowerName}_get`,\n        description: `Get a specific ${objectName} by ID or slug`,\n        inputSchema: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'Unique identifier of the object',\n            },\n            slug: {\n              type: 'string',\n              description: 'URL-friendly identifier of the object',\n            },\n          },\n          required: [],\n        },\n      });\n    }\n\n    // CREATE tool\n    if (shouldInclude('create')) {\n      const properties: Record<string, any> = {};\n      const required: string[] = [];\n\n      for (const [fieldName, field] of fields) {\n        properties[fieldName] = this.fieldToMCPSchema(field);\n        if (field.options?.required) {\n          required.push(fieldName);\n        }\n      }\n\n      tools.push({\n        name: `${lowerName}_create`,\n        description: `Create a new ${objectName}`,\n        inputSchema: {\n          type: 'object',\n          properties,\n          required,\n        },\n      });\n    }\n\n    // UPDATE tool\n    if (shouldInclude('update')) {\n      const properties: Record<string, any> = {\n        id: {\n          type: 'string',\n          description: 'ID of the object to update',\n        },\n      };\n\n      for (const [fieldName, field] of fields) {\n        properties[fieldName] = this.fieldToMCPSchema(field);\n      }\n\n      tools.push({\n        name: `${lowerName}_update`,\n        description: `Update an existing ${objectName}`,\n        inputSchema: {\n          type: 'object',\n          properties,\n          required: ['id'],\n        },\n      });\n    }\n\n    // DELETE tool\n    if (shouldInclude('delete')) {\n      tools.push({\n        name: `${lowerName}_delete`,\n        description: `Delete a ${objectName} by ID`,\n        inputSchema: {\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'ID of the object to delete',\n            },\n          },\n          required: ['id'],\n        },\n      });\n    }\n\n    // CUSTOM ACTIONS\n    if (classInfo) {\n      const config = ObjectRegistry.getConfig(objectName);\n      const mcpConfig = config.mcp || {};\n      const included = mcpConfig.include;\n      const excluded = mcpConfig.exclude || [];\n\n      // If specific actions are included, check for custom actions\n      if (included) {\n        for (const action of included) {\n          // Skip standard CRUD actions (already handled above)\n          if (['list', 'get', 'create', 'update', 'delete'].includes(action)) {\n            continue;\n          }\n\n          // Skip if excluded\n          if (excluded.includes(action)) {\n            continue;\n          }\n\n          // Validate that the method exists on the class\n          const isValid = this.validateCustomMethod(\n            classInfo.constructor,\n            action,\n          );\n\n          if (isValid) {\n            const toolName = `${lowerName}_${action}`;\n            tools.push({\n              name: toolName,\n              description: `Execute ${action} action on ${objectName}`,\n              inputSchema: {\n                type: 'object',\n                properties: {\n                  id: {\n                    type: 'string',\n                    description: 'ID of the object (optional for some actions)',\n                  },\n                  options: {\n                    type: 'object',\n                    description: 'Additional options for the custom action',\n                    additionalProperties: true,\n                  },\n                },\n                required: [],\n              },\n            });\n          } else {\n            console.warn(\n              `Warning: Custom action '${action}' specified in MCP config for ${objectName}, but method ${action}() not found on class`,\n            );\n          }\n        }\n      }\n    }\n\n    return tools;\n  }\n\n  /**\n   * Convert field definition to MCP schema\n   */\n  private fieldToMCPSchema(field: any): any {\n    const schema: any = {\n      description: field.options?.description || `${field.type} field`,\n    };\n\n    switch (field.type) {\n      case 'text':\n        schema.type = 'string';\n        if (field.options?.maxLength)\n          schema.maxLength = field.options.maxLength;\n        if (field.options?.minLength)\n          schema.minLength = field.options.minLength;\n        break;\n      case 'integer':\n        schema.type = 'integer';\n        if (field.options?.min !== undefined)\n          schema.minimum = field.options.min;\n        if (field.options?.max !== undefined)\n          schema.maximum = field.options.max;\n        break;\n      case 'decimal':\n        schema.type = 'number';\n        if (field.options?.min !== undefined)\n          schema.minimum = field.options.min;\n        if (field.options?.max !== undefined)\n          schema.maximum = field.options.max;\n        break;\n      case 'boolean':\n        schema.type = 'boolean';\n        break;\n      case 'datetime':\n        schema.type = 'string';\n        schema.format = 'date-time';\n        break;\n      case 'json':\n        schema.type = 'object';\n        break;\n      case 'foreignKey':\n        schema.type = 'string';\n        schema.description = `ID of related ${field.options?.related || 'object'}`;\n        break;\n      default:\n        schema.type = 'string';\n    }\n\n    if (field.options?.default !== undefined) {\n      schema.default = field.options.default;\n    }\n\n    return schema;\n  }\n\n  /**\n   * Validate that a custom method exists on a class\n   */\n  private validateCustomMethod(\n    classConstructor: typeof SmrtObject,\n    methodName: string,\n  ): boolean {\n    try {\n      // Check if method exists on the prototype\n      const prototype = classConstructor.prototype;\n\n      // Check if the method exists and is a function\n      if (typeof (prototype as any)[methodName] === 'function') {\n        return true;\n      }\n\n      // Also check static methods\n      if (typeof (classConstructor as any)[methodName] === 'function') {\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.warn(\n        `Error validating method ${methodName} on class ${classConstructor.name}:`,\n        error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Handle MCP tool calls\n   */\n  async handleToolCall(request: MCPRequest): Promise<MCPResponse> {\n    const { name, arguments: args } = request.params;\n\n    try {\n      // Parse tool name: objectname_action\n      const [objectName, action] = name.split('_');\n\n      if (!objectName || !action) {\n        throw new Error(`Invalid tool name format: ${name}`);\n      }\n\n      // Find the registered class (case-insensitive)\n      const registeredClasses = ObjectRegistry.getAllClasses();\n      let classInfo = null;\n      let actualObjectName = '';\n\n      for (const [registeredName, info] of registeredClasses) {\n        if (registeredName.toLowerCase() === objectName.toLowerCase()) {\n          classInfo = info;\n          actualObjectName = registeredName;\n          break;\n        }\n      }\n\n      if (!classInfo) {\n        throw new Error(`Object type '${objectName}' not found`);\n      }\n\n      // Get or create collection\n      const collection = this.getCollection(actualObjectName, classInfo);\n\n      // Execute the action\n      const result = await this.executeAction(collection, action, args);\n\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify(result, null, 2),\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: 'text',\n            text: `Error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          },\n        ],\n      };\n    }\n  }\n\n  /**\n   * Get or create collection for an object\n   */\n  private getCollection(\n    objectName: string,\n    classInfo: any,\n  ): SmrtCollection<any> {\n    if (!this.collections.has(objectName)) {\n      // Ensure we have a valid collection constructor\n      if (\n        !classInfo.collectionConstructor ||\n        typeof classInfo.collectionConstructor !== 'function'\n      ) {\n        throw new Error(\n          `No valid collection constructor found for ${objectName}`,\n        );\n      }\n\n      const collection = new classInfo.collectionConstructor({\n        ai: this.context.ai,\n        db: this.context.db,\n      });\n\n      // Verify the collection is actually a SmrtCollection instance\n      if (!(collection instanceof SmrtCollection)) {\n        throw new Error(\n          `Collection for ${objectName} must extend SmrtCollection`,\n        );\n      }\n\n      this.collections.set(objectName, collection);\n    }\n    const collection = this.collections.get(objectName);\n    if (!collection) {\n      throw new Error(`Collection for ${objectName} not found`);\n    }\n    return collection;\n  }\n\n  /**\n   * Execute action on collection\n   */\n  private async executeAction(\n    collection: SmrtCollection<any>,\n    action: string,\n    args: any,\n  ): Promise<any> {\n    switch (action) {\n      case 'list': {\n        const listOptions: any = {\n          limit: Math.min(args.limit || 50, 1000),\n          offset: args.offset || 0,\n        };\n\n        if (args.where) {\n          listOptions.where = args.where;\n        }\n\n        if (args.orderBy) {\n          listOptions.orderBy = args.orderBy;\n        }\n\n        const results = await collection.list(listOptions);\n        const total = await collection.count({ where: args.where || {} });\n\n        return {\n          data: results,\n          meta: {\n            total,\n            limit: listOptions.limit,\n            offset: listOptions.offset,\n            count: results.length,\n          },\n        };\n      }\n\n      case 'get': {\n        if (!args.id && !args.slug) {\n          throw new Error('Either id or slug is required');\n        }\n\n        const filter = args.id ? args.id : args.slug;\n        const item = await collection.get(filter);\n\n        if (!item) {\n          throw new Error('Object not found');\n        }\n\n        return item;\n      }\n\n      case 'create': {\n        // Add user context if available\n        const createData = { ...args };\n        if (this.context.user) {\n          createData.created_by = this.context.user.id;\n          createData.owner_id = this.context.user.id;\n        }\n\n        const newItem = await collection.create(createData);\n        await newItem.save();\n\n        return newItem;\n      }\n\n      case 'update': {\n        const { id, ...updateData } = args;\n        if (!id) {\n          throw new Error('ID is required for update');\n        }\n\n        const existing = await collection.get(id);\n        if (!existing) {\n          throw new Error('Object not found');\n        }\n\n        // Update properties\n        Object.assign(existing, updateData);\n\n        // Add user context\n        if (this.context.user) {\n          (existing as any).updated_by = this.context.user.id;\n        }\n\n        await existing.save();\n\n        return existing;\n      }\n\n      case 'delete': {\n        if (!args.id) {\n          throw new Error('ID is required for delete');\n        }\n\n        const toDelete = await collection.get(args.id);\n        if (!toDelete) {\n          throw new Error('Object not found');\n        }\n\n        await toDelete.delete();\n\n        return { success: true, message: 'Object deleted successfully' };\n      }\n\n      default:\n        // Handle custom actions\n        return this.executeCustomAction(collection, action, args);\n    }\n  }\n\n  /**\n   * Execute a custom action on a collection/object\n   */\n  private async executeCustomAction(\n    collection: SmrtCollection<any>,\n    action: string,\n    args: any,\n  ): Promise<any> {\n    const { id, options = {}, ...directArgs } = args;\n\n    try {\n      // If an ID is provided, get the specific object and call the method on it\n      if (id) {\n        const object = await collection.get(id);\n        if (!object) {\n          throw new Error('Object not found');\n        }\n\n        // Check if the method exists on the object instance\n        if (typeof object[action] === 'function') {\n          // Call the method with the provided options\n          // If options is provided, use it; otherwise use directArgs\n          const methodArgs =\n            Object.keys(options).length > 0 ? options : directArgs;\n          const result = await object[action](methodArgs);\n          return result;\n        } else {\n          throw new Error(`Method '${action}' not found on object instance`);\n        }\n      } else {\n        // No ID provided, try to call the method on the collection\n        if (typeof (collection as any)[action] === 'function') {\n          const methodArgs =\n            Object.keys(options).length > 0 ? options : directArgs;\n          const result = await (collection as any)[action](methodArgs);\n          return result;\n        } else {\n          throw new Error(\n            `Method '${action}' not found on collection. For object-specific actions, provide an 'id' parameter.`,\n          );\n        }\n      }\n    } catch (error) {\n      throw new Error(\n        `Failed to execute custom action '${action}': ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n  }\n\n  /**\n   * Generate MCP server info\n   */\n  getServerInfo() {\n    return {\n      name: this.config.server?.name,\n      version: this.config.server?.version,\n      description: this.config.description,\n    };\n  }\n\n  /**\n   * Generate complete MCP server with stdio transport\n   *\n   * Creates a runnable Node.js script that exposes SMRT objects as MCP tools.\n   * The generated server includes:\n   * - Stdio transport integration\n   * - Tool registration from ObjectRegistry\n   * - Error handling and logging\n   * - Graceful shutdown\n   *\n   * @param options - Server generation options\n   * @returns Promise that resolves when all files are written\n   *\n   * @example\n   * ```typescript\n   * const generator = new MCPGenerator({\n   *   name: 'my-app',\n   *   version: '1.0.0'\n   * });\n   *\n   * await generator.generateServer({\n   *   outputPath: 'dist/mcp-server.js',\n   *   serverName: 'my-app-mcp',\n   *   debug: true\n   * });\n   * ```\n   */\n  async generateServer(options: {\n    /** Path to output server file (relative or absolute) */\n    outputPath?: string;\n\n    /** Server name for configuration */\n    serverName?: string;\n\n    /** Server version */\n    serverVersion?: string;\n\n    /** Enable debug logging */\n    debug?: boolean;\n\n    /** Generate Claude Desktop configuration example */\n    generateClaudeConfigFile?: boolean;\n\n    /** Generate README documentation */\n    generateReadme?: boolean;\n  } = {}): Promise<void> {\n    const {\n      outputPath = 'dist/mcp-server.js',\n      serverName = this.config.name || 'smrt-mcp-server',\n      serverVersion = this.config.version || '1.0.0',\n      debug = false,\n      generateClaudeConfigFile = true,\n      generateReadme = true,\n    } = options;\n\n    // Resolve output path\n    const resolvedPath = resolve(process.cwd(), outputPath);\n    const outputDir = dirname(resolvedPath);\n\n    // Ensure output directory exists\n    await mkdir(outputDir, { recursive: true });\n\n    // Generate server code\n    const runtimeOptions: RuntimeOptions = {\n      name: serverName,\n      version: serverVersion,\n      description: this.config.description,\n      config: this.config,\n      context: this.context,\n      debug,\n    };\n\n    const serverCode = generateRuntimeBootstrap(runtimeOptions);\n\n    // Write server file\n    await writeFile(resolvedPath, serverCode, 'utf-8');\n    console.log(`✅ Generated MCP server: ${resolvedPath}`);\n\n    // Generate Claude Desktop configuration example\n    if (generateClaudeConfigFile) {\n      const claudeConfig = generateClaudeConfig(serverName, resolvedPath);\n      const claudeConfigPath = resolve(outputDir, 'claude-config.example.json');\n      await writeFile(\n        claudeConfigPath,\n        JSON.stringify(claudeConfig, null, 2),\n        'utf-8',\n      );\n      console.log(`✅ Generated Claude config example: ${claudeConfigPath}`);\n    }\n\n    // Generate README documentation\n    if (generateReadme) {\n      const readme = generateMCPDocumentation(serverName, outputPath);\n      const readmePath = resolve(outputDir, 'MCP-README.md');\n      await writeFile(readmePath, readme, 'utf-8');\n      console.log(`✅ Generated MCP documentation: ${readmePath}`);\n    }\n\n    // Generate npm script suggestion\n    const mcpScript = generateMCPScript(outputPath);\n    console.log(`\\n📝 Add this to your package.json scripts:`);\n    console.log(`   \"mcp\": \"${mcpScript}\"\\n`);\n  }\n}\n"],"names":["collection"],"mappings":"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"}