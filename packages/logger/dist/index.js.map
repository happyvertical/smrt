{"version":3,"file":"index.js","sources":["../src/console.ts","../src/adapter.ts","../src/index.ts"],"sourcesContent":["/**\n * Console logger implementation with configurable log levels\n */\n\nimport type { Logger, LogLevel } from './logger.js';\n\n/**\n * Console-based logger with level filtering\n *\n * Logs are written to console with appropriate severity levels.\n * Messages are only output if they meet the configured log level threshold.\n *\n * @example\n * ```typescript\n * const logger = new ConsoleLogger('info');\n * logger.debug('Debug message');  // Not output (below 'info')\n * logger.info('Info message');    // Output\n * logger.error('Error message');  // Output\n * ```\n */\nexport class ConsoleLogger implements Logger {\n  private static readonly LEVELS: ReadonlyArray<LogLevel> = [\n    'debug',\n    'info',\n    'warn',\n    'error',\n  ];\n\n  constructor(private level: LogLevel = 'info') {}\n\n  /**\n   * Check if a log level should be output\n   *\n   * @param level - Log level to check\n   * @returns True if level meets threshold\n   */\n  private shouldLog(level: LogLevel): boolean {\n    const currentIndex = ConsoleLogger.LEVELS.indexOf(this.level);\n    const messageIndex = ConsoleLogger.LEVELS.indexOf(level);\n    return messageIndex >= currentIndex;\n  }\n\n  /**\n   * Format context for console output\n   *\n   * @param context - Structured metadata\n   * @returns Formatted context string\n   */\n  private formatContext(context?: Record<string, unknown>): string {\n    if (!context || Object.keys(context).length === 0) {\n      return '';\n    }\n    return ` ${JSON.stringify(context)}`;\n  }\n\n  debug(message: string, context?: Record<string, unknown>): void {\n    if (this.shouldLog('debug')) {\n      console.debug(`[DEBUG] ${message}${this.formatContext(context)}`);\n    }\n  }\n\n  info(message: string, context?: Record<string, unknown>): void {\n    if (this.shouldLog('info')) {\n      console.info(`[INFO] ${message}${this.formatContext(context)}`);\n    }\n  }\n\n  warn(message: string, context?: Record<string, unknown>): void {\n    if (this.shouldLog('warn')) {\n      console.warn(`[WARN] ${message}${this.formatContext(context)}`);\n    }\n  }\n\n  error(message: string, context?: Record<string, unknown>): void {\n    if (this.shouldLog('error')) {\n      console.error(`[ERROR] ${message}${this.formatContext(context)}`);\n    }\n  }\n}\n","/**\n * Signal adapter for structured logging\n */\n\nimport type { Signal, ISignalAdapter } from '@have/types';\nimport type { Logger } from './logger.js';\n\n/**\n * Logger Adapter - Converts signals to structured log messages\n *\n * Transforms signals from the SMRT framework into structured log entries.\n * Each signal type is mapped to an appropriate log level:\n * - start → debug\n * - step → debug\n * - end → info\n * - error → error\n *\n * @example\n * ```typescript\n * const logger = new ConsoleLogger('info');\n * const adapter = new LoggerAdapter(logger);\n * signalBus.register(adapter);\n * ```\n */\nexport class LoggerAdapter implements ISignalAdapter {\n  constructor(private logger: Logger) {}\n\n  /**\n   * Handle a signal and log appropriately\n   *\n   * @param signal - Signal to log\n   */\n  async handle(signal: Signal): Promise<void> {\n    const context: Record<string, unknown> = {\n      id: signal.id,\n      objectId: signal.objectId,\n      className: signal.className,\n      method: signal.method,\n      timestamp: signal.timestamp,\n    };\n\n    // Add optional fields if present\n    if (signal.duration !== undefined) {\n      context.duration = signal.duration;\n    }\n\n    if (signal.metadata) {\n      context.metadata = signal.metadata;\n    }\n\n    switch (signal.type) {\n      case 'start':\n        this.logger.debug(\n          `${signal.className}.${signal.method}() started`,\n          context,\n        );\n        break;\n\n      case 'step':\n        this.logger.debug(\n          `${signal.className}.${signal.method}() step: ${signal.step || 'unknown'}`,\n          context,\n        );\n        break;\n\n      case 'end':\n        this.logger.info(\n          `${signal.className}.${signal.method}() completed in ${signal.duration}ms`,\n          {\n            ...context,\n            result: signal.result !== undefined ? 'present' : 'none',\n          },\n        );\n        break;\n\n      case 'error':\n        this.logger.error(\n          `${signal.className}.${signal.method}() failed: ${signal.error?.message || 'Unknown error'}`,\n          {\n            ...context,\n            error: signal.error\n              ? {\n                  message: signal.error.message,\n                  name: signal.error.name,\n                  stack: signal.error.stack,\n                }\n              : undefined,\n          },\n        );\n        break;\n    }\n  }\n}\n","/**\n * @have/logger - Structured logging for HAVE SDK\n *\n * Provides a structured logging interface with signal adapter integration.\n * Supports configurable log levels and console output.\n *\n * @example\n * ```typescript\n * import { createLogger, LoggerAdapter } from '@have/logger';\n * import { SignalBus } from '@have/smrt';\n *\n * // Create logger\n * const logger = createLogger('info');\n * logger.info('Application started');\n *\n * // Integrate with signals\n * const signalBus = new SignalBus();\n * signalBus.register(new LoggerAdapter(logger));\n * ```\n */\n\nexport { ConsoleLogger } from './console.js';\nexport { LoggerAdapter } from './adapter.js';\nexport type { Logger, LogLevel, LoggerConfig } from './logger.js';\n\nimport { ConsoleLogger } from './console.js';\nimport type { Logger, LoggerConfig } from './logger.js';\n\n/**\n * No-op logger that discards all log messages\n *\n * Used when logging is disabled (config: false)\n */\nclass NoopLogger implements Logger {\n  debug(_message: string, _context?: Record<string, unknown>): void {\n    // No-op\n  }\n\n  info(_message: string, _context?: Record<string, unknown>): void {\n    // No-op\n  }\n\n  warn(_message: string, _context?: Record<string, unknown>): void {\n    // No-op\n  }\n\n  error(_message: string, _context?: Record<string, unknown>): void {\n    // No-op\n  }\n}\n\n/**\n * Create a logger from configuration\n *\n * @param config - Logger configuration (boolean or object)\n * @returns Configured logger instance\n *\n * @example\n * ```typescript\n * // Console logger with 'info' level\n * const logger1 = createLogger(true);\n *\n * // No-op logger (all log calls are discarded)\n * const logger2 = createLogger(false);\n *\n * // Console logger with 'debug' level\n * const logger3 = createLogger({ level: 'debug' });\n *\n * // Custom log level\n * const logger4 = createLogger({ level: 'warn' });\n * ```\n */\nexport function createLogger(config: LoggerConfig): Logger {\n  if (typeof config === 'boolean') {\n    // When false, return no-op logger that discards all messages\n    return config ? new ConsoleLogger('info') : new NoopLogger();\n  }\n\n  const level = config.level || 'info';\n  return new ConsoleLogger(level);\n}\n"],"names":["ConsoleLogger"],"mappings":"AAoBO,MAAM,cAAgC;AAAA,EAQ3C,YAAoB,QAAkB,QAAQ;AAA1B,SAAA,QAAA;AAAA,EAA2B;AAAA,EAP/C,OAAwB,SAAkC;AAAA,IACxD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWM,UAAU,OAA0B;AAC1C,UAAM,eAAe,cAAc,OAAO,QAAQ,KAAK,KAAK;AAC5D,UAAM,eAAe,cAAc,OAAO,QAAQ,KAAK;AACvD,WAAO,gBAAgB;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,cAAc,SAA2C;AAC/D,QAAI,CAAC,WAAW,OAAO,KAAK,OAAO,EAAE,WAAW,GAAG;AACjD,aAAO;AAAA,IACT;AACA,WAAO,IAAI,KAAK,UAAU,OAAO,CAAC;AAAA,EACpC;AAAA,EAEA,MAAM,SAAiB,SAAyC;AAC9D,QAAI,KAAK,UAAU,OAAO,GAAG;AAC3B,cAAQ,MAAM,WAAW,OAAO,GAAG,KAAK,cAAc,OAAO,CAAC,EAAE;AAAA,IAClE;AAAA,EACF;AAAA,EAEA,KAAK,SAAiB,SAAyC;AAC7D,QAAI,KAAK,UAAU,MAAM,GAAG;AAC1B,cAAQ,KAAK,UAAU,OAAO,GAAG,KAAK,cAAc,OAAO,CAAC,EAAE;AAAA,IAChE;AAAA,EACF;AAAA,EAEA,KAAK,SAAiB,SAAyC;AAC7D,QAAI,KAAK,UAAU,MAAM,GAAG;AAC1B,cAAQ,KAAK,UAAU,OAAO,GAAG,KAAK,cAAc,OAAO,CAAC,EAAE;AAAA,IAChE;AAAA,EACF;AAAA,EAEA,MAAM,SAAiB,SAAyC;AAC9D,QAAI,KAAK,UAAU,OAAO,GAAG;AAC3B,cAAQ,MAAM,WAAW,OAAO,GAAG,KAAK,cAAc,OAAO,CAAC,EAAE;AAAA,IAClE;AAAA,EACF;AACF;ACtDO,MAAM,cAAwC;AAAA,EACnD,YAAoB,QAAgB;AAAhB,SAAA,SAAA;AAAA,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOrC,MAAM,OAAO,QAA+B;AAC1C,UAAM,UAAmC;AAAA,MACvC,IAAI,OAAO;AAAA,MACX,UAAU,OAAO;AAAA,MACjB,WAAW,OAAO;AAAA,MAClB,QAAQ,OAAO;AAAA,MACf,WAAW,OAAO;AAAA,IAAA;AAIpB,QAAI,OAAO,aAAa,QAAW;AACjC,cAAQ,WAAW,OAAO;AAAA,IAC5B;AAEA,QAAI,OAAO,UAAU;AACnB,cAAQ,WAAW,OAAO;AAAA,IAC5B;AAEA,YAAQ,OAAO,MAAA;AAAA,MACb,KAAK;AACH,aAAK,OAAO;AAAA,UACV,GAAG,OAAO,SAAS,IAAI,OAAO,MAAM;AAAA,UACpC;AAAA,QAAA;AAEF;AAAA,MAEF,KAAK;AACH,aAAK,OAAO;AAAA,UACV,GAAG,OAAO,SAAS,IAAI,OAAO,MAAM,YAAY,OAAO,QAAQ,SAAS;AAAA,UACxE;AAAA,QAAA;AAEF;AAAA,MAEF,KAAK;AACH,aAAK,OAAO;AAAA,UACV,GAAG,OAAO,SAAS,IAAI,OAAO,MAAM,mBAAmB,OAAO,QAAQ;AAAA,UACtE;AAAA,YACE,GAAG;AAAA,YACH,QAAQ,OAAO,WAAW,SAAY,YAAY;AAAA,UAAA;AAAA,QACpD;AAEF;AAAA,MAEF,KAAK;AACH,aAAK,OAAO;AAAA,UACV,GAAG,OAAO,SAAS,IAAI,OAAO,MAAM,cAAc,OAAO,OAAO,WAAW,eAAe;AAAA,UAC1F;AAAA,YACE,GAAG;AAAA,YACH,OAAO,OAAO,QACV;AAAA,cACE,SAAS,OAAO,MAAM;AAAA,cACtB,MAAM,OAAO,MAAM;AAAA,cACnB,OAAO,OAAO,MAAM;AAAA,YAAA,IAEtB;AAAA,UAAA;AAAA,QACN;AAEF;AAAA,IAAA;AAAA,EAEN;AACF;AC3DA,MAAM,WAA6B;AAAA,EACjC,MAAM,UAAkB,UAA0C;AAAA,EAElE;AAAA,EAEA,KAAK,UAAkB,UAA0C;AAAA,EAEjE;AAAA,EAEA,KAAK,UAAkB,UAA0C;AAAA,EAEjE;AAAA,EAEA,MAAM,UAAkB,UAA0C;AAAA,EAElE;AACF;AAuBO,SAAS,aAAa,QAA8B;AACzD,MAAI,OAAO,WAAW,WAAW;AAE/B,WAAO,SAAS,IAAIA,cAAc,MAAM,IAAI,IAAI,WAAA;AAAA,EAClD;AAEA,QAAM,QAAQ,OAAO,SAAS;AAC9B,SAAO,IAAIA,cAAc,KAAK;AAChC;"}