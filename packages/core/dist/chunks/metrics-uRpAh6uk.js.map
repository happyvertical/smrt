{"version":3,"file":"metrics-uRpAh6uk.js","sources":["../../src/adapters/metrics.ts"],"sourcesContent":["/**\n * Metrics Adapter for Signal System\n *\n * Tracks execution metrics for SMRT objects in Prometheus-compatible format.\n * Collects counts, durations, error rates, and success rates.\n */\n\nimport type { SignalAdapter, Signal } from '@smrt/types';\n\n/**\n * Execution metrics for a specific method\n */\nexport interface MethodMetrics {\n  /** Total number of executions */\n  count: number;\n  /** Number of successful executions */\n  successCount: number;\n  /** Number of failed executions */\n  errorCount: number;\n  /** Total execution time across all calls (ms) */\n  totalDuration: number;\n  /** Minimum execution time (ms) */\n  minDuration: number;\n  /** Maximum execution time (ms) */\n  maxDuration: number;\n  /** Last execution timestamp */\n  lastExecuted: number;\n}\n\n/**\n * Aggregated metrics storage\n */\nexport interface MetricsSnapshot {\n  /** Metrics per class.method combination */\n  methods: Record<string, MethodMetrics>;\n  /** Total signals processed */\n  totalSignals: number;\n  /** Metrics collection start time */\n  startTime: number;\n}\n\n/**\n * Metrics Adapter - Tracks execution metrics for observability\n *\n * Provides Prometheus-style metrics for SMRT method executions:\n * - Execution counts (total, success, error)\n * - Duration statistics (min, max, avg)\n * - Success/error rates\n *\n * @example\n * ```typescript\n * const metrics = new MetricsAdapter();\n * signalBus.register(metrics);\n *\n * // Later, get metrics snapshot\n * const snapshot = metrics.getMetrics();\n * console.log(snapshot.methods['Product.analyze']);\n * ```\n */\nexport class MetricsAdapter implements SignalAdapter {\n  private metrics: Map<string, MethodMetrics> = new Map();\n  private totalSignals = 0;\n  private startTime = Date.now();\n\n  /**\n   * Handle a signal and update metrics\n   *\n   * @param signal - Signal to process\n   */\n  async handle(signal: Signal): Promise<void> {\n    this.totalSignals++;\n\n    // Only track end and error signals (they have duration)\n    if (signal.type !== 'end' && signal.type !== 'error') {\n      return;\n    }\n\n    const key = `${signal.className}.${signal.method}`;\n    let methodMetrics = this.metrics.get(key);\n\n    // Initialize metrics for new method\n    if (!methodMetrics) {\n      methodMetrics = {\n        count: 0,\n        successCount: 0,\n        errorCount: 0,\n        totalDuration: 0,\n        minDuration: Number.POSITIVE_INFINITY,\n        maxDuration: 0,\n        lastExecuted: 0,\n      };\n      this.metrics.set(key, methodMetrics);\n    }\n\n    // Update counts\n    methodMetrics.count++;\n    if (signal.type === 'end') {\n      methodMetrics.successCount++;\n    } else {\n      methodMetrics.errorCount++;\n    }\n\n    // Update duration statistics\n    if (signal.duration !== undefined) {\n      methodMetrics.totalDuration += signal.duration;\n      methodMetrics.minDuration = Math.min(\n        methodMetrics.minDuration,\n        signal.duration,\n      );\n      methodMetrics.maxDuration = Math.max(\n        methodMetrics.maxDuration,\n        signal.duration,\n      );\n    }\n\n    methodMetrics.lastExecuted = signal.timestamp.getTime();\n  }\n\n  /**\n   * Get current metrics snapshot\n   *\n   * @returns Snapshot of all collected metrics\n   */\n  getMetrics(): MetricsSnapshot {\n    const methods: Record<string, MethodMetrics> = {};\n\n    for (const [key, metrics] of this.metrics.entries()) {\n      methods[key] = { ...metrics };\n    }\n\n    return {\n      methods,\n      totalSignals: this.totalSignals,\n      startTime: this.startTime,\n    };\n  }\n\n  /**\n   * Get metrics for a specific method\n   *\n   * @param className - Class name\n   * @param methodName - Method name\n   * @returns Metrics for the method, or undefined if not found\n   */\n  getMethodMetrics(\n    className: string,\n    methodName: string,\n  ): MethodMetrics | undefined {\n    const key = `${className}.${methodName}`;\n    const metrics = this.metrics.get(key);\n    return metrics ? { ...metrics } : undefined;\n  }\n\n  /**\n   * Get average duration for a method\n   *\n   * @param className - Class name\n   * @param methodName - Method name\n   * @returns Average duration in ms, or 0 if no executions\n   */\n  getAverageDuration(className: string, methodName: string): number {\n    const metrics = this.getMethodMetrics(className, methodName);\n    if (!metrics || metrics.count === 0) {\n      return 0;\n    }\n    return metrics.totalDuration / metrics.count;\n  }\n\n  /**\n   * Get success rate for a method\n   *\n   * @param className - Class name\n   * @param methodName - Method name\n   * @returns Success rate (0-1), or 0 if no executions\n   */\n  getSuccessRate(className: string, methodName: string): number {\n    const metrics = this.getMethodMetrics(className, methodName);\n    if (!metrics || metrics.count === 0) {\n      return 0;\n    }\n    return metrics.successCount / metrics.count;\n  }\n\n  /**\n   * Get error rate for a method\n   *\n   * @param className - Class name\n   * @param methodName - Method name\n   * @returns Error rate (0-1), or 0 if no executions\n   */\n  getErrorRate(className: string, methodName: string): number {\n    const metrics = this.getMethodMetrics(className, methodName);\n    if (!metrics || metrics.count === 0) {\n      return 0;\n    }\n    return metrics.errorCount / metrics.count;\n  }\n\n  /**\n   * Export metrics in Prometheus text format\n   *\n   * @returns Prometheus-compatible metrics text\n   */\n  toPrometheusFormat(): string {\n    const lines: string[] = [];\n\n    // Add help and type declarations\n    lines.push('# HELP smrt_method_executions_total Total method executions');\n    lines.push('# TYPE smrt_method_executions_total counter');\n\n    lines.push('# HELP smrt_method_duration_seconds Method execution duration');\n    lines.push('# TYPE smrt_method_duration_seconds histogram');\n\n    lines.push('# HELP smrt_method_errors_total Total method errors');\n    lines.push('# TYPE smrt_method_errors_total counter');\n\n    // Generate metrics for each method\n    for (const [key, metrics] of this.metrics.entries()) {\n      const [className, methodName] = key.split('.');\n      const labels = `class=\"${className}\",method=\"${methodName}\"`;\n\n      // Execution count\n      lines.push(`smrt_method_executions_total{${labels}} ${metrics.count}`);\n\n      // Success count\n      lines.push(\n        `smrt_method_executions_total{${labels},status=\"success\"} ${metrics.successCount}`,\n      );\n\n      // Error count\n      lines.push(`smrt_method_errors_total{${labels}} ${metrics.errorCount}`);\n\n      // Duration statistics (convert to seconds for Prometheus)\n      const avgDuration = metrics.totalDuration / metrics.count / 1000;\n      const minDuration = metrics.minDuration / 1000;\n      const maxDuration = metrics.maxDuration / 1000;\n\n      lines.push(\n        `smrt_method_duration_seconds{${labels},quantile=\"0.0\"} ${minDuration}`,\n      );\n      lines.push(\n        `smrt_method_duration_seconds{${labels},quantile=\"0.5\"} ${avgDuration}`,\n      );\n      lines.push(\n        `smrt_method_duration_seconds{${labels},quantile=\"1.0\"} ${maxDuration}`,\n      );\n    }\n\n    return lines.join('\\n') + '\\n';\n  }\n\n  /**\n   * Reset all metrics\n   *\n   * Clears all collected metrics and resets counters.\n   */\n  reset(): void {\n    this.metrics.clear();\n    this.totalSignals = 0;\n    this.startTime = Date.now();\n  }\n}\n"],"names":[],"mappings":"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"}