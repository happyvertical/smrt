{"version":3,"file":"anthropic-wKObwxfe.js","sources":["../../src/shared/providers/anthropic.ts"],"sourcesContent":["/**\n * Anthropic Claude provider implementation\n *\n * Provides a standardized interface for interacting with Anthropic's Claude models,\n * including chat completions, streaming responses, and vision capabilities.\n * Note: Claude models do not support embeddings - use OpenAI or another provider for that.\n */\n\nimport type {\n  AICapabilities,\n  AIInterface,\n  AIMessage,\n  AIModel,\n  AIResponse,\n  AnthropicOptions,\n  ChatOptions,\n  CompletionOptions,\n  EmbeddingOptions,\n  EmbeddingResponse,\n} from '../types';\nimport {\n  AIError,\n  AuthenticationError,\n  ContextLengthError,\n  ModelNotFoundError,\n  RateLimitError,\n} from '../types';\n\n// Note: This implementation will require @anthropic-ai/sdk package\n// For now, this is a placeholder that defines the interface\n\n/**\n * Anthropic Claude provider implementation that handles all interactions with Anthropic's API.\n * Supports Claude models, streaming, vision capabilities, and function calling.\n * Does not support embeddings (use OpenAI or another provider for embeddings).\n */\nexport class AnthropicProvider implements AIInterface {\n  private options: AnthropicOptions;\n  private client: any; // Will be Anthropic instance from @anthropic-ai/sdk\n\n  /**\n   * Creates a new Anthropic provider instance\n   * @param options - Configuration options for the Anthropic provider\n   */\n  constructor(options: AnthropicOptions) {\n    this.options = {\n      defaultModel: 'claude-3-5-sonnet-20241022',\n      anthropicVersion: '2023-06-01',\n      ...options,\n    };\n\n    // Initialize Anthropic client\n    this.initializeClientSync();\n  }\n\n  private initializeClientSync() {\n    try {\n      // Dynamic import in constructor - this will work if the package is installed\n      import('@anthropic-ai/sdk')\n        .then(({ Anthropic }) => {\n          this.client = new Anthropic({\n            apiKey: this.options.apiKey,\n            baseURL: this.options.baseUrl,\n            timeout: this.options.timeout,\n            maxRetries: this.options.maxRetries,\n            defaultHeaders: {\n              'anthropic-version': this.options.anthropicVersion,\n              ...this.options.headers,\n            },\n          });\n        })\n        .catch(() => {\n          // Client will be null and we'll handle it in methods\n        });\n    } catch (_error) {\n      // Client will be null and we'll handle it in methods\n    }\n  }\n\n  /**\n   * Ensures the Anthropic client is initialized by dynamically importing the SDK\n   * @throws {AIError} When the Anthropic SDK cannot be loaded\n   * @private\n   */\n  private async ensureClient() {\n    if (!this.client) {\n      try {\n        const { Anthropic } = await import('@anthropic-ai/sdk');\n        this.client = new Anthropic({\n          apiKey: this.options.apiKey,\n          baseURL: this.options.baseUrl,\n          timeout: this.options.timeout,\n          maxRetries: this.options.maxRetries,\n          defaultHeaders: {\n            'anthropic-version': this.options.anthropicVersion,\n            ...this.options.headers,\n          },\n        });\n      } catch (_error) {\n        throw new AIError(\n          'Failed to initialize Anthropic client. Make sure @anthropic-ai/sdk is installed.',\n          'INITIALIZATION_ERROR',\n          'anthropic',\n        );\n      }\n    }\n  }\n\n  /**\n   * Generate a chat completion using Claude models\n   * @param messages - Array of conversation messages\n   * @param options - Optional configuration for the chat completion\n   * @returns Promise resolving to the AI response with content and metadata\n   * @throws {AIError} When the API request fails or SDK is not available\n   *\n   * @example\n   * ```typescript\n   * const response = await provider.chat([\n   *   { role: 'system', content: 'You are a helpful assistant.' },\n   *   { role: 'user', content: 'Explain quantum computing' }\n   * ], {\n   *   model: 'claude-3-5-sonnet-20241022',\n   *   maxTokens: 1000\n   * });\n   * ```\n   */\n  async chat(\n    messages: AIMessage[],\n    options: ChatOptions = {},\n  ): Promise<AIResponse> {\n    try {\n      await this.ensureClient();\n\n      const { system, anthropicMessages } =\n        this.mapMessagesToAnthropic(messages);\n\n      // Build request parameters\n      const requestParams: Record<string, any> = {\n        model: options.model || this.options.defaultModel,\n        messages: anthropicMessages,\n        max_tokens: options.maxTokens || 4096,\n        temperature: options.temperature,\n        top_p: options.topP,\n        stop_sequences: Array.isArray(options.stop)\n          ? options.stop\n          : options.stop\n            ? [options.stop]\n            : undefined,\n        system: system || undefined,\n        tools:\n          options.tools && options.tools.length > 0\n            ? options.tools.map((tool) => ({\n                name: tool.function.name,\n                description: tool.function.description || '',\n                input_schema: tool.function.parameters || { type: 'object' },\n              }))\n            : undefined,\n        tool_choice: this.mapToolChoice(options.toolChoice),\n        stream: false,\n      };\n\n      // Add response format if specified\n      // NOTE: Anthropic doesn't have native JSON mode like OpenAI. This is a prompt-based\n      // approach that instructs the model to output JSON, but doesn't guarantee valid JSON.\n      // For critical use cases, validate and parse the response with error handling.\n      if (options.responseFormat?.type === 'json_object') {\n        const jsonInstruction =\n          '\\n\\nIMPORTANT: You must respond with valid JSON only. Do not include any explanatory text outside the JSON object.';\n        requestParams.system = requestParams.system\n          ? requestParams.system + jsonInstruction\n          : jsonInstruction.trim();\n      }\n\n      const response = await this.client.messages.create(requestParams);\n\n      // Extract text content and tool calls from response\n      const textContent = response.content\n        .filter((block: any) => block.type === 'text')\n        .map((block: any) => block.text)\n        .join('');\n\n      const toolCalls = response.content\n        .filter((block: any) => block.type === 'tool_use')\n        .map((block: any) => ({\n          id: block.id,\n          type: 'function' as const,\n          function: {\n            name: block.name,\n            arguments: JSON.stringify(block.input),\n          },\n        }));\n\n      return {\n        content: textContent,\n        model: response.model,\n        finishReason: this.mapFinishReason(response.stop_reason),\n        usage: {\n          promptTokens: response.usage.input_tokens,\n          completionTokens: response.usage.output_tokens,\n          totalTokens:\n            response.usage.input_tokens + response.usage.output_tokens,\n        },\n        toolCalls: toolCalls.length > 0 ? toolCalls : undefined,\n      };\n    } catch (error) {\n      throw this.mapError(error);\n    }\n  }\n\n  async complete(\n    prompt: string,\n    options: CompletionOptions = {},\n  ): Promise<AIResponse> {\n    return this.chat([{ role: 'user', content: prompt }], {\n      model: options.model,\n      maxTokens: options.maxTokens,\n      temperature: options.temperature,\n      topP: options.topP,\n      n: options.n,\n      stop: options.stop,\n      stream: options.stream,\n      onProgress: options.onProgress,\n    });\n  }\n\n  async embed(\n    _text: string | string[],\n    _options: EmbeddingOptions = {},\n  ): Promise<EmbeddingResponse> {\n    // Anthropic Claude doesn't provide embeddings API\n    throw new AIError(\n      'Anthropic Claude does not support embeddings. Use OpenAI or another provider for embeddings.',\n      'NOT_SUPPORTED',\n      'anthropic',\n    );\n  }\n\n  async *stream(\n    messages: AIMessage[],\n    options: ChatOptions = {},\n  ): AsyncIterable<string> {\n    try {\n      await this.ensureClient();\n\n      const { system, anthropicMessages } =\n        this.mapMessagesToAnthropic(messages);\n\n      const stream = await this.client.messages.create({\n        model: options.model || this.options.defaultModel,\n        messages: anthropicMessages,\n        max_tokens: options.maxTokens || 4096,\n        temperature: options.temperature,\n        top_p: options.topP,\n        stop_sequences: Array.isArray(options.stop)\n          ? options.stop\n          : options.stop\n            ? [options.stop]\n            : undefined,\n        system: system || undefined,\n        stream: true,\n      });\n\n      for await (const chunk of stream) {\n        if (\n          chunk.type === 'content_block_delta' &&\n          chunk.delta.type === 'text_delta'\n        ) {\n          if (options.onProgress) {\n            options.onProgress(chunk.delta.text);\n          }\n          yield chunk.delta.text;\n        }\n      }\n    } catch (error) {\n      throw this.mapError(error);\n    }\n  }\n\n  async countTokens(text: string): Promise<number> {\n    // Anthropic doesn't provide a direct token counting API\n    // This is an approximation - Claude uses a different tokenizer than OpenAI\n    return Math.ceil(text.length / 3.5); // Slightly different ratio for Claude\n  }\n\n  async getModels(): Promise<AIModel[]> {\n    // Return static list of known Claude models\n    return [\n      {\n        id: 'claude-3-5-sonnet-20241022',\n        name: 'Claude 3.5 Sonnet',\n        description: 'Most intelligent Claude model with balanced performance',\n        contextLength: 200000,\n        capabilities: ['text', 'chat', 'vision', 'functions'],\n        supportsFunctions: true,\n        supportsVision: true,\n      },\n      {\n        id: 'claude-3-5-haiku-20241022',\n        name: 'Claude 3.5 Haiku',\n        description: 'Fastest Claude model for simple tasks',\n        contextLength: 200000,\n        capabilities: ['text', 'chat', 'vision'],\n        supportsFunctions: true,\n        supportsVision: true,\n      },\n      {\n        id: 'claude-3-opus-20240229',\n        name: 'Claude 3 Opus',\n        description: 'Most powerful Claude model for complex tasks',\n        contextLength: 200000,\n        capabilities: ['text', 'chat', 'vision', 'functions'],\n        supportsFunctions: true,\n        supportsVision: true,\n      },\n      {\n        id: 'claude-3-sonnet-20240229',\n        name: 'Claude 3 Sonnet',\n        description: 'Balanced Claude model for most tasks',\n        contextLength: 200000,\n        capabilities: ['text', 'chat', 'vision'],\n        supportsFunctions: true,\n        supportsVision: true,\n      },\n      {\n        id: 'claude-3-haiku-20240307',\n        name: 'Claude 3 Haiku',\n        description: 'Fast Claude model for simple tasks',\n        contextLength: 200000,\n        capabilities: ['text', 'chat', 'vision'],\n        supportsFunctions: false,\n        supportsVision: true,\n      },\n    ];\n  }\n\n  async getCapabilities(): Promise<AICapabilities> {\n    return {\n      chat: true,\n      completion: true,\n      embeddings: false, // Claude doesn't support embeddings\n      streaming: true,\n      functions: true,\n      vision: true,\n      fineTuning: false,\n      maxContextLength: 200000,\n      supportedOperations: [\n        'chat',\n        'completion',\n        'streaming',\n        'functions',\n        'vision',\n      ],\n    };\n  }\n\n  private mapMessagesToAnthropic(messages: AIMessage[]): {\n    system?: string;\n    anthropicMessages: Array<{ role: 'user' | 'assistant'; content: string }>;\n  } {\n    // Anthropic handles system messages separately\n    let system: string | undefined;\n    const anthropicMessages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n    }> = [];\n\n    for (const message of messages) {\n      if (message.role === 'system') {\n        // Combine multiple system messages\n        system = system ? `${system}\\n\\n${message.content}` : message.content;\n      } else {\n        anthropicMessages.push({\n          role: message.role === 'assistant' ? 'assistant' : 'user',\n          content: message.content,\n        });\n      }\n    }\n\n    return { system, anthropicMessages };\n  }\n\n  private mapToolChoice(\n    toolChoice?: 'auto' | 'none' | { type: 'function'; function: { name: string } },\n  ): any {\n    if (!toolChoice || toolChoice === 'auto') {\n      return { type: 'auto' };\n    }\n\n    if (toolChoice === 'none') {\n      return undefined; // Anthropic doesn't have explicit 'none', just omit tools\n    }\n\n    if (typeof toolChoice === 'object' && toolChoice.type === 'function') {\n      return {\n        type: 'tool',\n        name: toolChoice.function.name,\n      };\n    }\n\n    return { type: 'auto' };\n  }\n\n  private mapFinishReason(reason: string | null): AIResponse['finishReason'] {\n    switch (reason) {\n      case 'end_turn':\n        return 'stop';\n      case 'max_tokens':\n        return 'length';\n      case 'stop_sequence':\n        return 'stop';\n      case 'tool_use':\n        return 'tool_calls';\n      default:\n        return 'stop';\n    }\n  }\n\n  private mapError(error: unknown): AIError {\n    if (error instanceof AIError) {\n      return error;\n    }\n\n    // Map common HTTP status codes from Anthropic API\n    if (typeof error === 'object' && error !== null && 'status' in error) {\n      const apiError = error as { status: number; message?: string };\n      switch (apiError.status) {\n        case 401:\n          return new AuthenticationError('anthropic');\n        case 429:\n          return new RateLimitError('anthropic');\n        case 404:\n          return new ModelNotFoundError(\n            apiError.message || 'Model not found',\n            'anthropic',\n          );\n        case 413:\n          return new ContextLengthError('anthropic');\n      }\n    }\n\n    const errorMessage =\n      error instanceof Error\n        ? error.message\n        : 'Unknown Anthropic error occurred';\n    return new AIError(errorMessage, 'UNKNOWN_ERROR', 'anthropic');\n  }\n}\n"],"names":[],"mappings":"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"}