/**
 * ProfileRelationship model - Connects two profiles with a relationship type
 *
 * Represents directional or reciprocal relationships between profiles.
 * Uses UUID primary key with foreign keys to profiles and relationship type.
 */

import {
  foreignKey,
  oneToMany,
  SmrtObject,
  type SmrtObjectOptions,
  smrt,
} from '@smrt/core';

export interface ProfileRelationshipOptions extends SmrtObjectOptions {
  fromProfileId?: string;
  toProfileId?: string;
  typeId?: string;
  contextProfileId?: string;
}

@smrt({
  api: { include: ['list', 'get', 'create', 'delete'] },
  mcp: { include: ['list', 'get'] },
  cli: true,
})
export class ProfileRelationship extends SmrtObject {
  // id: UUID (auto-generated by SmrtObject)
  fromProfileId = foreignKey('Profile', { required: true }); // Origin profile
  toProfileId = foreignKey('Profile', { required: true }); // Target profile
  typeId = foreignKey('ProfileRelationshipType', { required: true }); // Relationship type
  contextProfileId = foreignKey('Profile'); // Optional tertiary context

  // Relationships
  terms = oneToMany('ProfileRelationshipTerm');

  constructor(options: ProfileRelationshipOptions = {}) {
    super(options);
    // Field values are automatically set by initializePropertiesFromOptions()
    // No need to manually assign Field properties here
  }

  /**
   * Get the relationship type slug
   *
   * @returns The slug of the relationship type
   */
  async getTypeSlug(): Promise<string> {
    const type = await this.loadRelated('typeId');
    return type?.slug || '';
  }

  /**
   * Add a term (time period) to this relationship
   *
   * @param startedAt - Start date of the term
   * @param endedAt - Optional end date of the term
   */
  async addTerm(startedAt: Date, endedAt?: Date): Promise<void> {
    const { ProfileRelationshipTermCollection } = await import(
      '../collections/ProfileRelationshipTermCollection'
    );

    const termCollection = await ProfileRelationshipTermCollection.create(
      this.options,
    );

    const term = await termCollection.create({
      relationshipId: this.id,
      startedAt,
      endedAt,
    });

    await term.save();
  }

  /**
   * End the current active term
   *
   * @param endedAt - End date for the term
   */
  async endCurrentTerm(endedAt: Date): Promise<void> {
    const activeTerm = await this.getActiveTerm();
    if (activeTerm) {
      await activeTerm.end(endedAt);
    }
  }

  /**
   * Get all terms for this relationship
   *
   * @returns Array of ProfileRelationshipTerm instances
   */
  async getTerms(): Promise<ProfileRelationshipTerm[]> {
    const { ProfileRelationshipTermCollection } = await import(
      '../collections/ProfileRelationshipTermCollection'
    );

    const termCollection = await ProfileRelationshipTermCollection.create(
      this.options,
    );

    return await termCollection.getByRelationship(this.id);
  }

  /**
   * Get the active term (no end date)
   *
   * @returns Current term or null if none active
   */
  async getActiveTerm(): Promise<ProfileRelationshipTerm | null> {
    const { ProfileRelationshipTermCollection } = await import(
      '../collections/ProfileRelationshipTermCollection'
    );

    const termCollection = await ProfileRelationshipTermCollection.create(
      this.options,
    );

    return await termCollection.getActiveTerm(this.id);
  }
}
