{"version":3,"file":"cli.js","sources":["../../src/generators/cli.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * CLI command generator for smrt objects\n *\n * Generates admin and development tools from object definitions\n */\n\nimport { createInterface } from 'node:readline';\nimport { type Command, type ParsedArgs, parseCliArgs } from '@have/utils';\nimport type { SmrtCollection } from '../collection';\nimport { ObjectRegistry } from '../registry';\n\n// Lazy-load commands to avoid loading tar dependencies unless needed\nlet _gnodeCommands: Record<string, Command> | null = null;\nlet _generateCommands: Record<string, Command> | null = null;\n\nasync function getGnodeCommands(): Promise<Record<string, Command>> {\n  if (!_gnodeCommands) {\n    const { gnodeCommands } = await import('../cli/commands/index.js');\n    _gnodeCommands = gnodeCommands;\n  }\n  return _gnodeCommands;\n}\n\nasync function getGenerateCommands(): Promise<Record<string, Command>> {\n  if (!_generateCommands) {\n    const { generateCommands } = await import('../cli/commands/index.js');\n    _generateCommands = generateCommands;\n  }\n  return _generateCommands;\n}\n\nexport interface CLIConfig {\n  name?: string;\n  version?: string;\n  description?: string;\n  prompt?: boolean; // Enable interactive prompts\n  colors?: boolean; // Enable colored output\n}\n\nexport interface CLIContext {\n  db?: any;\n  ai?: any;\n  user?: {\n    id: string;\n    roles?: string[];\n  };\n}\n\n// Re-export Command as CLICommand for backward compatibility\nexport type CLICommand = Command;\n\n// Re-export ParsedArgs from utils\nexport type { ParsedArgs } from '@have/utils';\n\n/**\n * Generate CLI commands for smrt objects\n */\nexport class CLIGenerator {\n  private config: CLIConfig;\n  private context: CLIContext;\n  private collections = new Map<string, SmrtCollection<any>>();\n\n  constructor(config: CLIConfig = {}, context: CLIContext = {}) {\n    this.config = {\n      name: 'smrt',\n      version: '1.0.0',\n      description: 'Admin CLI for smrt objects',\n      prompt: true,\n      colors: true,\n      ...config,\n    };\n    this.context = context;\n  }\n\n  /**\n   * Check if running in test environment\n   */\n  private isTestMode(): boolean {\n    return (\n      process.env.NODE_ENV === 'test' ||\n      process.env.VITEST === 'true' ||\n      typeof (global as any).it === 'function' ||\n      typeof (global as any).describe === 'function'\n    );\n  }\n\n  /**\n   * Handle exits safely in test mode\n   */\n  private exitWithError(message: string, code = 1): void {\n    if (this.isTestMode()) {\n      throw new Error(message);\n    }\n    console.error(message);\n    process.exit(code);\n  }\n\n  /**\n   * Generate CLI handler function\n   */\n  generateHandler(): (argv: string[]) => Promise<void> {\n    const commands = this.generateCommands();\n\n    return async (argv: string[]) => {\n      // Parse args first without built-in commands to avoid loading them unnecessarily\n      const parsed = parseCliArgs(argv, commands, {});\n      await this.executeCommand(parsed, commands);\n    };\n  }\n\n  /**\n   * Generate all CLI commands\n   */\n  private generateCommands(): CLICommand[] {\n    const commands: CLICommand[] = [];\n    const registeredClasses = ObjectRegistry.getAllClasses();\n\n    // Generate object commands\n    for (const [name, classInfo] of registeredClasses) {\n      commands.push(...this.generateObjectCommands(name, classInfo));\n    }\n\n    // Add utility commands\n    commands.push(...this.generateUtilityCommands());\n\n    return commands;\n  }\n\n  /**\n   * Generate CRUD commands for a specific object\n   */\n  private generateObjectCommands(\n    objectName: string,\n    _classInfo: any,\n  ): CLICommand[] {\n    const commands: CLICommand[] = [];\n    const lowerName = objectName.toLowerCase();\n    const config = ObjectRegistry.getConfig(objectName);\n    const cliConfig = config.cli;\n\n    // Skip if CLI is disabled\n    if (cliConfig === false) return commands;\n\n    // Check included/excluded commands\n    const excluded =\n      (typeof cliConfig === 'object' ? cliConfig.exclude : []) || [];\n    const included = typeof cliConfig === 'object' ? cliConfig.include : null;\n\n    const shouldInclude = (\n      command: 'list' | 'get' | 'create' | 'update' | 'delete',\n    ) => {\n      if (included && !included.includes(command)) return false;\n      if (excluded.includes(command)) return false;\n      return true;\n    };\n\n    // LIST command\n    if (shouldInclude('list')) {\n      commands.push({\n        name: `${lowerName}:list`,\n        description: `List ${objectName} objects`,\n        aliases: [`${lowerName}:ls`],\n        options: {\n          limit: {\n            type: 'string',\n            description: 'limit number of results',\n            default: '50',\n            short: 'l',\n          },\n          offset: {\n            type: 'string',\n            description: 'offset for pagination',\n            default: '0',\n            short: 'o',\n          },\n          'order-by': { type: 'string', description: 'field to order by' },\n          where: { type: 'string', description: 'filter conditions as JSON' },\n          format: {\n            type: 'string',\n            description: 'output format (table|json)',\n            default: 'table',\n          },\n        },\n        handler: async (_args, options) => {\n          await this.handleList(objectName, options);\n        },\n      });\n    }\n\n    // GET command\n    if (shouldInclude('get')) {\n      commands.push({\n        name: `${lowerName}:get`,\n        description: `Get ${objectName} by ID or slug`,\n        aliases: [`${lowerName}:show`],\n        args: ['id'],\n        options: {\n          format: {\n            type: 'string',\n            description: 'output format (json|yaml)',\n            default: 'json',\n          },\n        },\n        handler: async (args, options) => {\n          await this.handleGet(objectName, args[0], options);\n        },\n      });\n    }\n\n    // CREATE command\n    if (shouldInclude('create')) {\n      const options: Record<string, any> = {\n        interactive: {\n          type: 'boolean',\n          description: 'interactive mode with prompts',\n        },\n        'from-file': { type: 'string', description: 'create from JSON file' },\n      };\n\n      // Add field options\n      const fields = ObjectRegistry.getFields(objectName);\n      for (const [fieldName, field] of fields) {\n        const optionName = fieldName.replace(/_/g, '-');\n        const description =\n          field.options?.description || `${objectName} ${fieldName}`;\n        options[optionName] = { type: 'string', description };\n      }\n\n      commands.push({\n        name: `${lowerName}:create`,\n        description: `Create new ${objectName}`,\n        aliases: [`${lowerName}:new`],\n        options,\n        handler: async (_args, options) => {\n          await this.handleCreate(objectName, options);\n        },\n      });\n    }\n\n    // UPDATE command\n    if (shouldInclude('update')) {\n      const options: Record<string, any> = {\n        interactive: {\n          type: 'boolean',\n          description: 'interactive mode with prompts',\n        },\n        'from-file': { type: 'string', description: 'update from JSON file' },\n      };\n\n      // Add field options\n      const fields = ObjectRegistry.getFields(objectName);\n      for (const [fieldName, field] of fields) {\n        const optionName = fieldName.replace(/_/g, '-');\n        const description =\n          field.options?.description || `${objectName} ${fieldName}`;\n        options[optionName] = { type: 'string', description };\n      }\n\n      commands.push({\n        name: `${lowerName}:update`,\n        description: `Update ${objectName}`,\n        aliases: [`${lowerName}:edit`],\n        args: ['id'],\n        options,\n        handler: async (args, options) => {\n          await this.handleUpdate(objectName, args[0], options);\n        },\n      });\n    }\n\n    // DELETE command\n    if (shouldInclude('delete')) {\n      commands.push({\n        name: `${lowerName}:delete`,\n        description: `Delete ${objectName}`,\n        aliases: [`${lowerName}:rm`],\n        args: ['id'],\n        options: {\n          force: { type: 'boolean', description: 'skip confirmation prompt' },\n        },\n        handler: async (args, options) => {\n          await this.handleDelete(objectName, args[0], options);\n        },\n      });\n    }\n\n    return commands;\n  }\n\n  /**\n   * Execute a parsed command\n   */\n  async executeCommand(\n    parsed: ParsedArgs,\n    commands: CLICommand[],\n  ): Promise<void> {\n    if (!parsed.command) {\n      await this.showHelp(commands);\n      return;\n    }\n\n    // First check auto-generated object commands (no dependencies to load)\n    const command = commands.find(\n      (cmd) =>\n        cmd.name === parsed.command ||\n        (parsed.command && cmd.aliases && cmd.aliases.includes(parsed.command)),\n    );\n\n    if (command) {\n      // Validate required arguments\n      if (command.args && parsed.args.length < command.args.length) {\n        this.exitWithError(\n          `Missing required arguments: ${command.args.slice(parsed.args.length).join(', ')}`,\n        );\n        return;\n      }\n\n      // Check if handler exists before invoking\n      if (!command.handler) {\n        this.exitWithError(\n          `Command '${parsed.command}' has no handler defined`,\n        );\n        return;\n      }\n\n      try {\n        await command.handler(parsed.args, parsed.options);\n        return;\n      } catch (error) {\n        this.exitWithError(\n          `Error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        );\n        return;\n      }\n    }\n\n    // Only load built-in commands if not found in object commands\n    // This avoids loading tar dependencies unless actually needed\n    const [gnodeCommands, generateCommands] = await Promise.all([\n      getGnodeCommands(),\n      getGenerateCommands(),\n    ]);\n    const builtInCommands = {\n      ...gnodeCommands,\n      ...generateCommands,\n    };\n\n    const builtInCommand = builtInCommands[parsed.command];\n    if (builtInCommand) {\n      // Validate required arguments\n      if (\n        builtInCommand.args &&\n        parsed.args.length < builtInCommand.args.length\n      ) {\n        this.exitWithError(\n          `Missing required arguments: ${builtInCommand.args.slice(parsed.args.length).join(', ')}`,\n        );\n        return;\n      }\n\n      // Check if handler exists before invoking\n      if (!builtInCommand.handler) {\n        this.exitWithError(\n          `Command '${parsed.command}' has no handler defined`,\n        );\n        return;\n      }\n\n      try {\n        await builtInCommand.handler(parsed.args, parsed.options);\n        return;\n      } catch (error) {\n        this.exitWithError(\n          `Error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        );\n        return;\n      }\n    }\n\n    // Command not found in either object or built-in commands\n    this.exitWithError(`Unknown command '${parsed.command}'`);\n  }\n\n  /**\n   * Generate utility commands\n   */\n  generateUtilityCommands(): CLICommand[] {\n    const commands: CLICommand[] = [];\n\n    // List all registered objects\n    commands.push({\n      name: 'objects',\n      description: 'List all registered smrt objects',\n      aliases: ['ls'],\n      handler: async (_args, _options) => {\n        const registeredClasses = ObjectRegistry.getAllClasses();\n        console.log('Registered smrt objects:');\n        for (const [name] of registeredClasses) {\n          console.log(`  • ${name}`);\n        }\n      },\n    });\n\n    // Schema information\n    commands.push({\n      name: 'schema',\n      description: 'Show schema for an object',\n      args: ['object'],\n      handler: this.createSchemaHandler(),\n    });\n\n    // Help command\n    commands.push({\n      name: 'help',\n      description: 'Show help information',\n      aliases: ['h'],\n      handler: async (_args, _options) => {\n        await this.showHelp(commands);\n      },\n    });\n\n    // Version command\n    commands.push({\n      name: 'version',\n      description: 'Show version information',\n      aliases: ['v'],\n      handler: async (_args, _options) => {\n        console.log(`${this.config.name} v${this.config.version}`);\n      },\n    });\n\n    // Status command\n    commands.push({\n      name: 'status',\n      description: 'Show system status',\n      handler: async (_args, _options) => {\n        console.log('System Status:');\n        console.log(`- CLI: ${this.config.name} v${this.config.version}`);\n        console.log(\n          `- Database: ${this.context.db ? 'Connected' : 'Not connected'}`,\n        );\n        console.log(`- AI: ${this.context.ai ? 'Available' : 'Not available'}`);\n        console.log(`- User: ${this.context.user?.id || 'Not authenticated'}`);\n      },\n    });\n\n    return commands;\n  }\n\n  /**\n   * Create schema command handler\n   */\n  private createSchemaHandler(): (args: any, options: any) => Promise<void> {\n    return async (args: any, _options: any) => {\n      const objectName = args[0];\n      const fields = ObjectRegistry.getFields(objectName);\n      if (fields.size === 0) {\n        this.exitWithError(`Object ${objectName} not found`);\n        return;\n      }\n\n      console.log(`Schema for ${objectName}:`);\n      for (const [fieldName, field] of fields) {\n        console.log(\n          `  ${fieldName}: ${field.type}${field.options?.required ? ' (required)' : ''}`,\n        );\n        if (field.options?.description) {\n          console.log(`    ${field.options.description}`);\n        }\n      }\n    };\n  }\n\n  /**\n   * Show help information\n   */\n  async showHelp(commands: CLICommand[]): Promise<void> {\n    console.log(`${this.config.name} v${this.config.version}`);\n    console.log(this.config.description);\n    console.log();\n\n    // Show built-in subcommands first\n    const [gnodeCommands, generateCommands] = await Promise.all([\n      getGnodeCommands(),\n      getGenerateCommands(),\n    ]);\n\n    console.log('Gnode Commands:');\n    for (const command of Object.values(gnodeCommands)) {\n      this.showCommandHelp(command);\n    }\n\n    console.log('Code Generation:');\n    for (const command of Object.values(generateCommands)) {\n      this.showCommandHelp(command);\n    }\n\n    // Show utility commands\n    const utilityCommands = commands.filter(\n      (cmd) =>\n        cmd.name === 'objects' ||\n        cmd.name === 'schema' ||\n        cmd.name === 'help' ||\n        cmd.name === 'version' ||\n        cmd.name === 'status',\n    );\n\n    if (utilityCommands.length > 0) {\n      console.log('Utility Commands:');\n      for (const command of utilityCommands) {\n        this.showCommandHelp(command);\n      }\n    }\n\n    // Show auto-generated object commands\n    const objectCommands = commands.filter(\n      (cmd) => !utilityCommands.includes(cmd),\n    );\n\n    if (objectCommands.length > 0) {\n      console.log('Object Commands (auto-generated):');\n      for (const command of objectCommands) {\n        this.showCommandHelp(command);\n      }\n    }\n  }\n\n  /**\n   * Show help for a single command\n   */\n  private showCommandHelp(command: CLICommand): void {\n    const aliases = command.aliases ? ` (${command.aliases.join(', ')})` : '';\n    const args = command.args\n      ? ` ${command.args.map((arg) => `<${arg}>`).join(' ')}`\n      : '';\n    console.log(`  ${command.name}${args}${aliases}`);\n    console.log(`    ${command.description}`);\n\n    if (command.options) {\n      for (const [name, option] of Object.entries(command.options)) {\n        const short = option.short ? `-${option.short}, ` : '';\n        console.log(`    ${short}--${name}: ${option.description}`);\n      }\n    }\n    console.log();\n  }\n\n  /**\n   * Create a simple spinner\n   */\n  private createSpinner(text: string): {\n    succeed: (text?: string) => void;\n    fail: (text?: string) => void;\n  } {\n    if (this.config.colors) {\n      process.stdout.write(`⠋ ${text}`);\n      return {\n        succeed: (successText?: string) => {\n          process.stdout.clearLine(0);\n          process.stdout.cursorTo(0);\n          console.log(`✅ ${successText || text}`);\n        },\n        fail: (errorText?: string) => {\n          process.stdout.clearLine(0);\n          process.stdout.cursorTo(0);\n          console.log(`❌ ${errorText || text}`);\n        },\n      };\n    }\n    console.log(text);\n    return {\n      succeed: (successText?: string) => console.log(successText || 'Done'),\n      fail: (errorText?: string) => console.log(errorText || 'Failed'),\n    };\n  }\n\n  /**\n   * Prompt for input\n   */\n  private async prompt(message: string): Promise<string> {\n    const rl = createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    });\n\n    return new Promise((resolve) => {\n      rl.question(`${message} `, (answer) => {\n        rl.close();\n        resolve(answer);\n      });\n    });\n  }\n\n  /**\n   * Confirm prompt\n   */\n  private async confirm(message: string): Promise<boolean> {\n    const answer = await this.prompt(`${message} (y/n)`);\n    return answer.toLowerCase().startsWith('y');\n  }\n\n  /**\n   * Handle LIST command\n   */\n  private async handleList(objectName: string, options: any): Promise<void> {\n    const spinner = this.createSpinner(`Listing ${objectName} objects...`);\n\n    try {\n      const collection = await this.getCollection(objectName);\n\n      const listOptions: any = {\n        limit: Number.parseInt(options.limit, 10),\n        offset: Number.parseInt(options.offset, 10),\n      };\n\n      if (options.orderBy) {\n        listOptions.orderBy = options.orderBy;\n      }\n\n      if (options.where) {\n        listOptions.where = JSON.parse(options.where);\n      }\n\n      const results = await collection.list(listOptions);\n\n      spinner.succeed(`Found ${results.length} ${objectName} objects`);\n\n      if (options.format === 'json') {\n        console.log(JSON.stringify(results, null, 2));\n      } else {\n        this.displayTable(results, objectName);\n      }\n    } catch (error) {\n      spinner.fail(`Failed to list ${objectName} objects`);\n      console.error(\n        'Error:',\n        error instanceof Error ? error.message : 'Unknown error',\n      );\n    }\n  }\n\n  /**\n   * Handle GET command\n   */\n  private async handleGet(\n    objectName: string,\n    id: string,\n    options: any,\n  ): Promise<void> {\n    const spinner = this.createSpinner(`Getting ${objectName}...`);\n\n    try {\n      const collection = await this.getCollection(objectName);\n      const result = await collection.get(id);\n\n      if (!result) {\n        spinner.fail(`${objectName} not found`);\n        this.exitWithError(`${objectName} not found`);\n        return;\n      }\n\n      spinner.succeed(`Found ${objectName}`);\n\n      if (options.format === 'yaml') {\n        // Simple YAML-like output\n        console.log(this.toYamlString(result));\n      } else {\n        console.log(JSON.stringify(result, null, 2));\n      }\n    } catch (error) {\n      spinner.fail(`Failed to get ${objectName}`);\n      console.error(\n        'Error:',\n        error instanceof Error ? error.message : 'Unknown error',\n      );\n    }\n  }\n\n  /**\n   * Handle CREATE command\n   */\n  private async handleCreate(objectName: string, options: any): Promise<void> {\n    try {\n      let data: any = {};\n\n      if (options.fromFile) {\n        // Load from file\n        const fs = await import('node:fs/promises');\n        const content = await fs.readFile(options.fromFile, 'utf-8');\n        data = JSON.parse(content);\n      } else if (options.interactive && this.config.prompt) {\n        // Interactive mode\n        data = await this.promptForFields(objectName, {});\n      } else {\n        // From command line options\n        const fields = ObjectRegistry.getFields(objectName);\n        for (const [fieldName] of fields) {\n          const optionName = fieldName.replace(/_/g, '-');\n          if (options[optionName] !== undefined) {\n            data[fieldName] = this.parseFieldValue(options[optionName]);\n          }\n        }\n      }\n\n      const spinner = this.createSpinner(`Creating ${objectName}...`);\n\n      const collection = await this.getCollection(objectName);\n      const result = await collection.create(data);\n      await result.save();\n\n      spinner.succeed(`Created ${objectName} with ID: ${result.id}`);\n\n      if (!options.quiet) {\n        console.log(JSON.stringify(result, null, 2));\n      }\n    } catch (error) {\n      this.exitWithError(\n        error instanceof Error ? error.message : 'Unknown error',\n      );\n    }\n  }\n\n  /**\n   * Handle UPDATE command\n   */\n  private async handleUpdate(\n    objectName: string,\n    id: string,\n    options: any,\n  ): Promise<void> {\n    try {\n      const collection = await this.getCollection(objectName);\n      const existing = await collection.get(id);\n\n      if (!existing) {\n        this.exitWithError(`${objectName} not found`);\n        return;\n      }\n\n      let data: any = {};\n\n      if (options.fromFile) {\n        // Load from file\n        const fs = await import('node:fs/promises');\n        const content = await fs.readFile(options.fromFile, 'utf-8');\n        data = JSON.parse(content);\n      } else if (options.interactive && this.config.prompt) {\n        // Interactive mode with current values\n        data = await this.promptForFields(objectName, existing);\n      } else {\n        // From command line options\n        const fields = ObjectRegistry.getFields(objectName);\n        for (const [fieldName] of fields) {\n          const optionName = fieldName.replace(/_/g, '-');\n          if (options[optionName] !== undefined) {\n            data[fieldName] = this.parseFieldValue(options[optionName]);\n          }\n        }\n      }\n\n      const spinner = this.createSpinner(`Updating ${objectName}...`);\n\n      Object.assign(existing, data);\n      await existing.save();\n\n      spinner.succeed(`Updated ${objectName}`);\n\n      if (!options.quiet) {\n        console.log(JSON.stringify(existing, null, 2));\n      }\n    } catch (error) {\n      this.exitWithError(\n        error instanceof Error ? error.message : 'Unknown error',\n      );\n    }\n  }\n\n  /**\n   * Handle DELETE command\n   */\n  private async handleDelete(\n    objectName: string,\n    id: string,\n    options: any,\n  ): Promise<void> {\n    try {\n      const collection = await this.getCollection(objectName);\n      const existing = await collection.get(id);\n\n      if (!existing) {\n        this.exitWithError(`${objectName} not found`);\n        return;\n      }\n\n      // Confirmation prompt\n      if (!options.force && this.config.prompt) {\n        const confirmed = await this.confirm(\n          `Are you sure you want to delete ${objectName} \"${existing.name || existing.id}\"?`,\n        );\n        if (!confirmed) {\n          console.log('Cancelled');\n          return;\n        }\n      }\n\n      const spinner = this.createSpinner(`Deleting ${objectName}...`);\n\n      await existing.delete();\n\n      spinner.succeed(`Deleted ${objectName}`);\n    } catch (error) {\n      this.exitWithError(\n        error instanceof Error ? error.message : 'Unknown error',\n      );\n    }\n  }\n\n  /**\n   * Get or create collection for an object\n   */\n  private async getCollection(\n    objectName: string,\n  ): Promise<SmrtCollection<any>> {\n    if (!this.collections.has(objectName)) {\n      const classInfo = ObjectRegistry.getClass(objectName);\n      if (!classInfo || !classInfo.collectionConstructor) {\n        throw new Error(\n          `Object ${objectName} not found or has no collection constructor`,\n        );\n      }\n\n      const collection = new classInfo.collectionConstructor({\n        ai: this.context.ai,\n        db: this.context.db,\n      });\n\n      await collection.initialize();\n      this.collections.set(objectName, collection);\n    }\n    return this.collections.get(objectName)!;\n  }\n\n  /**\n   * Interactive field prompts\n   */\n  private async promptForFields(\n    objectName: string,\n    current: any,\n  ): Promise<any> {\n    const fields = ObjectRegistry.getFields(objectName);\n    const result: any = {};\n\n    for (const [fieldName, field] of fields) {\n      const currentValue = current[fieldName];\n      let message = `${fieldName}`;\n      if (field.options?.description) {\n        message += ` (${field.options.description})`;\n      }\n      if (currentValue !== undefined) {\n        message += ` [${currentValue}]`;\n      }\n      message += ': ';\n\n      if (field.type === 'boolean') {\n        result[fieldName] = await this.confirm(message);\n      } else {\n        const input = await this.prompt(message);\n        if (input.trim()) {\n          result[fieldName] = this.parseFieldValue(input);\n        } else if (currentValue !== undefined) {\n          result[fieldName] = currentValue;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Parse field value from string\n   */\n  private parseFieldValue(value: string): any {\n    // Try to parse as JSON first\n    try {\n      return JSON.parse(value);\n    } catch {\n      // Return as string\n      return value;\n    }\n  }\n\n  /**\n   * Display results as table\n   */\n  private displayTable(results: any[], objectName: string): void {\n    if (results.length === 0) {\n      console.log(`No ${objectName} objects found`);\n      return;\n    }\n\n    // Simple table display\n    const keys = ['id', 'name', 'slug', 'created_at'];\n    const rows = results.map((item) =>\n      keys.map((key) => String(item[key] || '').substring(0, 30)),\n    );\n\n    console.log();\n    console.log(keys.join('\\t'));\n    console.log('-'.repeat(80));\n    rows.forEach((row) => {\n      console.log(row.join('\\t'));\n    });\n    console.log();\n  }\n\n  /**\n   * Convert object to YAML-like string\n   */\n  private toYamlString(obj: any, indent = 0): string {\n    const spaces = '  '.repeat(indent);\n    let result = '';\n\n    for (const [key, value] of Object.entries(obj)) {\n      if (value === null || value === undefined) {\n        result += `${spaces}${key}: null\\n`;\n      } else if (typeof value === 'object' && !Array.isArray(value)) {\n        result += `${spaces}${key}:\\n${this.toYamlString(value, indent + 1)}`;\n      } else if (Array.isArray(value)) {\n        result += `${spaces}${key}:\\n`;\n        value.forEach((item) => {\n          result += `${spaces}  - ${item}\\n`;\n        });\n      } else {\n        result += `${spaces}${key}: ${value}\\n`;\n      }\n    }\n\n    return result;\n  }\n}\n\n// CLI Binary Entry Point\nexport async function main() {\n  const config: CLIConfig = {\n    name: 'smrt',\n    version: '1.0.0',\n    description: 'Admin CLI for smrt objects',\n    prompt: !process.env.CI, // Disable prompts in CI\n    colors: !process.env.NO_COLOR && process.stdout.isTTY,\n  };\n\n  const context: CLIContext = {\n    // db and ai can be configured via environment or initialized here\n  };\n\n  const cli = new CLIGenerator(config, context);\n  const handler = cli.generateHandler();\n\n  // Remove 'node' and script name from argv\n  const args = process.argv.slice(2);\n\n  try {\n    await handler(args);\n  } catch (error) {\n    console.error(\n      'CLI Error:',\n      error instanceof Error ? error.message : 'Unknown error',\n    );\n    process.exit(1);\n  }\n}\n\n// Run if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch((error) => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n"],"names":["options"],"mappings":"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"}