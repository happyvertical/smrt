/**
 * ProfileRelationshipTerm model - Temporal data for relationships
 *
 * Defines the duration or terms of a specific relationship.
 * Uses UUID primary key with foreign key to ProfileRelationship.
 */

import {
  datetime,
  foreignKey,
  SmrtObject,
  type SmrtObjectOptions,
  smrt,
} from '@smrt/core';

export interface ProfileRelationshipTermOptions extends SmrtObjectOptions {
  relationshipId?: string;
  startedAt?: Date;
  endedAt?: Date;
}

@smrt({
  api: { include: ['list', 'get', 'create', 'update', 'delete'] },
  mcp: { include: ['list', 'get'] },
  cli: true,
})
export class ProfileRelationshipTerm extends SmrtObject {
  // id: UUID (auto-generated by SmrtObject)
  relationshipId = foreignKey('ProfileRelationship', { required: true }); // References ProfileRelationship.id
  startedAt = datetime({ required: true }); // Start date of the term
  endedAt = datetime(); // Optional end date

  constructor(options: ProfileRelationshipTermOptions = {}) {
    super(options);
    // Field values are automatically set by initializePropertiesFromOptions()
    // No need to manually assign Field properties here
  }

  /**
   * Check if this term is currently active
   *
   * @returns True if active (no end date or end date in future)
   */
  isActive(): boolean {
    if (!this.endedAt) return true;
    // Convert Field to Date for comparison
    const endDate =
      this.endedAt instanceof Date
        ? this.endedAt
        : new Date(String(this.endedAt));
    return endDate > new Date();
  }

  /**
   * End this term
   *
   * @param endedAt - End date for the term (defaults to now)
   */
  async end(endedAt: Date = new Date()): Promise<void> {
    // Assign to Field.value
    (this.endedAt as any).value = endedAt;
    await this.save();
  }

  /**
   * Get the duration of this term in days
   *
   * @returns Duration in days
   */
  getDurationDays(): number {
    // Convert Field instances to Date objects
    const endValue = this.endedAt
      ? this.endedAt instanceof Date
        ? this.endedAt
        : new Date(String(this.endedAt))
      : new Date();
    const startValue =
      this.startedAt instanceof Date
        ? this.startedAt
        : new Date(String(this.startedAt));
    const diffMs = endValue.getTime() - startValue.getTime();
    return Math.floor(diffMs / (1000 * 60 * 60 * 24));
  }
}
