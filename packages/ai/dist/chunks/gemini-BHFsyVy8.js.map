{"version":3,"file":"gemini-BHFsyVy8.js","sources":["../../src/shared/providers/gemini.ts"],"sourcesContent":["/**\n * Google Gemini provider implementation\n */\n\nimport crypto from 'node:crypto';\n\nimport type {\n  AICapabilities,\n  AIInterface,\n  AIMessage,\n  AIModel,\n  AIResponse,\n  ChatOptions,\n  CompletionOptions,\n  EmbeddingOptions,\n  EmbeddingResponse,\n  GeminiOptions,\n} from '../types';\nimport {\n  AIError,\n  AuthenticationError,\n  ModelNotFoundError,\n  RateLimitError,\n} from '../types';\n\n// Note: This implementation uses the new @google/genai package\n// @google/generative-ai is deprecated - migrated to @google/genai\n\nexport class GeminiProvider implements AIInterface {\n  private options: GeminiOptions;\n  private client: any; // GoogleGenAI instance from @google/genai\n\n  constructor(options: GeminiOptions) {\n    this.options = {\n      defaultModel: 'gemini-2.5-flash',\n      ...options,\n    };\n\n    // Initialize Google Generative AI client\n    this.initializeClientSync();\n  }\n\n  private initializeClientSync() {\n    try {\n      // Dynamic import in constructor - this will work if the package is installed\n      import('@google/genai')\n        .then(({ GoogleGenAI }) => {\n          this.client = new GoogleGenAI({ apiKey: this.options.apiKey });\n        })\n        .catch(() => {\n          // Client will be null and we'll handle it in methods\n        });\n    } catch (_error) {\n      // Client will be null and we'll handle it in methods\n    }\n  }\n\n  private async ensureClient() {\n    if (!this.client) {\n      try {\n        const { GoogleGenAI } = await import('@google/genai');\n        this.client = new GoogleGenAI({ apiKey: this.options.apiKey });\n      } catch (_error) {\n        throw new AIError(\n          'Failed to initialize Gemini client. Make sure @google/genai is installed.',\n          'INITIALIZATION_ERROR',\n          'gemini',\n        );\n      }\n    }\n  }\n\n  async chat(\n    messages: AIMessage[],\n    options: ChatOptions = {},\n  ): Promise<AIResponse> {\n    try {\n      await this.ensureClient();\n\n      const model = options.model || this.options.defaultModel;\n      const generationConfig: Record<string, any> = {\n        maxOutputTokens: options.maxTokens,\n        temperature: options.temperature,\n        topP: options.topP,\n        stopSequences: Array.isArray(options.stop)\n          ? options.stop\n          : options.stop\n            ? [options.stop]\n            : undefined,\n        // Add response MIME type for JSON output\n        responseMimeType:\n          options.responseFormat?.type === 'json_object'\n            ? 'application/json'\n            : undefined,\n      };\n\n      // Build request config\n      const requestConfig: Record<string, any> = {\n        model,\n        contents: this.messagesToGeminiFormat(messages),\n        generationConfig,\n      };\n\n      // Add tools if provided\n      if (options.tools && options.tools.length > 0) {\n        requestConfig.tools = [\n          {\n            functionDeclarations: options.tools.map((tool) => ({\n              name: tool.function.name,\n              description: tool.function.description || '',\n              parameters: tool.function.parameters || { type: 'object' },\n            })),\n          },\n        ];\n\n        // Map tool choice\n        if (options.toolChoice) {\n          requestConfig.toolConfig = this.mapToolChoice(options.toolChoice);\n        }\n      }\n\n      // Call new SDK API: ai.models.generateContent()\n      const result = await this.client.models.generateContent(requestConfig);\n\n      // Extract tool calls from response\n      // NOTE: Gemini 2.5 doesn't seem to reliably return functionCall objects\n      // even when tools are provided. The model often describes tool calls in text\n      // instead of using the structured function calling API.\n      let toolCalls: AIResponse['toolCalls'];\n      const firstCandidate = result.candidates?.[0];\n      if (firstCandidate?.content?.parts) {\n        const functionCalls = firstCandidate.content.parts.filter(\n          (part: any) => part.functionCall,\n        );\n        if (functionCalls.length > 0) {\n          toolCalls = functionCalls.map((part: any) => ({\n            id: `call_${crypto.randomUUID()}`,\n            type: 'function' as const,\n            function: {\n              name: part.functionCall.name,\n              arguments: JSON.stringify(part.functionCall.args || {}),\n            },\n          }));\n        }\n      }\n\n      // Clean content - remove markdown code blocks if JSON mode was requested\n      let content = result.text || '';\n      if (options.responseFormat?.type === 'json_object') {\n        content = this.stripMarkdownCodeBlock(content);\n      }\n\n      return {\n        content,\n        model,\n        finishReason: this.mapFinishReason(result),\n        usage: {\n          promptTokens: result.usageMetadata?.promptTokenCount || 0,\n          completionTokens: result.usageMetadata?.candidatesTokenCount || 0,\n          totalTokens: result.usageMetadata?.totalTokenCount || 0,\n        },\n        toolCalls: toolCalls && toolCalls.length > 0 ? toolCalls : undefined,\n      };\n    } catch (error) {\n      throw this.mapError(error);\n    }\n  }\n\n  async complete(\n    prompt: string,\n    options: CompletionOptions = {},\n  ): Promise<AIResponse> {\n    return this.chat([{ role: 'user', content: prompt }], {\n      model: options.model,\n      maxTokens: options.maxTokens,\n      temperature: options.temperature,\n      topP: options.topP,\n      n: options.n,\n      stop: options.stop,\n      stream: options.stream,\n      onProgress: options.onProgress,\n    });\n  }\n\n  async embed(\n    _text: string | string[],\n    _options: EmbeddingOptions = {},\n  ): Promise<EmbeddingResponse> {\n    try {\n      // TODO: Implement Gemini embeddings\n      // Note: Gemini may not support embeddings directly\n      throw new AIError(\n        'Gemini embeddings not implemented',\n        'NOT_IMPLEMENTED',\n        'gemini',\n      );\n    } catch (error) {\n      throw this.mapError(error);\n    }\n  }\n\n  async *stream(\n    _messages: AIMessage[],\n    _options: ChatOptions = {},\n  ): AsyncIterable<string> {\n    // TODO: Implement Gemini streaming\n    // For now, yield an empty stream and then throw\n    yield* [];\n    throw new AIError(\n      'Gemini streaming not implemented',\n      'NOT_IMPLEMENTED',\n      'gemini',\n    );\n  }\n\n  async countTokens(text: string): Promise<number> {\n    try {\n      // TODO: Implement Gemini token counting\n      // const model = this.client.getGenerativeModel({ model: 'gemini-1.5-pro' });\n      // const { totalTokens } = await model.countTokens(text);\n      // return totalTokens;\n\n      // Approximation for now\n      return Math.ceil(text.length / 4);\n    } catch (error) {\n      throw this.mapError(error);\n    }\n  }\n\n  async getModels(): Promise<AIModel[]> {\n    // Return static list of known Gemini models\n    return [\n      {\n        id: 'gemini-2.0-flash-001',\n        name: 'Gemini 2.0 Flash',\n        description: 'Latest fast and efficient Gemini model with function calling',\n        contextLength: 1000000,\n        capabilities: ['text', 'chat', 'vision', 'functions'],\n        supportsFunctions: true,\n        supportsVision: true,\n      },\n      {\n        id: 'gemini-2.5-flash',\n        name: 'Gemini 2.5 Flash',\n        description: 'Experimental next-generation Gemini model',\n        contextLength: 1000000,\n        capabilities: ['text', 'chat', 'vision', 'functions'],\n        supportsFunctions: true,\n        supportsVision: true,\n      },\n      {\n        id: 'gemini-1.5-pro',\n        name: 'Gemini 1.5 Pro (Legacy)',\n        description: 'Previous generation model (may not be available)',\n        contextLength: 2000000,\n        capabilities: ['text', 'chat', 'vision', 'functions'],\n        supportsFunctions: true,\n        supportsVision: true,\n      },\n    ];\n  }\n\n  async getCapabilities(): Promise<AICapabilities> {\n    return {\n      chat: true,\n      completion: true,\n      embeddings: false, // Gemini may not support embeddings directly\n      streaming: true,\n      functions: true,\n      vision: true,\n      fineTuning: false,\n      maxContextLength: 2000000,\n      supportedOperations: [\n        'chat',\n        'completion',\n        'streaming',\n        'functions',\n        'vision',\n      ],\n    };\n  }\n\n  private mapToolChoice(\n    toolChoice?: 'auto' | 'none' | { type: 'function'; function: { name: string } },\n  ): any {\n    if (!toolChoice || toolChoice === 'auto') {\n      return { functionCallingConfig: { mode: 'AUTO' } };\n    }\n\n    if (toolChoice === 'none') {\n      return { functionCallingConfig: { mode: 'NONE' } };\n    }\n\n    if (typeof toolChoice === 'object' && toolChoice.type === 'function') {\n      return {\n        functionCallingConfig: {\n          mode: 'ANY',\n          allowedFunctionNames: [toolChoice.function.name],\n        },\n      };\n    }\n\n    return { functionCallingConfig: { mode: 'AUTO' } };\n  }\n\n  private mapFinishReason(response: any): AIResponse['finishReason'] {\n    // Check if response has function calls in any candidate\n    const firstCandidate = response.candidates?.[0];\n    if (firstCandidate?.content?.parts) {\n      const hasFunctionCall = firstCandidate.content.parts.some(\n        (part: any) => part.functionCall,\n      );\n      if (hasFunctionCall) {\n        return 'tool_calls';\n      }\n    }\n\n    // Gemini doesn't provide detailed finish reasons, default to 'stop'\n    return 'stop';\n  }\n\n  private messagesToGeminiFormat(messages: AIMessage[]): string {\n    // Convert messages to a simple text prompt\n    // The new SDK expects a string for the contents field\n    return messages\n      .map((message) => {\n        switch (message.role) {\n          case 'system':\n            return `Instructions: ${message.content}`;\n          case 'user':\n            return `Human: ${message.content}`;\n          case 'assistant':\n            return `Assistant: ${message.content}`;\n          default:\n            return message.content;\n        }\n      })\n      .join('\\n\\n');\n  }\n\n  private stripMarkdownCodeBlock(text: string): string {\n    // Remove markdown code blocks like ```json\\n...\\n```\n    const codeBlockRegex = /^```(?:json|javascript|typescript)?\\s*\\n?([\\s\\S]*?)\\n?```\\s*$/;\n    const match = text.match(codeBlockRegex);\n    return match ? match[1].trim() : text.trim();\n  }\n\n  private mapError(error: unknown): AIError {\n    if (error instanceof AIError) {\n      return error;\n    }\n\n    // Map common Gemini error patterns\n    const message =\n      error instanceof Error ? error.message : 'Unknown Gemini error occurred';\n\n    if (message.includes('API_KEY_INVALID') || message.includes('401')) {\n      return new AuthenticationError('gemini');\n    }\n\n    if (message.includes('QUOTA_EXCEEDED') || message.includes('429')) {\n      return new RateLimitError('gemini');\n    }\n\n    if (message.includes('MODEL_NOT_FOUND') || message.includes('404')) {\n      return new ModelNotFoundError(message, 'gemini');\n    }\n\n    return new AIError(message, 'UNKNOWN_ERROR', 'gemini');\n  }\n}\n"],"names":[],"mappings":"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"}