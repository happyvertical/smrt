#!/usr/bin/env node

/**
 * Build-time manifest generator
 * Scans TypeScript source files and generates static manifest JSON
 */

import { fileURLToPath } from 'node:url';
import { dirname, resolve } from 'node:path';
import { writeFileSync, mkdirSync, readFileSync } from 'node:fs';
import fg from 'fast-glob';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function generateManifest() {
  try {
    console.log('[smrt] Generating static manifest...');

    // We need to use a different approach since we're in a .js file
    // Use a subprocess to run TypeScript directly, or use ts-node
    const { execSync } = await import('node:child_process');

    // Create a temporary TypeScript runner
    const tsCode = `
import { ASTScanner, ManifestGenerator } from './src/scanner/index.js';
import fg from 'fast-glob';
import { writeFileSync, mkdirSync } from 'node:fs';
import { resolve } from 'node:path';

async function runScanner() {
  const sourceFiles = fg.sync(['src/**/*.ts'], {
    absolute: true,
    ignore: [
      'src/**/*.test.ts',
      'src/**/*.spec.ts',
      'src/**/*.d.ts',
      'src/scanner/**/*.ts',
      'src/vite-plugin/**/*.ts',
    ],
  });

  if (sourceFiles.length === 0) {
    console.log('No source files found');
    return { version: '1.0.0', timestamp: Date.now(), objects: {} };
  }

  const scanner = new ASTScanner(sourceFiles, {
    baseClasses: ['SmrtObject', 'SmrtClass', 'SmrtCollection'],
    includePrivateMethods: false,
    includeStaticMethods: true,
    followImports: false,
  });

  const scanResults = scanner.scanFiles();
  const generator = new ManifestGenerator();
  return generator.generateManifest(scanResults);
}

runScanner().then(manifest => {
  mkdirSync('src/manifest', { recursive: true });
  writeFileSync('src/manifest/static-manifest.json', JSON.stringify(manifest, null, 2));

  const tsContent = \`/**
 * Auto-generated static manifest
 * Generated at build time from SMRT object scanning
 * DO NOT EDIT - This file is automatically generated
 */

import type { SmartObjectManifest } from '../scanner/types';

export const staticManifest: SmartObjectManifest = \${JSON.stringify(manifest, null, 2)} as const;

export default staticManifest;
\`;
  writeFileSync('src/manifest/static-manifest.ts', tsContent);

  console.log(\`[smrt] ✅ Generated static manifest with \${Object.keys(manifest.objects).length} objects\`);
}).catch(console.error);
`;

    // Write and execute the TypeScript code
    writeFileSync('temp-manifest-gen.ts', tsCode);

    try {
      execSync('npx tsx temp-manifest-gen.ts', { stdio: 'inherit' });
    } finally {
      // Clean up
      try { execSync('rm temp-manifest-gen.ts'); } catch {}
    }

    return { version: '1.0.0', timestamp: Date.now(), objects: {} };
  } catch (error) {
    console.error('[smrt] ❌ Failed to generate manifest:', error);
    process.exit(1);
  }
}

function createEmptyManifest() {
  return {
    version: '1.0.0',
    timestamp: Date.now(),
    objects: {},
  };
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  generateManifest();
}

export { generateManifest };